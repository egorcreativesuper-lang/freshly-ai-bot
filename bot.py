import os
import logging
import sqlite3
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler,
    ContextTypes, ConversationHandler
)
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è
WAITING_PRODUCT, WAITING_DATE = range(2)

# –ë–∞–∑–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ ‚Äî —Ä–∞—Å—à–∏—Ä–µ–Ω–∞
PRODUCTS_DATA = {
    "–º–æ–ª–æ–∫–æ": {"shelf_life": 7, "category": "–º–æ–ª–æ—á–Ω—ã–µ"},
    "–∫–µ—Ñ–∏—Ä": {"shelf_life": 5, "category": "–º–æ–ª–æ—á–Ω—ã–µ"},
    "—Å—ã—Ä": {"shelf_life": 14, "category": "–º–æ–ª–æ—á–Ω—ã–µ"},
    "—Ç–≤–æ—Ä–æ–≥": {"shelf_life": 5, "category": "–º–æ–ª–æ—á–Ω—ã–µ"},
    "—Å–º–µ—Ç–∞–Ω–∞": {"shelf_life": 7, "category": "–º–æ–ª–æ—á–Ω—ã–µ"},
    "–π–æ–≥—É—Ä—Ç": {"shelf_life": 10, "category": "–º–æ–ª–æ—á–Ω—ã–µ"},
    "—è–π—Ü–∞": {"shelf_life": 30, "category": "—è–π—Ü–∞"},
    "–∫—É—Ä–∏—Ü–∞": {"shelf_life": 3, "category": "–º—è—Å–æ"},
    "–≥–æ–≤—è–¥–∏–Ω–∞": {"shelf_life": 4, "category": "–º—è—Å–æ"},
    "—Ä—ã–±–∞": {"shelf_life": 2, "category": "—Ä—ã–±–∞"},
    "—Ö–ª–µ–±": {"shelf_life": 5, "category": "—Ö–ª–µ–±"},
    "–ø–∞—Å—Ç–∞": {"shelf_life": 60, "category": "–º–∞–∫–∞—Ä–æ–Ω—ã"},
    "—Ä–∏—Å": {"shelf_life": 90, "category": "–∑–ª–∞–∫–∏"},
    "–∫–æ—Ñ–µ": {"shelf_life": 180, "category": "–Ω–∞–ø–∏—Ç–∫–∏"},
    "—á–∞–π": {"shelf_life": 365, "category": "–Ω–∞–ø–∏—Ç–∫–∏"},
    "–±—É—Ç—ã–ª–∫–∞ –≤–æ–¥—ã": {"shelf_life": 365, "category": "–Ω–∞–ø–∏—Ç–∫–∏"},
    "—à–æ–∫–æ–ª–∞–¥": {"shelf_life": 90, "category": "—Å–ª–∞–¥–æ—Å—Ç–∏"},
    "–ø–µ—á–µ–Ω—å–µ": {"shelf_life": 30, "category": "—Å–ª–∞–¥–æ—Å—Ç–∏"},
    "—Å–∞—Ö–∞—Ä": {"shelf_life": 365, "category": "—Å–ª–∞–¥–æ—Å—Ç–∏"},
    "–º–∞—Å–ª–æ": {"shelf_life": 120, "category": "–∂–∏—Ä—ã"},
    "–º–∞—Å–ª–æ —Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω–æ–µ": {"shelf_life": 180, "category": "–∂–∏—Ä—ã"},
    "–∫–æ–Ω—Å–µ—Ä–≤—ã": {"shelf_life": 365, "category": "–∫–æ–Ω—Å–µ—Ä–≤—ã"},
    "–æ–≤–æ—â–∏": {"shelf_life": 7, "category": "–æ–≤–æ—â–∏"},
    "—Ñ—Ä—É–∫—Ç—ã": {"shelf_life": 5, "category": "—Ñ—Ä—É–∫—Ç—ã"},
}


class Database:
    def __init__(self):
        self.init_db()

    def init_db(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö SQLite"""
        with sqlite3.connect('products.db', check_same_thread=False) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS products (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER,
                    product_name TEXT,
                    purchase_date DATE,
                    expiration_date DATE,
                    notified BOOLEAN DEFAULT FALSE
                )
            ''')
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS users (
                    user_id INTEGER PRIMARY KEY,
                    username TEXT,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            conn.commit()

    async def add_user(self, user_id: int, username: str):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        with sqlite3.connect('products.db', check_same_thread=False) as conn:
            cursor = conn.cursor()
            cursor.execute(
                'INSERT OR IGNORE INTO users (user_id, username) VALUES (?, ?)',
                (user_id, username or '')
            )
            conn.commit()

    async def add_product(self, user_id: int, product_name: str, purchase_date: datetime) -> bool:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞"""
        if product_name not in PRODUCTS_DATA:
            return False

        shelf_life = PRODUCTS_DATA[product_name]['shelf_life']
        expiration_date = purchase_date + timedelta(days=shelf_life)

        with sqlite3.connect('products.db', check_same_thread=False) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                INSERT INTO products (user_id, product_name, purchase_date, expiration_date)
                VALUES (?, ?, ?, ?)
            ''', (user_id, product_name, purchase_date.date(), expiration_date.date()))
            conn.commit()
        return True

    async def get_user_products(self, user_id: int):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        with sqlite3.connect('products.db', check_same_thread=False) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                SELECT product_name, purchase_date, expiration_date
                FROM products
                WHERE user_id = ?
                ORDER BY expiration_date
            ''', (user_id,))
            return cursor.fetchall()

    async def get_products_count(self, user_id: int) -> int:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        with sqlite3.connect('products.db', check_same_thread=False) as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT COUNT(*) FROM products WHERE user_id = ?', (user_id,))
            result = cursor.fetchone()
            return result[0] if result else 0

    async def clear_user_products(self, user_id: int):
        """–û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        with sqlite3.connect('products.db', check_same_thread=False) as conn:
            cursor = conn.cursor()
            cursor.execute('DELETE FROM products WHERE user_id = ?', (user_id,))
            conn.commit()

    async def get_expiring_products(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤, —Å—Ä–æ–∫ –∫–æ—Ç–æ—Ä—ã—Ö –∏—Å—Ç–µ–∫–∞–µ—Ç –∑–∞–≤—Ç—Ä–∞"""
        tomorrow = (datetime.now() + timedelta(days=1)).date()
        with sqlite3.connect('products.db', check_same_thread=False) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                SELECT p.user_id, u.username, p.product_name, p.expiration_date
                FROM products p
                JOIN users u ON p.user_id = u.user_id
                WHERE p.expiration_date = ? AND p.notified = FALSE
            ''', (tomorrow,))
            return cursor.fetchall()

    async def mark_as_notified(self, user_id: int, product_name: str):
        """–ü–æ–º–µ—Ç–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç –∫–∞–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–Ω—ã–π"""
        with sqlite3.connect('products.db', check_same_thread=False) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                UPDATE products
                SET notified = TRUE
                WHERE user_id = ? AND product_name = ?
            ''', (user_id, product_name))
            conn.commit()


class FreshlyBot:
    def __init__(self, token: str):
        self.token = token
        self.db = Database()
        self.application: Application = None
        self.scheduler = AsyncIOScheduler()

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        await self.db.add_user(user.id, user.username)

        await self.show_main_menu(update, context)

    async def show_main_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏"""
        text = "üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        keyboard = [
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç", callback_data="add_product")],
            [InlineKeyboardButton("üìã –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫", callback_data="list_products")],
            [InlineKeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å—ë", callback_data="clear_products")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        if update.callback_query:
            await update.callback_query.edit_message_text(text, reply_markup=reply_markup)
        else:
            await update.message.reply_text(text, reply_markup=reply_markup)

    async def list_products(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤"""
        user = update.effective_user
        products = await self.db.get_user_products(user.id)

        if not products:
            text = "üì≠ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤."
            await self._edit_or_reply(update, text)
            return

        message = "üìã **–í–∞—à–∏ –ø—Ä–æ–¥—É–∫—Ç—ã:**\n\n"
        today = datetime.now().date()

        for product_name, purchase_date, expiration_date in products:
            days_left = (expiration_date - today).days

            if days_left < 0:
                status = "üî¥"
                status_text = "–ü–†–û–°–†–û–ß–ï–ù–û"
            elif days_left == 0:
                status = "üî¥"
                status_text = "–ò—Å—Ç–µ–∫–∞–µ—Ç —Å–µ–≥–æ–¥–Ω—è"
            elif days_left == 1:
                status = "üü†"
                status_text = "–ò—Å—Ç–µ–∫–∞–µ—Ç –∑–∞–≤—Ç—Ä–∞"
            elif days_left <= 3:
                status = "üü°"
                status_text = f"–ò—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ {days_left} –¥–Ω—è"
            else:
                status = "üü¢"
                status_text = f"–û—Å—Ç–∞–ª–æ—Å—å {days_left} –¥–Ω–µ–π"

            message += f"{status} **{product_name}**\n"
            message += f"   üìÖ –ö—É–ø–ª–µ–Ω: {purchase_date}\n"
            message += f"   ‚è≥ –°—Ä–æ–∫ –¥–æ: {expiration_date} ({status_text})\n\n"

        products_count = await self.db.get_products_count(user.id)
        message += f"üìä –í—Å–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {products_count}/5"

        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await self._edit_or_reply(update, message, reply_markup)

    async def clear_products(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤"""
        user = update.effective_user
        await self.db.clear_user_products(user.id)
        text = "‚úÖ –í—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã —É–¥–∞–ª–µ–Ω—ã!"
        await self._edit_or_reply(update, text)
        await self.show_main_menu(update, context)

    async def add_product_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ ‚Äî –≤—ã–±–æ—Ä –∏–∑ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫"""
        user = update.effective_user
        products_count = await self.db.get_products_count(user.id)

        if products_count >= 5:
            text = "‚ùå –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ (5 –ø—Ä–æ–¥—É–∫—Ç–æ–≤). –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —á—Ç–æ–±—ã –æ—Å–≤–æ–±–æ–¥–∏—Ç—å –º–µ—Å—Ç–æ."
            await self._edit_or_reply(update, text)
            await self.show_main_menu(update, context)
            return ConversationHandler.END

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –ø–æ 2 –≤ —Å—Ç—Ä–æ–∫–µ
        keyboard = []
        product_list = list(PRODUCTS_DATA.keys())
        for i in range(0, len(product_list), 2):
            row = []
            for j in range(2):
                if i + j < len(product_list):
                    name = product_list[i + j]
                    row.append(InlineKeyboardButton(name.capitalize(), callback_data=f"product_{name}"))
            keyboard.append(row)

        keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")])

        reply_markup = InlineKeyboardMarkup(keyboard)
        await self._edit_or_reply(update, "üì¶ –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç:", reply_markup)

        return WAITING_PRODUCT

    async def handle_product_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ —á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É"""
        query = update.callback_query
        await query.answer()

        if query.data == "cancel":
            await query.edit_message_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
            await self.show_main_menu(update, context)
            return ConversationHandler.END

        product_name = query.data[len("product_"):]
        context.user_data['current_product'] = product_name

        keyboard = [
            [InlineKeyboardButton("üìÖ –°–µ–≥–æ–¥–Ω—è", callback_data="today")],
            [InlineKeyboardButton("‚è™ –í—á–µ—Ä–∞", callback_data="yesterday")],
            [InlineKeyboardButton("‚è™ 2 –¥–Ω—è –Ω–∞–∑–∞–¥", callback_data="two_days_ago")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_product"),
             InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(
            f"üì¶ –ü—Ä–æ–¥—É–∫—Ç: **{product_name}**\nüìÜ –ö–æ–≥–¥–∞ –≤—ã –µ–≥–æ –∫—É–ø–∏–ª–∏?",
            reply_markup=reply_markup
        )

        return WAITING_DATE

    async def handle_date_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –ø–æ–∫—É–ø–∫–∏"""
        query = update.callback_query
        await query.answer()

        if query.data == "cancel":
            await query.edit_message_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
            await self.show_main_menu(update, context)
            return ConversationHandler.END

        if query.data == "back_to_product":
            return await self.add_product_start(update, context)

        try:
            if query.data == "today":
                purchase_date = datetime.now()
            elif query.data == "yesterday":
                purchase_date = datetime.now() - timedelta(days=1)
            elif query.data == "two_days_ago":
                purchase_date = datetime.now() - timedelta(days=2)
            else:
                await query.edit_message_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∏–∑ –∫–Ω–æ–ø–æ–∫.")
                return WAITING_DATE

            product_name = context.user_data['current_product']
            success = await self.db.add_product(query.from_user.id, product_name, purchase_date)

            if success:
                shelf_life = PRODUCTS_DATA[product_name]['shelf_life']
                expiration_date = purchase_date + timedelta(days=shelf_life)
                days_left = (expiration_date.date() - datetime.now().date()).days

                message = f"‚úÖ **{product_name}** –¥–æ–±–∞–≤–ª–µ–Ω!\n"
                message += f"üìÖ –°—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏: {expiration_date.strftime('%d.%m.%Y')}\n"
                message += f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {days_left}"

                await query.edit_message_text(message)

                # –ß–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
                await asyncio.sleep(2)
                await self.show_main_menu(update, context)

                return ConversationHandler.END
            else:
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞.")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞: {e}")
            await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return WAITING_DATE

        return ConversationHandler.END

    async def button_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        await query.answer()

        if query.data == "add_product":
            return await self.add_product_start(update, context)
        elif query.data == "list_products":
            await self.list_products(update, context)
            return ConversationHandler.END
        elif query.data == "clear_products":
            await self.clear_products(update, context)
            return ConversationHandler.END
        elif query.data == "back_to_menu":
            await self.show_main_menu(update, context)
            return ConversationHandler.END
        elif query.data.startswith("product_"):
            return await self.handle_product_selection(update, context)
        elif query.data in ["today", "yesterday", "two_days_ago", "cancel", "back_to_product"]:
            return await self.handle_date_selection(update, context)
        else:
            await query.edit_message_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")
            return ConversationHandler.END

    async def _edit_or_reply(self, update: Update, text: str, reply_markup=None) -> None:
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            if update.callback_query:
                await update.callback_query.edit_message_text(text, reply_markup=reply_markup)
            else:
                await update.message.reply_text(text, reply_markup=reply_markup)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
            if update.callback_query:
                await update.callback_query.message.reply_text(text, reply_markup=reply_markup)
            else:
                await update.message.reply_text(text, reply_markup=reply_markup)

    async def check_expiring_products(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å –∏—Å—Ç–µ–∫–∞—é—â–∏–º —Å—Ä–æ–∫–æ–º ‚Äî –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        try:
            expiring_products = await self.db.get_expiring_products()

            for user_id, username, product_name, expiration_date in expiring_products:
                try:
                    message = f"‚ö†Ô∏è –¢–≤–æ–π **{product_name}** –∏—Å–ø–æ—Ä—Ç–∏—Ç—Å—è –∑–∞–≤—Ç—Ä–∞!\n"

                    category = PRODUCTS_DATA[product_name]['category']
                    if category == "–º–æ–ª–æ—á–Ω—ã–µ":
                        message += "üç≥ –ü–æ–ø—Ä–æ–±—É–π –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å —Å—ã—Ä–Ω–∏–∫–∏ –∏–ª–∏ –º–æ–ª–æ—á–Ω—ã–π –∫–æ–∫—Ç–µ–π–ª—å!"
                    elif category == "–º—è—Å–æ":
                        message += "üçñ –ü–æ–ø—Ä–æ–±—É–π –∂–∞—Ä–∫–æ–µ –∏–ª–∏ –≥—É–ª—è—à!"
                    elif category == "—Ä—ã–±–∞":
                        message += "üêü –ü–æ–ø—Ä–æ–±—É–π –∑–∞–ø–µ—á—ë–Ω–Ω—É—é —Ä—ã–±—É —Å –æ–≤–æ—â–∞–º–∏!"
                    elif category == "—Ö–ª–µ–±":
                        message += "üçû –°–¥–µ–ª–∞–π –≥—Ä–µ–Ω–∫–∏ –∏–ª–∏ —Å—É—Ö–∞—Ä–∏–∫–∏!"
                    elif category == "—Ñ—Ä—É–∫—Ç—ã":
                        message += "ü•ó –°–¥–µ–ª–∞–π —Ñ—Ä—É–∫—Ç–æ–≤—ã–π —Å–∞–ª–∞—Ç!"
                    elif category == "–æ–≤–æ—â–∏":
                        message += "üç≤ –ü—Ä–∏–≥–æ—Ç–æ–≤—å —Å—É–ø –∏–ª–∏ —Ä–∞–≥—É!"
                    else:
                        message += "ü•° –ò—Å–ø–æ–ª—å–∑—É–π –µ–≥–æ —Å–µ–≥–æ–¥–Ω—è!"

                    await self.application.bot.send_message(chat_id=user_id, text=message)
                    await self.db.mark_as_notified(user_id, product_name)

                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {e}")

    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ ‚Äî —Ç–æ–ª—å–∫–æ –∏–Ω–ª–∞–π–Ω, –±–µ–∑ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö fallback"""
        conv_handler = ConversationHandler(
            entry_points=[
                CommandHandler("start", self.start),
                CallbackQueryHandler(self.button_handler)
            ],
            states={
                WAITING_PRODUCT: [
                    CallbackQueryHandler(self.button_handler, pattern=r"^product_.*$|^cancel$"),
                ],
                WAITING_DATE: [
                    CallbackQueryHandler(self.button_handler, pattern=r"^(today|yesterday|two_days_ago|back_to_product|cancel)$"),
                ]
            },
            fallbacks=[
                CallbackQueryHandler(self.button_handler, pattern=r"^cancel$"),
            ],
            per_message=False,
            allow_reentry=True
        )

        self.application.add_handler(conv_handler)

    def setup_scheduler(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        self.scheduler.add_job(
            self.check_expiring_products,
            trigger=CronTrigger(hour=10, minute=0),
            id='daily_check'
        )

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        self.application = Application.builder().token(self.token).build()
        self.setup_handlers()
        self.setup_scheduler()
        self.scheduler.start()
        logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        self.application.run_polling()


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    BOT_TOKEN = os.environ.get('TELEGRAM_BOT_TOKEN')

    if not BOT_TOKEN:
        logger.error("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é TELEGRAM_BOT_TOKEN")
        return

    bot = FreshlyBot(BOT_TOKEN)
    bot.run()


if __name__ == '__main__':
    main()
