import logging
import sqlite3
import os
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
from apscheduler.schedulers.background import BackgroundScheduler
from apscheduler.jobstores.base import JobLookupError
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# üîê –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è (–±–µ–∑–æ–ø–∞—Å–Ω–æ!)
TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
if not TOKEN:
    logger.error("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ TELEGRAM_BOT_TOKEN –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —Ö–æ—Å—Ç–∏–Ω–≥–∞.")
    exit(1)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
scheduler = BackgroundScheduler()
scheduler.start()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('products.db')
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS products (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            name TEXT NOT NULL,
            purchase_date TEXT NOT NULL,
            expiration_days INTEGER NOT NULL,
            added_at TEXT NOT NULL
        )
    ''')
    conn.commit()
    conn.close()

init_db()

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤
def load_recipes():
    try:
        with open('recipes.json', 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        logger.warning("–§–∞–π–ª recipes.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return []

RECIPES = load_recipes()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî Freshly Bot ü§ñ\n"
        "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞—Ç—å –µ–¥—É ‚Äî –∏ –Ω–∏–∫—Ç–æ –Ω–µ —É–∑–Ω–∞–µ—Ç, —á—Ç–æ —É —Ç–µ–±—è –≤ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–µ.\n\n"
        "üì∏ –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ –ø—Ä–æ–¥—É–∫—Ç–∞ ‚Äî –∏ —è —Å–∫–∞–∂—É, –∫–æ–≥–¥–∞ –æ–Ω –∏—Å–ø–æ—Ä—Ç–∏—Ç—Å—è.\n"
        "üìã –ö–æ–º–∞–Ω–¥—ã:\n"
        "/list ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã\n"
        "/clear ‚Äî —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã"
    )

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    photo_file = await update.message.photo[-1].get_file()
    photo_path = f"photo_{user_id}.jpg"
    await photo_file.download_to_drive(photo_path)

    # üîç –ó–∞–≥–ª—É—à–∫–∞ ‚Äî —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞
    product_name = "–ú–æ–ª–æ–∫–æ"

    # üìÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–¥—É–∫—Ç
    conn = sqlite3.connect('products.db')
    cursor = conn.cursor()
    purchase_date = datetime.now().strftime('%Y-%m-%d')
    expiration_days = 7
    added_at = datetime.now().isoformat()

    cursor.execute('''
        INSERT INTO products (user_id, name, purchase_date, expiration_days, added_at)
        VALUES (?, ?, ?, ?, ?)
    ''', (user_id, product_name, purchase_date, expiration_days, added_at))
    product_id = cursor.lastrowid
    conn.commit()
    conn.close()

    # ‚è∞ –ü–ª–∞–Ω–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    notify_time = datetime.now() + timedelta(days=expiration_days - 1)
    job_id = f"notify_{product_id}"
    scheduler.add_job(
        send_notification,
        'date',
        run_date=notify_time,
        args=[context.bot, user_id, product_name],
        id=job_id
    )

    await update.message.reply_text(
        f"‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–ª: *{product_name}*\n"
        f"üìÖ –ö—É–ø–ª–µ–Ω–æ: {purchase_date}\n"
        f"‚è≥ –ò—Å—Ç–µ–∫–∞–µ—Ç: —á–µ—Ä–µ–∑ {expiration_days} –¥–Ω–µ–π\n"
        "üîî –ù–∞–ø–æ–º–Ω—é –∑–∞ 1 –¥–µ–Ω—å!",
        parse_mode='Markdown'
    )

async def send_notification(bot, user_id, product_name):
    try:
        await bot.send_message(
            chat_id=user_id,
            text=f"‚ö†Ô∏è *{product_name}* –∏—Å–ø–æ—Ä—Ç–∏—Ç—Å—è –∑–∞–≤—Ç—Ä–∞!\n"
                 "–ü–æ–ø—Ä–æ–±—É–π —Å–¥–µ–ª–∞—Ç—å —Ç–≤–æ—Ä–æ–≥? ü•õ",
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–†–µ—Ü–µ–ø—Ç", callback_data=f"recipe_{product_name}")],
                [InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="ignore")]
            ])
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data.startswith("recipe_"):
        product_name = query.data.split("_", 1)[1]
        recipe = next((r for r in RECIPES if r['name'] == product_name), None)
        if recipe:
            steps = "\n".join(f"{i+1}. {step}" for i, step in enumerate(recipe['steps']))
            await query.edit_message_text(
                f"üë©‚Äçüç≥ *{recipe['name']}*\n"
                f"‚è±Ô∏è –í—Ä–µ–º—è: {recipe['time_minutes']} –º–∏–Ω\n"
                f"üçΩÔ∏è –ü–æ—Ä—Ü–∏–π: {recipe['servings']}\n\n"
                f"*–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:*\n{', '.join(recipe['ingredients'])}\n\n"
                f"*–®–∞–≥–∏:*\n{steps}",
                parse_mode='Markdown'
            )
        else:
            await query.edit_message_text("–†–µ—Ü–µ–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω üòî")

    elif query.data == "ignore":
        await query.edit_message_text("–•–æ—Ä–æ—à–æ, –Ω–∞–ø–æ–º–Ω—é –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ üòâ")

async def list_products(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    conn = sqlite3.connect('products.db')
    cursor = conn.cursor()
    cursor.execute('SELECT name, purchase_date, expiration_days, added_at FROM products WHERE user_id = ?', (user_id,))
    products = cursor.fetchall()
    conn.close()

    if not products:
        await update.message.reply_text("üì¶ –ü–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤. –û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ ‚Äî –∏ —è –¥–æ–±–∞–≤–ª—é!")
        return

    text = "üìã *–¢–≤–æ–∏ –ø—Ä–æ–¥—É–∫—Ç—ã:*\n\n"
    for name, purchase_date, exp_days, added_at in products:
        expires_at = datetime.strptime(purchase_date, '%Y-%m-%d') + timedelta(days=exp_days)
        days_left = (expires_at - datetime.now()).days
        if days_left <= 0:
            status = "üî¥ –ò—Å—Ç–µ–∫–∞–µ—Ç —Å–µ–≥–æ–¥–Ω—è!"
        elif days_left == 1:
            status = "üü† –ò—Å—Ç–µ–∫–∞–µ—Ç –∑–∞–≤—Ç—Ä–∞"
        elif days_left <= 3:
            status = f"üü° –ò—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ {days_left} –¥–Ω—è"
        else:
            status = f"üü¢ –ï—â—ë {days_left} –¥–Ω–µ–π"
        text += f"‚Ä¢ *{name}* ‚Äî {status}\n"

    await update.message.reply_text(text, parse_mode='Markdown')

async def clear_products(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    conn = sqlite3.connect('products.db')
    cursor = conn.cursor()
    cursor.execute('DELETE FROM products WHERE user_id = ?', (user_id,))
    conn.commit()
    conn.close()

    # üóëÔ∏è –£–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    for job in scheduler.get_jobs():
        if job.id.startswith(f"notify_") and str(user_id) in str(job.args):
            try:
                scheduler.remove_job(job.id)
            except JobLookupError:
                pass

    await update.message.reply_text("üóëÔ∏è –í—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã —É–¥–∞–ª–µ–Ω—ã!")

def main():
    application = Application.builder().token(TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("list", list_products))
    application.add_handler(CommandHandler("clear", clear_products))
    application.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    application.add_handler(CallbackQueryHandler(button_handler))

    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()

if __name__ == '__main__':
    main()
