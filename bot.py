import os
import logging
import sqlite3
import asyncio
import re
import signal
import sys
from datetime import datetime, timedelta
from contextlib import contextmanager
from functools import lru_cache

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler, MessageHandler,
    ContextTypes, ConversationHandler, filters
)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è
WAITING_PRODUCT, WAITING_DATE, WAITING_CUSTOM_DATE = range(3)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
class Config:
    MAX_PRODUCTS = 5
    NOTIFICATION_HOUR = 10
    NOTIFICATION_MINUTE = 0

# –ë–∞–∑–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
PRODUCTS_DATA = {
    "–º–æ–ª–æ–∫–æ": {"shelf_life": 7, "category": "–º–æ–ª–æ—á–Ω—ã–µ"},
    "–∫–µ—Ñ–∏—Ä": {"shelf_life": 5, "category": "–º–æ–ª–æ—á–Ω—ã–µ"},
    "—Å—ã—Ä": {"shelf_life": 14, "category": "–º–æ–ª–æ—á–Ω—ã–µ"},
    "—Ç–≤–æ—Ä–æ–≥": {"shelf_life": 5, "category": "–º–æ–ª–æ—á–Ω—ã–µ"},
    "—Å–º–µ—Ç–∞–Ω–∞": {"shelf_life": 7, "category": "–º–æ–ª–æ—á–Ω—ã–µ"},
    "–π–æ–≥—É—Ä—Ç": {"shelf_life": 10, "category": "–º–æ–ª–æ—á–Ω—ã–µ"},
    "—è–π—Ü–∞": {"shelf_life": 30, "category": "—è–π—Ü–∞"},
    "–∫—É—Ä–∏—Ü–∞": {"shelf_life": 3, "category": "–º—è—Å–æ"},
    "–≥–æ–≤—è–¥–∏–Ω–∞": {"shelf_life": 4, "category": "–º—è—Å–æ"},
    "—Ä—ã–±–∞": {"shelf_life": 2, "category": "—Ä—ã–±–∞"},
    "—Ö–ª–µ–±": {"shelf_life": 5, "category": "—Ö–ª–µ–±"},
    "–ø–∞—Å—Ç–∞": {"shelf_life": 60, "category": "–º–∞–∫–∞—Ä–æ–Ω—ã"},
    "—Ä–∏—Å": {"shelf_life": 90, "category": "–∑–ª–∞–∫–∏"},
}

class Database:
    def __init__(self):
        self.init_db()

    @contextmanager
    def get_connection(self):
        conn = sqlite3.connect('products.db', check_same_thread=False)
        conn.row_factory = sqlite3.Row
        try:
            yield conn
        finally:
            conn.close()

    def init_db(self):
        with self.get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS products (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER,
                    product_name TEXT,
                    purchase_date DATE,
                    expiration_date DATE,
                    notified BOOLEAN DEFAULT FALSE
                )
            ''')
            conn.commit()

    async def add_product(self, user_id: int, product_name: str, purchase_date: datetime) -> bool:
        if product_name not in PRODUCTS_DATA:
            return False

        shelf_life = PRODUCTS_DATA[product_name]['shelf_life']
        expiration_date = purchase_date + timedelta(days=shelf_life)

        with self.get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute('''
                INSERT INTO products (user_id, product_name, purchase_date, expiration_date)
                VALUES (?, ?, ?, ?)
            ''', (user_id, product_name, purchase_date.date(), expiration_date.date()))
            conn.commit()
        return True

    async def get_user_products(self, user_id: int):
        with self.get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute('''
                SELECT product_name, purchase_date, expiration_date
                FROM products WHERE user_id = ?
                ORDER BY expiration_date
            ''', (user_id,))
            return cursor.fetchall()

    async def get_products_count(self, user_id: int) -> int:
        with self.get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT COUNT(*) FROM products WHERE user_id = ?', (user_id,))
            result = cursor.fetchone()
            return result[0] if result else 0

    async def clear_user_products(self, user_id: int):
        with self.get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute('DELETE FROM products WHERE user_id = ?', (user_id,))
            conn.commit()

class FreshlyBot:
    def __init__(self, token: str):
        self.token = token
        self.db = Database()
        self.application = None

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.effective_user
        
        welcome_text = (
            f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø Freshly Bot\n\n"
            "üìå –ß—Ç–æ —è —É–º–µ—é:\n"
            "‚Ä¢ –î–æ–±–∞–≤–ª—è—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã —Å –¥–∞—Ç–æ–π –ø–æ–∫—É–ø–∫–∏\n"
            "‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å—Ä–æ–∫–∏ –≥–æ–¥–Ω–æ—Å—Ç–∏\n"
            "‚Ä¢ –£–≤–µ–¥–æ–º–ª—è—Ç—å –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ —Å—Ä–æ–∫–∞\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        
        keyboard = [
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç", callback_data="add_product")],
            [InlineKeyboardButton("üìã –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫", callback_data="list_products")],
            [InlineKeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å—ë", callback_data="clear_products")],
            [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if update.message:
            await update.message.reply_text(welcome_text, reply_markup=reply_markup)
        else:
            await update.callback_query.edit_message_text(welcome_text, reply_markup=reply_markup)

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        help_text = (
            "üìñ –ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:\n\n"
            "/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
            "/list - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤\n"
            "/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
            "–ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏!"
        )
        
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if update.message:
            await update.message.reply_text(help_text, reply_markup=reply_markup)
        else:
            await update.callback_query.edit_message_text(help_text, reply_markup=reply_markup)

    async def list_products(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.effective_user
        products = await self.db.get_user_products(user.id)

        if not products:
            text = "üì≠ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤."
        else:
            text = "üìã –í–∞—à–∏ –ø—Ä–æ–¥—É–∫—Ç—ã:\n\n"
            today = datetime.now().date()
            
            for product_name, purchase_date, expiration_date in products:
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–∏ –≤ –¥–∞—Ç—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                if isinstance(purchase_date, str):
                    purchase_date = datetime.strptime(purchase_date, "%Y-%m-%d").date()
                if isinstance(expiration_date, str):
                    expiration_date = datetime.strptime(expiration_date, "%Y-%m-%d").date()
                
                days_left = (expiration_date - today).days
                
                if days_left < 0:
                    status = "üî¥ –ü–†–û–°–†–û–ß–ï–ù–û"
                elif days_left == 0:
                    status = "üî¥ –ò—Å—Ç–µ–∫–∞–µ—Ç —Å–µ–≥–æ–¥–Ω—è"
                elif days_left <= 3:
                    status = f"üü° –ò—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ {days_left} –¥–Ω—è"
                else:
                    status = f"üü¢ –û—Å—Ç–∞–ª–æ—Å—å {days_left} –¥–Ω–µ–π"
                
                text += f"**{product_name}**\n"
                text += f"üìÖ –ö—É–ø–ª–µ–Ω: {purchase_date.strftime('%d.%m.%Y')}\n"
                text += f"‚è≥ {status}\n\n"

        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        if hasattr(update, 'callback_query') and update.callback_query:
            await update.callback_query.edit_message_text(text, reply_markup=reply_markup, parse_mode="Markdown")
        else:
            await update.message.reply_text(text, reply_markup=reply_markup, parse_mode="Markdown")

    async def clear_products(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.effective_user
        await self.db.clear_user_products(user.id)
        
        if hasattr(update, 'callback_query') and update.callback_query:
            await update.callback_query.edit_message_text("‚úÖ –í—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã —É–¥–∞–ª–µ–Ω—ã!")
        else:
            await update.message.reply_text("‚úÖ –í—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã —É–¥–∞–ª–µ–Ω—ã!")
        
        await asyncio.sleep(1)
        await self.start(update, context)

    async def add_product_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.effective_user
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞
        if await self.db.get_products_count(user.id) >= Config.MAX_PRODUCTS:
            await self._edit_or_reply(update, f"‚ùå –õ–∏–º–∏—Ç {Config.MAX_PRODUCTS} –ø—Ä–æ–¥—É–∫—Ç–æ–≤. –û—á–∏—Å—Ç–∏—Ç–µ —Å–ø–∏—Å–æ–∫.")
            await asyncio.sleep(2)
            await self.start(update, context)
            return ConversationHandler.END

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏
        keyboard = []
        products = list(PRODUCTS_DATA.keys())
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ 2 –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ —Ä—è–¥
        for i in range(0, len(products), 2):
            row = []
            for j in range(2):
                if i + j < len(products):
                    product = products[i + j]
                    row.append(InlineKeyboardButton(product.capitalize(), callback_data=f"product_{product}"))
            if row:
                keyboard.append(row)
        
        keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await self._edit_or_reply(update, "üì¶ –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç:", reply_markup)
        return WAITING_PRODUCT

    async def handle_product_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()
        
        if query.data.startswith("product_"):
            product_name = query.data[8:]
            context.user_data['current_product'] = product_name
            
            # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
            keyboard = [
                [InlineKeyboardButton("üìÖ –°–µ–≥–æ–¥–Ω—è", callback_data="today")],
                [InlineKeyboardButton("‚è™ –í—á–µ—Ä–∞", callback_data="yesterday")],
                [InlineKeyboardButton("üìÖ –í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É", callback_data="custom_date")],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            shelf_life = PRODUCTS_DATA[product_name]['shelf_life']
            await query.edit_message_text(
                f"üì¶ –ü—Ä–æ–¥—É–∫—Ç: **{product_name}**\n"
                f"‚è≥ –°—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏: {shelf_life} –¥–Ω–µ–π\n"
                f"üìÜ –ö–æ–≥–¥–∞ –≤—ã –µ–≥–æ –∫—É–ø–∏–ª–∏?",
                reply_markup=reply_markup,
                parse_mode="Markdown"
            )
            return WAITING_DATE
        
        elif query.data == "cancel":
            await query.edit_message_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
            await asyncio.sleep(1)
            await self.start(update, context)
            return ConversationHandler.END
        
        return WAITING_PRODUCT

    async def handle_date_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()
        
        product_name = context.user_data.get('current_product')
        if not product_name:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –ø—Ä–æ–¥—É–∫—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω.")
            return ConversationHandler.END

        if query.data == "today":
            purchase_date = datetime.now()
        elif query.data == "yesterday":
            purchase_date = datetime.now() - timedelta(days=1)
        elif query.data == "custom_date":
            await query.edit_message_text("üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä: 25.12.2024)")
            return WAITING_CUSTOM_DATE
        elif query.data == "cancel":
            await query.edit_message_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
            await asyncio.sleep(1)
            await self.start(update, context)
            return ConversationHandler.END
        else:
            return WAITING_DATE

        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–¥—É–∫—Ç
        success = await self.db.add_product(query.from_user.id, product_name, purchase_date)
        if success:
            shelf_life = PRODUCTS_DATA[product_name]['shelf_life']
            expiration_date = purchase_date + timedelta(days=shelf_life)
            days_left = (expiration_date.date() - datetime.now().date()).days
            
            msg = (f"‚úÖ **{product_name}** –¥–æ–±–∞–≤–ª–µ–Ω!\n"
                  f"üìÖ –°—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏: {expiration_date.strftime('%d.%m.%Y')}\n"
                  f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {days_left}")
        else:
            msg = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞."

        await query.edit_message_text(msg, parse_mode="Markdown")
        await asyncio.sleep(2)
        await self.start(update, context)
        return ConversationHandler.END

    async def handle_custom_date(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            date_str = update.message.text.strip()
            
            if not re.match(r'^\d{1,2}\.\d{1,2}\.\d{4}$', date_str):
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")
                return WAITING_CUSTOM_DATE
            
            purchase_date = datetime.strptime(date_str, "%d.%m.%Y")
            
            if purchase_date.date() > datetime.now().date():
                await update.message.reply_text("‚ùå –î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º!")
                return WAITING_CUSTOM_DATE
            
            product_name = context.user_data.get('current_product')
            if not product_name:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –ø—Ä–æ–¥—É–∫—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω.")
                return ConversationHandler.END
            
            success = await self.db.add_product(update.effective_user.id, product_name, purchase_date)
            if success:
                shelf_life = PRODUCTS_DATA[product_name]['shelf_life']
                expiration_date = purchase_date + timedelta(days=shelf_life)
                days_left = (expiration_date.date() - datetime.now().date()).days
                
                msg = (f"‚úÖ **{product_name}** –¥–æ–±–∞–≤–ª–µ–Ω!\n"
                      f"üìÖ –°—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏: {expiration_date.strftime('%d.%m.%Y')}\n"
                      f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {days_left}")
            else:
                msg = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞."
            
            await update.message.reply_text(msg, parse_mode="Markdown")
            await asyncio.sleep(2)
            await self.start(update, context)
            
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞.")
            return WAITING_CUSTOM_DATE
        
        return ConversationHandler.END

    async def button_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()

        if query.data == "back_to_menu":
            await self.start(update, context)
        elif query.data == "list_products":
            await self.list_products(update, context)
        elif query.data == "help":
            await self.help_command(update, context)
        elif query.data == "clear_products":
            await self.clear_products(update, context)
        elif query.data == "add_product":
            return await self.add_product_start(update, context)
        elif query.data == "cancel":
            await query.edit_message_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
            await asyncio.sleep(1)
            await self.start(update, context)

    async def _edit_or_reply(self, update: Update, text: str, reply_markup=None):
        try:
            if hasattr(update, 'callback_query') and update.callback_query:
                await update.callback_query.edit_message_text(text, reply_markup=reply_markup)
            else:
                await update.message.reply_text(text, reply_markup=reply_markup)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å: {e}")

    def setup_handlers(self):
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        self.application.add_handler(CommandHandler("start", self.start))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("list", self.list_products))
        self.application.add_handler(CommandHandler("clear", self.clear_products))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        self.application.add_handler(CallbackQueryHandler(
            self.button_handler, 
            pattern=r"^(back_to_menu|list_products|help|clear_products|add_product)$"
        ))
        
        # Conversation handler –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        conv_handler = ConversationHandler(
            entry_points=[
                CallbackQueryHandler(self.button_handler, pattern="^add_product$")
            ],
            states={
                WAITING_PRODUCT: [
                    CallbackQueryHandler(self.handle_product_selection, pattern=r"^(product_.+|cancel)$")
                ],
                WAITING_DATE: [
                    CallbackQueryHandler(self.handle_date_selection, pattern=r"^(today|yesterday|custom_date|cancel)$")
                ],
                WAITING_CUSTOM_DATE: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_custom_date)
                ]
            },
            fallbacks=[
                CommandHandler("start", self.start),
                CallbackQueryHandler(self.button_handler, pattern="^cancel$")
            ]
        )
        self.application.add_handler(conv_handler)

    def run(self):
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
        if os.name == 'posix':
            os.system('pkill -f "python.*bot" 2>/dev/null')
        
        self.application = Application.builder().token(self.token).build()
        self.setup_handlers()
        
        logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        
        try:
            self.application.run_polling(
                drop_pending_updates=True,
                allowed_updates=Update.ALL_TYPES
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")

def main():
    BOT_TOKEN = os.environ.get('TELEGRAM_BOT_TOKEN')
    if not BOT_TOKEN:
        logger.error("‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é TELEGRAM_BOT_TOKEN")
        return
    
    # –ó–∞–≤–µ—Ä—à–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
    if os.name == 'posix':
        os.system('pkill -f python 2>/dev/null')
        os.system('pkill -f bot.py 2>/dev/null')
    
    bot = FreshlyBot(BOT_TOKEN)
    bot.run()

if __name__ == '__main__':
    main()
