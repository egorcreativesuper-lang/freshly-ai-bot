import logging
import sqlite3
import os
import random
from datetime import datetime, timedelta, time
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, MessageHandler, ContextTypes, filters, ConversationHandler
)
import json

# üîë –í–°–¢–†–û–ï–ù–ù–´–ô –¢–û–ö–ï–ù
TOKEN = "8123646923:AAERiVrcFss2IubX3SMUJI12c9qHbX2KRgA"

# –°–æ—Å—Ç–æ—è–Ω–∏—è
(
    PHOTO_RECOGNITION,
    CHOOSING_PRODUCT_NAME,
    CHOOSING_PURCHASE_DATE,
    CHOOSING_EXPIRATION_DATE
) = range(4)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# ======================
# –ë–ê–ó–ê –î–ê–ù–ù–´–•
# ======================

def init_db():
    try:
        with sqlite3.connect('products.db') as conn:
            cursor = conn.cursor()
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS products (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER NOT NULL,
                    name TEXT NOT NULL,
                    purchase_date TEXT NOT NULL,
                    expiration_days INTEGER NOT NULL,
                    added_at TEXT NOT NULL,
                    expires_at TEXT NOT NULL,
                    notified BOOLEAN DEFAULT FALSE
                )
            ''')
            conn.commit()
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ë–î: {e}")
        exit(1)

# ======================
# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
# ======================

def parse_date(date_str: str):
    formats = ['%Y-%m-%d', '%Y.%m.%d', '%d.%m.%Y', '%d-%m-%Y']
    for fmt in formats:
        try:
            return datetime.strptime(date_str, fmt).date()
        except ValueError:
            continue
    return None

def get_main_menu_keyboard():
    keyboard = [
        ["üì∏ –î–æ–±–∞–≤–∏—Ç—å –ø–æ —Ñ–æ—Ç–æ", "‚úçÔ∏è –î–æ–±–∞–≤–∏—Ç—å –≤—Ä—É—á–Ω—É—é"],
        ["üìã –ú–æ–∏ –ø—Ä–æ–¥—É–∫—Ç—ã", "üö® –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ"],
        ["üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üë®‚Äçüç≥ –†–µ—Ü–µ–ø—Ç—ã"],
        ["üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å—ë", "‚ÑπÔ∏è –ü–æ–º–æ—â—å"]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)

def get_cancel_keyboard():
    return ReplyKeyboardMarkup([["‚ùå –û—Ç–º–µ–Ω–∞", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]], resize_keyboard=True, one_time_keyboard=True)

# ======================
# –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –° –†–ê–ó–ù–´–ú –¢–ï–ö–°–¢–û–ú
# ======================

EXPIRATION_MESSAGES = [
    "‚ö†Ô∏è –≠–π! –¢–≤–æ–π {product} –∏—Å–ø–æ—Ä—Ç–∏—Ç—Å—è –∑–∞–≤—Ç—Ä–∞! –ù–µ –∑–∞–±—É–¥—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ!",
    "üçÖ –°—Ä–æ—á–Ω–æ! {product} –∂–¥—ë—Ç —Å–≤–æ–µ–≥–æ —á–∞—Å–∞ –Ω–∞ –∫—É—Ö–Ω–µ ‚Äî –∑–∞–≤—Ç—Ä–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å!",
    "‚è∞ –í–Ω–∏–º–∞–Ω–∏–µ! –ó–∞–≤—Ç—Ä–∞ {product} —Å—Ç–∞–Ω–µ—Ç –Ω–µ–ø—Ä–∏–≥–æ–¥–Ω—ã–º. –°–∞–º–æ–µ –≤—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å —á—Ç–æ-—Ç–æ –≤–∫—É—Å–Ω–æ–µ!",
    "ü•¨ –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –ù–∞–ø–æ–º–∏–Ω–∞—é: –∑–∞–≤—Ç—Ä–∞ {product} –∏—Å–ø–æ—Ä—Ç–∏—Ç—Å—è. –î–∞–≤–∞–π —Å–ø–∞—Å—ë–º –µ–¥—É –≤–º–µ—Å—Ç–µ!",
    "üîî –î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä! –£ —Ç–µ–±—è –µ—Å—Ç—å –µ—â—ë –æ–¥–∏–Ω –¥–µ–Ω—å, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å {product}. –ù–µ —É–ø—É—Å—Ç–∏ —à–∞–Ω—Å!"
]

PREMIUM_MESSAGES = [
    "‚è≥ –ü—Ä–∏–≤–µ—Ç! –¢–≤–æ–π {product} –∏—Å–ø–æ—Ä—Ç–∏—Ç—Å—è —á–µ—Ä–µ–∑ {days} –¥–Ω–µ–π. –ú–æ–∂–µ—Ç, –Ω–∞—á–Ω—ë—à—å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —É–∂–∏–Ω?",
    "üìÖ –ù–∞–ø–æ–º–∏–Ω–∞—é: —É —Ç–µ–±—è –µ—Å—Ç—å {days} –¥–Ω–µ–π –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å—Ä–æ–∫–∞ —É {product}. –í—Ä–µ–º—è –ø—Ä–æ—è–≤–∏—Ç—å –∫—É–ª–∏–Ω–∞—Ä–Ω—ã–µ —Ç–∞–ª–∞–Ω—Ç—ã!",
    "üõí –°–æ–≤–µ—Ç: —á–µ—Ä–µ–∑ {days} –¥–Ω–µ–π –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è —Å—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏ —É {product}. –ü–æ–¥—É–º–∞–π –æ —Ä–µ—Ü–µ–ø—Ç–µ –∑–∞—Ä–∞–Ω–µ–µ!",
    "üåø –ó–∞–±–æ—Ç–∞ –æ –ø–ª–∞–Ω–µ—Ç–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å —Ç–µ–±—è! –ß–µ—Ä–µ–∑ {days} –¥–Ω–µ–π {product} –∏—Å–ø–æ—Ä—Ç–∏—Ç—Å—è. –î–∞–≤–∞–π –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ —Å —É–º–æ–º!",
    "üí° –ò–¥–µ—è –¥–Ω—è: —á–µ—Ä–µ–∑ {days} –¥–Ω–µ–π {product} –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –≤—ã–±—Ä–æ—Å–∏—Ç—å. –ê —á—Ç–æ –µ—Å–ª–∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å –∏–∑ –Ω–µ–≥–æ —á—Ç–æ-—Ç–æ –≤–∫—É—Å–Ω–æ–µ —É–∂–µ —Å–µ–≥–æ–¥–Ω—è?"
]

async def send_notification_job(context: ContextTypes.DEFAULT_TYPE):
    job = context.job
    user_id = job.data["user_id"]
    product_name = job.data["product_name"]
    days_left = job.data.get("days_left", 1)

    try:
        if days_left == 1:
            message_template = random.choice(EXPIRATION_MESSAGES)
            text = message_template.format(product=product_name)
        else:
            message_template = random.choice(PREMIUM_MESSAGES)
            text = message_template.format(product=product_name, days=days_left)

        await context.bot.send_message(chat_id=user_id, text=text)
        logger.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {text}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

async def check_expired_daily(context: ContextTypes.DEFAULT_TYPE):
    try:
        today = datetime.now().date().isoformat()
        with sqlite3.connect('products.db') as conn:
            cursor = conn.cursor()
            cursor.execute('''
                SELECT user_id, name, expires_at FROM products 
                WHERE expires_at <= ? AND notified = FALSE
            ''', (today,))
            expired = cursor.fetchall()

            for user_id, name, expires_at in expired:
                try:
                    await context.bot.send_message(
                        chat_id=user_id,
                        text=f"üö® *–ü–†–û–°–†–û–ß–ï–ù–û:* {name} (—Å—Ä–æ–∫ –∏—Å—Ç—ë–∫ {expires_at})\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±—Ä–æ—Å—å—Ç–µ –µ–≥–æ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å–æ –∑–¥–æ—Ä–æ–≤—å–µ–º!",
                        parse_mode='Markdown'
                    )
                    cursor.execute("UPDATE products SET notified = TRUE WHERE user_id = ? AND name = ?", (user_id, name))
                    conn.commit()
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ—Å—Ä–æ—á–∫–∏ {user_id}: {e}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ check_expired_daily: {e}")

def schedule_notifications(context: ContextTypes.DEFAULT_TYPE, user_id: int, product_name: str, expiration_days: int):
    today = datetime.now().date()
    expires_at = today + timedelta(days=expiration_days)

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ 1 –¥–µ–Ω—å ‚Üí –≤ 9:00 –∑–∞ –¥–µ–Ω—å –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è
    if expiration_days >= 1:
        notify_date_1d = expires_at - timedelta(days=1)
        notify_time_1d = datetime.combine(notify_date_1d, time(hour=9, minute=0))
        if notify_time_1d > datetime.now():
            context.job_queue.run_once(
                send_notification_job,
                when=notify_time_1d,
                data={"user_id": user_id, "product_name": product_name, "days_left": 1},
                name=f"notify_{user_id}_{product_name}_1d"
            )

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ 3 –¥–Ω—è
    if expiration_days > 3:
        notify_date_3d = expires_at - timedelta(days=3)
        notify_time_3d = datetime.combine(notify_date_3d, time(hour=9, minute=0))
        if notify_time_3d > datetime.now():
            context.job_queue.run_once(
                send_notification_job,
                when=notify_time_3d,
                data={"user_id": user_id, "product_name": product_name, "days_left": 3},
                name=f"notify_{user_id}_{product_name}_3d"
            )

def restore_scheduled_jobs(application: Application):
    """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–¥–∞—á–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ."""
    logger.info("üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...")
    today = datetime.now().date()

    with sqlite3.connect('products.db') as conn:
        cursor = conn.cursor()
        cursor.execute('''
            SELECT user_id, name, expiration_days, expires_at
            FROM products
            WHERE notified = FALSE AND expires_at >= ?
        ''', (today.isoformat(),))
        products = cursor.fetchall()

    restored_count = 0
    for user_id, name, expiration_days, expires_at in products:
        exp_date = datetime.strptime(expires_at, '%Y-%m-%d').date()
        days_until_expiry = (exp_date - today).days

        if days_until_expiry < 0:
            continue

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ 1 –¥–µ–Ω—å
        if days_until_expiry >= 1:
            notify_time_1d = datetime.combine(exp_date - timedelta(days=1), time(hour=9, minute=0))
            if notify_time_1d > datetime.now():
                application.job_queue.run_once(
                    send_notification_job,
                    when=notify_time_1d,
                    data={"user_id": user_id, "product_name": name, "days_left": 1},
                    name=f"notify_{user_id}_{name}_1d"
                )
                restored_count += 1

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ 3 –¥–Ω—è
        if days_until_expiry > 3:
            notify_time_3d = datetime.combine(exp_date - timedelta(days=3), time(hour=9, minute=0))
            if notify_time_3d > datetime.now():
                application.job_queue.run_once(
                    send_notification_job,
                    when=notify_time_3d,
                    data={"user_id": user_id, "product_name": name, "days_left": 3},
                    name=f"notify_{user_id}_{name}_3d"
                )
                restored_count += 1

    logger.info(f"‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {restored_count} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")

# ======================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò
# ======================

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    welcome_text = (
        "üåü *–ü—Ä–∏–≤–µ—Ç, –¥—Ä—É–≥! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Freshly Bot!*\n\n"
        "–Ø ‚Äî —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –±–æ—Ä—å–±–µ —Å –ø–∏—â–µ–≤—ã–º–∏ –æ—Ç—Ö–æ–¥–∞–º–∏ üåç\n\n"
        "‚ú® *–ß—Ç–æ —è —É–º–µ—é:*\n"
        "‚úÖ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å—Ä–æ–∫–∏ –≥–æ–¥–Ω–æ—Å—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤\n"
        "‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞—Ç—å –∑–∞ 3 –∏ –∑–∞ 1 –¥–µ–Ω—å –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å—Ä–æ–∫–∞\n"
        "‚úÖ –ü—Ä–µ–¥–ª–∞–≥–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–≤–æ–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤\n"
        "‚úÖ –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–≤–æ–∏—Ö —É—Å–ø–µ—Ö–æ–≤\n\n"
        "–í–º–µ—Å—Ç–µ –º—ã —Å–ø–∞—Å—ë–º –µ–¥—É, —Å—ç–∫–æ–Ω–æ–º–∏–º –¥–µ–Ω—å–≥–∏ –∏ –ø–æ–º–æ–∂–µ–º –ø–ª–∞–Ω–µ—Ç–µ! üíö\n\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ –∏ –Ω–∞—á–Ω–∏ —Å–≤–æ–π –ø—É—Ç—å –∫ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ–º—É –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—é!"
    )
    await update.message.reply_text(
        welcome_text,
        parse_mode='Markdown',
        reply_markup=get_main_menu_keyboard()
    )

# --- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–¥–ª—è –≤—Å–µ—Ö) ---
async def stats_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    with sqlite3.connect('products.db') as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT COUNT(*) FROM products WHERE user_id = ?", (user_id,))
        total = cursor.fetchone()[0]
        cursor.execute("SELECT COUNT(*) FROM products WHERE user_id = ? AND notified = TRUE AND expires_at > ?", (user_id, datetime.now().date().isoformat()))
        saved = cursor.fetchone()[0]
        cursor.execute("SELECT COUNT(*) FROM products WHERE user_id = ? AND expires_at >= ?", (user_id, datetime.now().date().isoformat()))
        active = cursor.fetchone()[0]

    text = (
        "üìä *–¢–≤–æ—è –ª–∏—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n\n"
        f"üì¶ –í—Å–µ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: *{total}*\n"
        f"‚úÖ –°–µ–π—á–∞—Å –≤ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–µ: *{active}*\n"
        f"üõ°Ô∏è –£—Å–ø–µ—à–Ω–æ —Å–ø–∞—Å–µ–Ω–æ –æ—Ç –ø—Ä–æ—Å—Ä–æ—á–∫–∏: *{saved}*\n\n"
        "–¢—ã –º–æ–ª–æ–¥–µ—Ü! –ö–∞–∂–¥—ã–π –ø—Ä–æ–¥—É–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ç—ã –Ω–µ –≤—ã–±—Ä–æ—Å–∏–ª ‚Äî —ç—Ç–æ –ø–æ–±–µ–¥–∞ –Ω–∞–¥ –ø–∏—â–µ–≤—ã–º–∏ –æ—Ç—Ö–æ–¥–∞–º–∏! üå±"
    )
    await update.message.reply_text(text, parse_mode='Markdown', reply_markup=get_main_menu_keyboard())

# --- –†–µ—Ü–µ–ø—Ç—ã (–¥–ª—è –≤—Å–µ—Ö) ---
def load_recipes():
    try:
        with open('recipes.json', 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        return [
            {"name": "–ü—Ä–æ—Å—Ç–æ–π –æ–º–ª–µ—Ç", "ingredients": ["–Ø–π—Ü–∞"], "steps": "–í–∑–±–µ–π 2 —è–π—Ü–∞, –¥–æ–±–∞–≤—å —Å–æ–ª—å –∏ –∂–∞—Ä—å –Ω–∞ —Å–∫–æ–≤–æ—Ä–æ–¥–µ 3-4 –º–∏–Ω—É—Ç—ã."},
            {"name": "–§—Ä—É–∫—Ç–æ–≤—ã–π –º–∏–∫—Å", "ingredients": ["–§—Ä—É–∫—Ç—ã"], "steps": "–ù–∞—Ä–µ–∂—å –ª—é–±–∏–º—ã–µ —Ñ—Ä—É–∫—Ç—ã –∏ –Ω–∞—Å–ª–∞–∂–¥–∞–π—Å—è —Å–≤–µ–∂–∏–º –¥–µ—Å–µ—Ä—Ç–æ–º!"},
            {"name": "–°—ã—Ä–Ω—ã–π —Å—ç–Ω–¥–≤–∏—á", "ingredients": ["–°—ã—Ä", "–•–ª–µ–±"], "steps": "–ü–æ–ª–æ–∂–∏ –ª–æ–º—Ç–∏–∫ —Å—ã—Ä–∞ –º–µ–∂–¥—É –¥–≤—É–º—è –∫—É—Å–æ—á–∫–∞–º–∏ —Ö–ª–µ–±–∞ –∏ –ø–æ–¥–∂–∞—Ä—å –Ω–∞ —Å–∫–æ–≤–æ—Ä–æ–¥–µ –¥–æ –∑–æ–ª–æ—Ç–∏—Å—Ç–æ–π –∫–æ—Ä–æ—á–∫–∏."}
        ]

RECIPES = load_recipes()

async def recipes_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    with sqlite3.connect('products.db') as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT name FROM products WHERE user_id = ? AND notified = FALSE", (user_id,))
        products = [row[0] for row in cursor.fetchall()]

    if not products:
        await update.message.reply_text(
            "üì¶ –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤.\n\n"
            "–î–æ–±–∞–≤—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø—Ä–æ–¥—É–∫—Ç —á–µ—Ä–µ–∑ 'üì∏ –î–æ–±–∞–≤–∏—Ç—å –ø–æ —Ñ–æ—Ç–æ' –∏–ª–∏ '‚úçÔ∏è –î–æ–±–∞–≤–∏—Ç—å –≤—Ä—É—á–Ω—É—é', –∏ —è –ø–æ–¥—Å–∫–∞–∂—É, —á—Ç–æ –∏–∑ –Ω–µ–≥–æ –º–æ–∂–Ω–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å! üë®‚Äçüç≥",
            reply_markup=get_main_menu_keyboard()
        )
        return

    suitable_recipes = []
    for recipe in RECIPES:
        if any(ing.lower() in p.lower() for p in products for ing in recipe.get("ingredients", [])):
            suitable_recipes.append(recipe)

    if not suitable_recipes:
        suitable_recipes = RECIPES[:2]

    text = "üë®‚Äçüç≥ *–†–µ—Ü–µ–ø—Ç—ã —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ–±—è:*\n\n"
    for r in suitable_recipes[:2]:
        text += f"üîπ *{r['name']}*\n–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã: {', '.join(r.get('ingredients', []))}\n{r.get('steps', '')}\n\n"

    text += "–ì–æ—Ç–æ–≤—å —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º –∏ –Ω–µ –∑–∞–±—ã–≤–∞–π –¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º–∏ –∫—É–ª–∏–Ω–∞—Ä–Ω—ã–º–∏ —É—Å–ø–µ—Ö–∞–º–∏! üòã"

    await update.message.reply_text(text, parse_mode='Markdown', reply_markup=get_main_menu_keyboard())

# --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ ---
async def start_add_manually(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "‚úèÔ∏è *–®–∞–≥ 1/3: –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞*\n\n"
        "–ù–∞–ø–∏—à–∏, —á—Ç–æ —Ç—ã –∫—É–ø–∏–ª(–∞)! –ù–∞–ø—Ä–∏–º–µ—Ä: *–ú–æ–ª–æ–∫–æ*, *–°—ã—Ä –ú–æ—Ü–∞—Ä–µ–ª–ª–∞*, *–ö—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞*.\n\n"
        "–ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π ‚Äî —è –ø–æ–º–æ–≥—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏! üí™",
        parse_mode='Markdown',
        reply_markup=get_cancel_keyboard()
    )
    return CHOOSING_PRODUCT_NAME

async def choose_product_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_input = update.message.text.strip()
    if user_input in ["‚ùå –û—Ç–º–µ–Ω–∞", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]:
        return await cancel(update, context)
    if not user_input:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞. –ù–∞–ø—Ä–∏–º–µ—Ä: *–ô–æ–≥—É—Ä—Ç*.", parse_mode='Markdown')
        return CHOOSING_PRODUCT_NAME
    context.user_data['product_name'] = user_input
    await update.message.reply_text(
        "üìÖ *–®–∞–≥ 2/3: –î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏*\n\n"
        "–í –∫–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ —É–¥–æ–±–Ω–æ –≤–≤–µ—Å—Ç–∏ –¥–∞—Ç—É?\n"
        "‚Ä¢ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 25.04.2025)\n"
        "‚Ä¢ –ì–ì–ì–ì-–ú–ú-–î–î (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2025-04-25)\n\n"
        "–í—ã–±–µ—Ä–∏ –ª—é–±–æ–π ‚Äî —è –ø–æ–π–º—É! üòâ",
        parse_mode='Markdown',
        reply_markup=get_cancel_keyboard()
    )
    return CHOOSING_PURCHASE_DATE

async def choose_purchase_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_input = update.message.text.strip()
    if user_input in ["‚ùå –û—Ç–º–µ–Ω–∞", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]:
        return await cancel(update, context)
    parsed_date = parse_date(user_input)
    if parsed_date is None:
        await update.message.reply_text(
            "üòî –ö–∞–∂–µ—Ç—Å—è, —è –Ω–µ –ø–æ–Ω—è–ª –¥–∞—Ç—É.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –≤ –æ–¥–Ω–æ–º –∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤:\n"
            "‚Ä¢ 25.04.2025\n‚Ä¢ 2025-04-25",
            parse_mode='Markdown',
            reply_markup=get_cancel_keyboard()
        )
        return CHOOSING_PURCHASE_DATE
    context.user_data['purchase_date'] = parsed_date.isoformat()
    await update.message.reply_text(
        "üìÜ *–®–∞–≥ 3/3: –î–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å—Ä–æ–∫–∞*\n\n"
        "–ö–æ–≥–¥–∞ –ø—Ä–æ–¥—É–∫—Ç —Å—Ç–∞–Ω–µ—Ç –Ω–µ–ø—Ä–∏–≥–æ–¥–Ω—ã–º –¥–ª—è —É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è?\n"
        "–í–≤–µ–¥–∏ –¥–∞—Ç—É –≤ —Ç–æ–º –∂–µ —Ñ–æ—Ä–º–∞—Ç–µ, —á—Ç–æ –∏ –ø–æ–∫—É–ø–∫—É.",
        parse_mode='Markdown',
        reply_markup=get_cancel_keyboard()
    )
    return CHOOSING_EXPIRATION_DATE

async def choose_expiration_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_input = update.message.text.strip()
    if user_input in ["‚ùå –û—Ç–º–µ–Ω–∞", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]:
        return await cancel(update, context)
    parsed_date = parse_date(user_input)
    if parsed_date is None:
        await update.message.reply_text(
            "üòî –ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞—Ç—É.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π, –Ω–∞–ø—Ä–∏–º–µ—Ä: *30.04.2025* –∏–ª–∏ *2025-04-30*",
            parse_mode='Markdown',
            reply_markup=get_cancel_keyboard()
        )
        return CHOOSING_EXPIRATION_DATE

    today = datetime.now().date()
    if parsed_date < today:
        await update.message.reply_text(
            "‚ùå –û–π! –î–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º.\n\n"
            "–ü—Ä–æ–≤–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏ –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É.",
            parse_mode='Markdown',
            reply_markup=get_cancel_keyboard()
        )
        return CHOOSING_EXPIRATION_DATE

    purchase_date = datetime.strptime(context.user_data['purchase_date'], '%Y-%m-%d').date()
    expiration_days = (parsed_date - purchase_date).days
    if expiration_days < 0:
        await update.message.reply_text(
            "‚ùå –î–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –¥–∞—Ç—ã –ø–æ–∫—É–ø–∫–∏.\n\n"
            "–î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –∑–∞–Ω–æ–≤–æ!",
            parse_mode='Markdown',
            reply_markup=get_main_menu_keyboard()
        )
        return ConversationHandler.END

    user_id = update.effective_user.id
    product_name = context.user_data['product_name']
    purchase_date_str = context.user_data['purchase_date']
    expires_at_str = parsed_date.isoformat()

    try:
        with sqlite3.connect('products.db') as conn:
            cursor = conn.cursor()
            cursor.execute('''
                INSERT INTO products (user_id, name, purchase_date, expiration_days, added_at, expires_at)
                VALUES (?, ?, ?, ?, ?, ?)
            ''', (user_id, product_name, purchase_date_str, expiration_days, datetime.now().isoformat(), expires_at_str))
            conn.commit()

        schedule_notifications(context, user_id, product_name, expiration_days)

        success_text = (
            f"üéâ *–£—Ä–∞! –ü—Ä–æ–¥—É–∫—Ç –¥–æ–±–∞–≤–ª–µ–Ω!*\n\n"
            f"üîπ *–ù–∞–∑–≤–∞–Ω–∏–µ:* {product_name}\n"
            f"üìÖ *–ö—É–ø–ª–µ–Ω–æ:* {purchase_date_str}\n"
            f"üìÜ *–ò—Å—Ç–µ–∫–∞–µ—Ç:* {expires_at_str}\n"
            f"‚è≥ *–°—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏:* {expiration_days} –¥–Ω–µ–π\n\n"
            "üîî –Ø –Ω–∞–ø–æ–º–Ω—é —Ç–µ–±–µ:\n"
            "‚Ä¢ –ó–∞ 3 –¥–Ω—è –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å—Ä–æ–∫–∞\n"
            "‚Ä¢ –ò –∑–∞ 1 –¥–µ–Ω—å ‚Äî –ø–æ—Å–ª–µ–¥–Ω–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!\n\n"
            "–¢—ã –¥–µ–ª–∞–µ—à—å –º–∏—Ä –ª—É—á—à–µ ‚Äî —Å–ø–∞—Å–∏–±–æ! üåç"
        )

        await update.message.reply_text(
            success_text,
            parse_mode='Markdown',
            reply_markup=get_main_menu_keyboard()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.", reply_markup=get_main_menu_keyboard())

    return ConversationHandler.END

# --- –§–æ—Ç–æ ---
async def recognize_product(photo_path: str) -> str:
    products = ["–ú–æ–ª–æ–∫–æ", "–•–ª–µ–±", "–Ø–π—Ü–∞", "–°—ã—Ä", "–ô–æ–≥—É—Ä—Ç", "–ú—è—Å–æ", "–†—ã–±–∞", "–û–≤–æ—â–∏", "–§—Ä—É–∫—Ç—ã", "–ö—É—Ä–∏—Ü–∞", "–ì–æ–≤—è–¥–∏–Ω–∞", "–ü–æ–º–∏–¥–æ—Ä—ã", "–û–≥—É—Ä—Ü—ã"]
    return random.choice(products)

async def start_add_by_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üì∏ *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ —Ñ–æ—Ç–æ*\n\n"
        "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ —É–ø–∞–∫–æ–≤–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–∞ ‚Äî —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ!\n\n"
        "üí° –°–æ–≤–µ—Ç: —Å–¥–µ–ª–∞–π —á—ë—Ç–∫–æ–µ —Ñ–æ—Ç–æ —ç—Ç–∏–∫–µ—Ç–∫–∏ –ø—Ä–∏ —Ö–æ—Ä–æ—à–µ–º –æ—Å–≤–µ—â–µ–Ω–∏–∏.",
        parse_mode='Markdown',
        reply_markup=get_cancel_keyboard()
    )
    return PHOTO_RECOGNITION

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id = update.effective_user.id
        os.makedirs("photos", exist_ok=True)
        
        photo_file = await update.message.photo[-1].get_file()
        file_id = update.message.photo[-1].file_id
        photo_hash = file_id[-10:]
        photo_path = f"photos/photo_{user_id}_{photo_hash}.jpg"
        await photo_file.download_to_drive(photo_path)

        product_name = await recognize_product(photo_path)
        os.remove(photo_path)

        context.user_data['product_name'] = product_name
        await update.message.reply_text(
            f"ü§ñ *–û—Ç–ª–∏—á–Ω–æ! –Ø —Ä–∞—Å–ø–æ–∑–Ω–∞–ª: {product_name}*\n\n"
            "üìÖ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –¥–∞—Ç—É –ø–æ–∫—É–ø–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 25.04.2025):",
            parse_mode='Markdown',
            reply_markup=get_cancel_keyboard()
        )
        return CHOOSING_PURCHASE_DATE

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –¥–æ–±–∞–≤—å –ø—Ä–æ–¥—É–∫—Ç –≤—Ä—É—á–Ω—É—é.",
            reply_markup=get_main_menu_keyboard()
        )
        return ConversationHandler.END

# --- –ü—Ä–æ—á–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
async def list_products_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    with sqlite3.connect('products.db') as conn:
        cursor = conn.cursor()
        cursor.execute('''
            SELECT name, expires_at FROM products WHERE user_id = ? ORDER BY expires_at
        ''', (user_id,))
        products = cursor.fetchall()

    if not products:
        await update.message.reply_text(
            "üì¶ *–¢–≤–æ–π —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫ –ø—É—Å—Ç!*\n\n"
            "–î–æ–±–∞–≤—å –ø–µ—Ä–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç ‚Äî –∏ —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å—Ä–æ–∫ –µ–≥–æ –≥–æ–¥–Ω–æ—Å—Ç–∏! üíö",
            parse_mode='Markdown',
            reply_markup=get_main_menu_keyboard()
        )
        return

    text = "üìã *–¢–≤–æ–∏ –ø—Ä–æ–¥—É–∫—Ç—ã:*\n\n"
    today = datetime.now().date()
    for name, expires_at in products:
        exp_date = datetime.strptime(expires_at, '%Y-%m-%d').date()
        days_left = (exp_date - today).days
        if days_left < 0:
            status = "üî¥ –ü–†–û–°–†–û–ß–ï–ù–û"
        elif days_left == 0:
            status = "üî¥ –ò—Å—Ç–µ–∫–∞–µ—Ç —Å–µ–≥–æ–¥–Ω—è!"
        elif days_left == 1:
            status = "üü† –ò—Å—Ç–µ–∫–∞–µ—Ç –∑–∞–≤—Ç—Ä–∞"
        elif days_left <= 3:
            status = f"üü° –ò—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ {days_left} –¥–Ω—è"
        else:
            status = f"üü¢ –ï—â—ë {days_left} –¥–Ω–µ–π"
        text += f"‚Ä¢ *{name}* ‚Äî {status}\n"

    text += "\nüí° –°–æ–≤–µ—Ç: —Ä–µ–≥—É–ª—è—Ä–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–π —ç—Ç–æ—Ç —Å–ø–∏—Å–æ–∫, —á—Ç–æ–±—ã –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å!"

    await update.message.reply_text(text, parse_mode='Markdown', reply_markup=get_main_menu_keyboard())

async def show_expired_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    today = datetime.now().date().isoformat()
    with sqlite3.connect('products.db') as conn:
        cursor = conn.cursor()
        cursor.execute('''
            SELECT name, expires_at FROM products 
            WHERE user_id = ? AND expires_at <= ? AND notified = FALSE
        ''', (user_id, today))
        expired = cursor.fetchall()

    if not expired:
        text = "‚úÖ *–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤!*\n\n–¢—ã –æ—Ç–ª–∏—á–Ω–æ —Å–ø—Ä–∞–≤–ª—è–µ—à—å—Å—è! üåü"
    else:
        text = "üö® *–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã:*\n\n"
        for name, expires_at in expired:
            text += f"‚Ä¢ *{name}* ‚Äî —Å—Ä–æ–∫ –∏—Å—Ç—ë–∫ {expires_at}\n"
        text += "\n‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±—Ä–æ—Å—å –∏—Ö, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ä–∏—Å–∫–∞ –¥–ª—è –∑–¥–æ—Ä–æ–≤—å—è!"

    await update.message.reply_text(text, parse_mode='Markdown', reply_markup=get_main_menu_keyboard())

async def clear_products_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    with sqlite3.connect('products.db') as conn:
        cursor = conn.cursor()
        cursor.execute('DELETE FROM products WHERE user_id = ?', (user_id,))
        conn.commit()
    await update.message.reply_text(
        "üóëÔ∏è *–í—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã —É–¥–∞–ª–µ–Ω—ã!*\n\n"
        "–¢–≤–æ–π —Å–ø–∏—Å–æ–∫ —á–∏—Å—Ç. –ì–æ—Ç–æ–≤ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã? üòä",
        parse_mode='Markdown',
        reply_markup=get_main_menu_keyboard()
    )

async def help_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = (
        "‚ÑπÔ∏è *–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è Freshly Bot:*\n\n"
        "1Ô∏è‚É£ *–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç:*\n"
        "   ‚Ä¢ –ù–∞–∂–º–∏ 'üì∏ –î–æ–±–∞–≤–∏—Ç—å –ø–æ —Ñ–æ—Ç–æ' –∏ –æ—Ç–ø—Ä–∞–≤—å —Å–Ω–∏–º–æ–∫ —É–ø–∞–∫–æ–≤–∫–∏.\n"
        "   ‚Ä¢ –ò–ª–∏ '‚úçÔ∏è –î–æ–±–∞–≤–∏—Ç—å –≤—Ä—É—á–Ω—É—é' ‚Äî –≤–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –¥–∞—Ç—ã.\n\n"
        "2Ô∏è‚É£ *–ü–æ–ª—É—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:*\n"
        "   ‚Ä¢ –Ø –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–ø–æ–º–Ω—é –∑–∞ 3 –∏ –∑–∞ 1 –¥–µ–Ω—å –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å—Ä–æ–∫–∞!\n\n"
        "3Ô∏è‚É£ *–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏:*\n"
        "   ‚Ä¢ 'üìã –ú–æ–∏ –ø—Ä–æ–¥—É–∫—Ç—ã' ‚Äî —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫\n"
        "   ‚Ä¢ 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞' ‚Äî —Ç–≤–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è\n"
        "   ‚Ä¢ 'üë®‚Äçüç≥ –†–µ—Ü–µ–ø—Ç—ã' ‚Äî –∏–¥–µ–∏ –¥–ª—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è\n\n"
        "üå± –í–º–µ—Å—Ç–µ –º—ã —Å–æ–∫—Ä–∞—â–∞–µ–º –ø–∏—â–µ–≤—ã–µ –æ—Ç—Ö–æ–¥—ã –∏ –∑–∞–±–æ—Ç–∏–º—Å—è –æ –ø–ª–∞–Ω–µ—Ç–µ!"
    )
    await update.message.reply_text(
        help_text,
        parse_mode='Markdown',
        reply_markup=get_main_menu_keyboard()
    )

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        '‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.\n\n–í–æ–∑–≤—Ä–∞—â–∞–π—Å—è, –∫–æ–≥–¥–∞ –±—É–¥–µ—à—å –≥–æ—Ç–æ–≤(–∞) –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç! üíö',
        reply_markup=get_main_menu_keyboard()
    )
    context.user_data.clear()
    return ConversationHandler.END

async def handle_menu_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    handlers = {
        "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é": start,
        "‚ùå –û—Ç–º–µ–Ω–∞": cancel,
        "üì∏ –î–æ–±–∞–≤–∏—Ç—å –ø–æ —Ñ–æ—Ç–æ": start_add_by_photo,
        "‚úçÔ∏è –î–æ–±–∞–≤–∏—Ç—å –≤—Ä—É—á–Ω—É—é": start_add_manually,
        "üìã –ú–æ–∏ –ø—Ä–æ–¥—É–∫—Ç—ã": list_products_handler,
        "üö® –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ": show_expired_handler,
        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞": stats_handler,
        "üë®‚Äçüç≥ –†–µ—Ü–µ–ø—Ç—ã": recipes_handler,
        "üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å—ë": clear_products_handler,
        "‚ÑπÔ∏è –ü–æ–º–æ—â—å": help_handler,
    }

    if text in handlers:
        if text in ["üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "‚ùå –û—Ç–º–µ–Ω–∞"]:
            return await handlers[text](update, context)
        else:
            return await handlers[text](update, context)
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.", reply_markup=get_main_menu_keyboard())
        return ConversationHandler.END

# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ---
def main():
    init_db()

    application = Application.builder().token(TOKEN).build()

    manual_conv = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^‚úçÔ∏è –î–æ–±–∞–≤–∏—Ç—å –≤—Ä—É—á–Ω—É—é$"), start_add_manually)],
        states={
            CHOOSING_PRODUCT_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, choose_product_name)],
            CHOOSING_PURCHASE_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, choose_purchase_date)],
            CHOOSING_EXPIRATION_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, choose_expiration_date)],
        },
        fallbacks=[MessageHandler(filters.Regex("^(‚ùå –û—Ç–º–µ–Ω–∞|üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é)$"), cancel)],
        allow_reentry=True
    )

    photo_conv = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^üì∏ –î–æ–±–∞–≤–∏—Ç—å –ø–æ —Ñ–æ—Ç–æ$"), start_add_by_photo)],
        states={
            PHOTO_RECOGNITION: [MessageHandler(filters.PHOTO, handle_photo)],
            CHOOSING_PURCHASE_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, choose_purchase_date)],
            CHOOSING_EXPIRATION_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, choose_expiration_date)],
        },
        fallbacks=[MessageHandler(filters.Regex("^(‚ùå –û—Ç–º–µ–Ω–∞|üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é)$"), cancel)],
        allow_reentry=True
    )

    application.add_handler(CommandHandler("start", start))
    application.add_handler(manual_conv)
    application.add_handler(photo_conv)
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_menu_choice))

    # –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–∫–∏ –≤ 9:00
    application.job_queue.run_daily(check_expired_daily, time(hour=9, minute=0))

    # üîÅ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    restore_scheduled_jobs(application)

    logger.info("üöÄ Freshly Bot –∑–∞–ø—É—â–µ–Ω!")
    application.run_polling()

if __name__ == '__main__':
    main()
