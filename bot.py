import os
import logging
import sqlite3
import asyncio
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler,
    ContextTypes, ConversationHandler
)
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è
WAITING_PRODUCT, WAITING_DATE = range(2)

# –ë–∞–∑–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
PRODUCTS_DATA = {
    "–º–æ–ª–æ–∫–æ": {"shelf_life": 7, "category": "–º–æ–ª–æ—á–Ω—ã–µ"},
    "–∫–µ—Ñ–∏—Ä": {"shelf_life": 5, "category": "–º–æ–ª–æ—á–Ω—ã–µ"},
    "—Å—ã—Ä": {"shelf_life": 14, "category": "–º–æ–ª–æ—á–Ω—ã–µ"},
    "—Ç–≤–æ—Ä–æ–≥": {"shelf_life": 5, "category": "–º–æ–ª–æ—á–Ω—ã–µ"},
    "—Å–º–µ—Ç–∞–Ω–∞": {"shelf_life": 7, "category": "–º–æ–ª–æ—á–Ω—ã–µ"},
    "–π–æ–≥—É—Ä—Ç": {"shelf_life": 10, "category": "–º–æ–ª–æ—á–Ω—ã–µ"},
    "—è–π—Ü–∞": {"shelf_life": 30, "category": "—è–π—Ü–∞"},
    "–∫—É—Ä–∏—Ü–∞": {"shelf_life": 3, "category": "–º—è—Å–æ"},
    "–≥–æ–≤—è–¥–∏–Ω–∞": {"shelf_life": 4, "category": "–º—è—Å–æ"},
    "—Ä—ã–±–∞": {"shelf_life": 2, "category": "—Ä—ã–±–∞"},
    "—Ö–ª–µ–±": {"shelf_life": 5, "category": "—Ö–ª–µ–±"},
    "–ø–∞—Å—Ç–∞": {"shelf_life": 60, "category": "–º–∞–∫–∞—Ä–æ–Ω—ã"},
    "—Ä–∏—Å": {"shelf_life": 90, "category": "–∑–ª–∞–∫–∏"},
    "–∫–æ—Ñ–µ": {"shelf_life": 180, "category": "–Ω–∞–ø–∏—Ç–∫–∏"},
    "—á–∞–π": {"shelf_life": 365, "category": "–Ω–∞–ø–∏—Ç–∫–∏"},
    "–±—É—Ç—ã–ª–∫–∞ –≤–æ–¥—ã": {"shelf_life": 365, "category": "–Ω–∞–ø–∏—Ç–∫–∏"},
    "—à–æ–∫–æ–ª–∞–¥": {"shelf_life": 90, "category": "—Å–ª–∞–¥–æ—Å—Ç–∏"},
    "–ø–µ—á–µ–Ω—å–µ": {"shelf_life": 30, "category": "—Å–ª–∞–¥–æ—Å—Ç–∏"},
    "—Å–∞—Ö–∞—Ä": {"shelf_life": 365, "category": "—Å–ª–∞–¥–æ—Å—Ç–∏"},
    "–º–∞—Å–ª–æ": {"shelf_life": 120, "category": "–∂–∏—Ä—ã"},
    "–º–∞—Å–ª–æ —Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω–æ–µ": {"shelf_life": 180, "category": "–∂–∏—Ä—ã"},
    "–∫–æ–Ω—Å–µ—Ä–≤—ã": {"shelf_life": 365, "category": "–∫–æ–Ω—Å–µ—Ä–≤—ã"},
    "–æ–≤–æ—â–∏": {"shelf_life": 7, "category": "–æ–≤–æ—â–∏"},
    "—Ñ—Ä—É–∫—Ç—ã": {"shelf_life": 5, "category": "—Ñ—Ä—É–∫—Ç—ã"},
}


class Database:
    def __init__(self):
        self.init_db()

    def init_db(self):
        with sqlite3.connect('products.db', check_same_thread=False) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS products (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER,
                    product_name TEXT,
                    purchase_date DATE,
                    expiration_date DATE,
                    notified BOOLEAN DEFAULT FALSE
                )
            ''')
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS users (
                    user_id INTEGER PRIMARY KEY,
                    username TEXT,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            conn.commit()

    async def add_user(self, user_id: int, username: str):
        with sqlite3.connect('products.db', check_same_thread=False) as conn:
            cursor = conn.cursor()
            cursor.execute(
                'INSERT OR IGNORE INTO users (user_id, username) VALUES (?, ?)',
                (user_id, username or '')
            )
            conn.commit()

    async def add_product(self, user_id: int, product_name: str, purchase_date: datetime) -> bool:
        if product_name not in PRODUCTS_DATA:
            return False

        shelf_life = PRODUCTS_DATA[product_name]['shelf_life']
        expiration_date = purchase_date + timedelta(days=shelf_life)

        with sqlite3.connect('products.db', check_same_thread=False) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                INSERT INTO products (user_id, product_name, purchase_date, expiration_date)
                VALUES (?, ?, ?, ?)
            ''', (user_id, product_name, purchase_date.date(), expiration_date.date()))
            conn.commit()
        return True

    async def get_user_products(self, user_id: int):
        with sqlite3.connect('products.db', check_same_thread=False) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                SELECT product_name, purchase_date, expiration_date
                FROM products
                WHERE user_id = ?
                ORDER BY expiration_date
            ''', (user_id,))
            return cursor.fetchall()

    async def get_products_count(self, user_id: int) -> int:
        with sqlite3.connect('products.db', check_same_thread=False) as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT COUNT(*) FROM products WHERE user_id = ?', (user_id,))
            result = cursor.fetchone()
            return result[0] if result else 0

    async def clear_user_products(self, user_id: int):
        with sqlite3.connect('products.db', check_same_thread=False) as conn:
            cursor = conn.cursor()
            cursor.execute('DELETE FROM products WHERE user_id = ?', (user_id,))
            conn.commit()

    async def get_expiring_products(self):
        tomorrow = (datetime.now() + timedelta(days=1)).date()
        with sqlite3.connect('products.db', check_same_thread=False) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                SELECT p.user_id, u.username, p.product_name, p.expiration_date
                FROM products p
                JOIN users u ON p.user_id = u.user_id
                WHERE p.expiration_date = ? AND p.notified = FALSE
            ''', (tomorrow,))
            return cursor.fetchall()

    async def mark_as_notified(self, user_id: int, product_name: str):
        with sqlite3.connect('products.db', check_same_thread=False) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                UPDATE products
                SET notified = TRUE
                WHERE user_id = ? AND product_name = ?
            ''', (user_id, product_name))
            conn.commit()


class FreshlyBot:
    def __init__(self, token: str):
        self.token = token
        self.db = Database()
        self.application: Application = None
        self.scheduler = AsyncIOScheduler()

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start ‚Äî –∫—Ä–∞—Å–∏–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π"""
        user = update.effective_user
        await self.db.add_user(user.id, user.username)

        animation_url = "https://i.imgur.com/6JQV9Xj.gif"
        fallback_image_url = "https://i.imgur.com/8Y0fKuB.png"

        welcome_text = (
            f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø *Freshly Bot* ‚Äî —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —Å—Ä–æ–∫–∞–º –≥–æ–¥–Ω–æ—Å—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤.\n\n"
            "üìå **–ß—Ç–æ —è —É–º–µ—é:**\n"
            "‚Ä¢ üìã –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç —Å –¥–∞—Ç–æ–π –ø–æ–∫—É–ø–∫–∏\n"
            "‚Ä¢ ‚è≥ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å—Ä–æ–∫–∏ –≥–æ–¥–Ω–æ—Å—Ç–∏\n"
            "‚Ä¢ üõéÔ∏è –£–≤–µ–¥–æ–º–ª—è—Ç—å –∑–∞ –¥–µ–Ω—å –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å—Ä–æ–∫–∞\n"
            "‚Ä¢ üçΩÔ∏è –ü–æ–¥—Å–∫–∞–∑—ã–≤–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç—ã –¥–ª—è –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤\n"
            "‚Ä¢ üóëÔ∏è –û—á–∏—â–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏\n\n"
            "‚úÖ –ú–∞–∫—Å–∏–º—É–º 5 –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ ‚Äî —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å –ø–∞–º—è—Ç—å!\n\n"
            "üéØ –ù–∞—á–Ω–∏ —Å –∫–Ω–æ–ø–∫–∏ *‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç* ‚Äî –≤—ã–±–µ—Ä–∏ –ø—Ä–æ–¥—É–∫—Ç –∏ –¥–∞—Ç—É –ø–æ–∫—É–ø–∫–∏, –∏ —è —Å–¥–µ–ª–∞—é –≤—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ!\n\n"
            "üí° *–ü–æ–ª–µ–∑–Ω—ã–µ —Å–æ–≤–µ—Ç—ã:* \n"
            "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π ¬´–í—á–µ—Ä–∞¬ª –∏–ª–∏ ¬´–°–µ–≥–æ–¥–Ω—è¬ª ‚Äî —É–¥–æ–±–Ω–æ!\n"
            "‚Ä¢ –ï—Å–ª–∏ –ø—Ä–æ–¥—É–∫—Ç –ø—Ä–æ—Å—Ä–æ—á–∏–ª—Å—è ‚Äî —è –ø–æ–¥—Å–∫–∞–∂—É, —á—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å!"
        )

        try:
            await update.message.reply_animation(
                animation=animation_url,
                caption=welcome_text,
                parse_mode="Markdown",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç", callback_data="add_product")],
                    [InlineKeyboardButton("üìã –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫", callback_data="list_products")],
                    [InlineKeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å—ë", callback_data="clear_products")]
                ])
            )
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–Ω–∏–º–∞—Ü–∏—é: {e}")
            try:
                await update.message.reply_photo(
                    photo=fallback_image_url,
                    caption=welcome_text,
                    parse_mode="Markdown",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç", callback_data="add_product")],
                        [InlineKeyboardButton("üìã –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫", callback_data="list_products")],
                        [InlineKeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å—ë", callback_data="clear_products")]
                    ])
                )
            except Exception as e2:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ: {e2}")
                await update.message.reply_text(
                    welcome_text,
                    parse_mode="Markdown",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç", callback_data="add_product")],
                        [InlineKeyboardButton("üìã –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫", callback_data="list_products")],
                        [InlineKeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å—ë", callback_data="clear_products")]
                    ])
                )

    async def show_main_menu_with_photo(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å —Ñ–æ—Ç–æ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–∞"""
        image_url = "https://i.imgur.com/8Y0fKuB.png"
        text = "üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"

        keyboard = [
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç", callback_data="add_product")],
            [InlineKeyboardButton("üìã –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫", callback_data="list_products")],
            [InlineKeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å—ë", callback_data="clear_products")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        try:
            if update.callback_query:
                await update.callback_query.message.delete()
                await update.callback_query.message.reply_photo(
                    photo=image_url,
                    caption=text,
                    reply_markup=reply_markup
                )
            else:
                await update.message.reply_photo(
                    photo=image_url,
                    caption=text,
                    reply_markup=reply_markup
                )
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ: {e}")
            await self._edit_or_reply(update, text, reply_markup)

    async def list_products(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å –∫–Ω–æ–ø–∫–æ–π '–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é'"""
        user = update.effective_user
        products = await self.db.get_user_products(user.id)

        if not products:
            text = "üì≠ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤."
        else:
            text = "üìã **–í–∞—à–∏ –ø—Ä–æ–¥—É–∫—Ç—ã:**\n\n"
            today = datetime.now().date()
            for product_name, purchase_date, expiration_date in products:
                days_left = (expiration_date - today).days
                if days_left < 0:
                    status, status_text = "üî¥", "–ü–†–û–°–†–û–ß–ï–ù–û"
                elif days_left == 0:
                    status, status_text = "üî¥", "–ò—Å—Ç–µ–∫–∞–µ—Ç —Å–µ–≥–æ–¥–Ω—è"
                elif days_left == 1:
                    status, status_text = "üü†", "–ò—Å—Ç–µ–∫–∞–µ—Ç –∑–∞–≤—Ç—Ä–∞"
                elif days_left <= 3:
                    status, status_text = "üü°", f"–ò—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ {days_left} –¥–Ω—è"
                else:
                    status, status_text = "üü¢", f"–û—Å—Ç–∞–ª–æ—Å—å {days_left} –¥–Ω–µ–π"
                text += f"{status} **{product_name}**\n   üìÖ –ö—É–ø–ª–µ–Ω: {purchase_date}\n   ‚è≥ –°—Ä–æ–∫ –¥–æ: {expiration_date} ({status_text})\n\n"
            products_count = await self.db.get_products_count(user.id)
            text += f"üìä –í—Å–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {products_count}/5"

        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        if update.callback_query:
            try:
                await update.callback_query.edit_message_text(text, reply_markup=reply_markup, parse_mode="Markdown")
            except Exception:
                await update.callback_query.message.reply_text(text, reply_markup=reply_markup, parse_mode="Markdown")
        else:
            await update.message.reply_text(text, reply_markup=reply_markup, parse_mode="Markdown")

    async def clear_products(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        user = update.effective_user
        await self.db.clear_user_products(user.id)

        if update.callback_query:
            await update.callback_query.edit_message_text("‚úÖ –í—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã —É–¥–∞–ª–µ–Ω—ã!")
        else:
            await update.message.reply_text("‚úÖ –í—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã —É–¥–∞–ª–µ–Ω—ã!")

        await asyncio.sleep(1)
        await self.show_main_menu_with_photo(update, context)

    async def add_product_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        user = update.effective_user
        if await self.db.get_products_count(user.id) >= 5:
            await self._edit_or_reply(update, "‚ùå –õ–∏–º–∏—Ç 5 –ø—Ä–æ–¥—É–∫—Ç–æ–≤. –û—á–∏—Å—Ç–∏—Ç–µ —Å–ø–∏—Å–æ–∫.")
            await asyncio.sleep(1)
            await self.show_main_menu_with_photo(update, context)
            return ConversationHandler.END

        keyboard = []
        products = list(PRODUCTS_DATA.keys())
        for i in range(0, len(products), 2):
            row = [
                InlineKeyboardButton(products[i].capitalize(), callback_data=f"product_{products[i]}")
            ]
            if i + 1 < len(products):
                row.append(InlineKeyboardButton(products[i+1].capitalize(), callback_data=f"product_{products[i+1]}"))
            keyboard.append(row)
        keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")])

        reply_markup = InlineKeyboardMarkup(keyboard)
        await self._edit_or_reply(update, "üì¶ –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç:", reply_markup)
        return WAITING_PRODUCT

    async def button_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        query = update.callback_query
        await query.answer()

        if query.data == "back_to_menu":
            await self.show_main_menu_with_photo(update, context)
            return ConversationHandler.END

        elif query.data == "clear_products":
            await self.clear_products(update, context)
            return ConversationHandler.END

        elif query.data == "list_products":
            await self.list_products(update, context)
            return ConversationHandler.END

        elif query.data == "cancel":
            await query.edit_message_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
            await asyncio.sleep(1)
            await self.show_main_menu_with_photo(update, context)
            return ConversationHandler.END

        elif query.data.startswith("product_"):
            product_name = query.data[8:]
            context.user_data['current_product'] = product_name

            keyboard = [
                [InlineKeyboardButton("üìÖ –°–µ–≥–æ–¥–Ω—è", callback_data="today")],
                [InlineKeyboardButton("‚è™ –í—á–µ—Ä–∞", callback_data="yesterday")],
                [InlineKeyboardButton("‚è™ 2 –¥–Ω—è –Ω–∞–∑–∞–¥", callback_data="two_days_ago")],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_product"),
                 InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(
                f"üì¶ –ü—Ä–æ–¥—É–∫—Ç: **{product_name}**\nüìÜ –ö–æ–≥–¥–∞ –≤—ã –µ–≥–æ –∫—É–ø–∏–ª–∏?",
                reply_markup=reply_markup,
                parse_mode="Markdown"
            )
            return WAITING_DATE

        elif query.data == "back_to_product":
            return await self.add_product_start(update, context)

        elif query.data in ["today", "yesterday", "two_days_ago"]:
            product_name = context.user_data.get('current_product')
            if not product_name:
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –ø—Ä–æ–¥—É–∫—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω.")
                await asyncio.sleep(1)
                await self.show_main_menu_with_photo(update, context)
                return ConversationHandler.END

            if query.data == "today":
                purchase_date = datetime.now()
            elif query.data == "yesterday":
                purchase_date = datetime.now() - timedelta(days=1)
            elif query.data == "two_days_ago":
                purchase_date = datetime.now() - timedelta(days=2)

            success = await self.db.add_product(query.from_user.id, product_name, purchase_date)
            if success:
                shelf_life = PRODUCTS_DATA[product_name]['shelf_life']
                expiration_date = purchase_date + timedelta(days=shelf_life)
                days_left = (expiration_date.date() - datetime.now().date()).days
                msg = f"‚úÖ **{product_name}** –¥–æ–±–∞–≤–ª–µ–Ω!\nüìÖ –°—Ä–æ–∫: {expiration_date.strftime('%d.%m.%Y')}\n‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: {days_left} –¥–Ω–µ–π"
            else:
                msg = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞."

            await query.edit_message_text(msg, parse_mode="Markdown")
            await asyncio.sleep(2)
            await self.show_main_menu_with_photo(update, context)
            return ConversationHandler.END

        elif query.data == "add_product":
            return await self.add_product_start(update, context)

        else:
            await query.edit_message_text("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")
            await asyncio.sleep(1)
            await self.show_main_menu_with_photo(update, context)
            return ConversationHandler.END

    async def _edit_or_reply(self, update: Update, text: str, reply_markup=None) -> None:
        try:
            if update.callback_query:
                await update.callback_query.edit_message_text(text, reply_markup=reply_markup, parse_mode="Markdown")
            else:
                await update.message.reply_text(text, reply_markup=reply_markup, parse_mode="Markdown")
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å: {e}")
            if update.callback_query:
                await update.callback_query.message.reply_text(text, reply_markup=reply_markup, parse_mode="Markdown")
            else:
                await update.message.reply_text(text, reply_markup=reply_markup, parse_mode="Markdown")

    async def check_expiring_products(self):
        try:
            expiring = await self.db.get_expiring_products()
            for user_id, _, product_name, _ in expiring:
                try:
                    msg = f"‚ö†Ô∏è **{product_name}** –∏—Å–ø–æ—Ä—Ç–∏—Ç—Å—è –∑–∞–≤—Ç—Ä–∞!\n"
                    cat = PRODUCTS_DATA[product_name]['category']
                    tips = {
                        "–º–æ–ª–æ—á–Ω—ã–µ": "–°–¥–µ–ª–∞–π—Ç–µ —Å—ã—Ä–Ω–∏–∫–∏ –∏–ª–∏ –∫–æ–∫—Ç–µ–π–ª—å!",
                        "–º—è—Å–æ": "–ü—Ä–∏–≥–æ—Ç–æ–≤—å—Ç–µ –∂–∞—Ä–∫–æ–µ –∏–ª–∏ –≥—É–ª—è—à!",
                        "—Ä—ã–±–∞": "–ó–∞–ø–µ–∫–∏—Ç–µ —Å –æ–≤–æ—â–∞–º–∏!",
                        "—Ö–ª–µ–±": "–°–¥–µ–ª–∞–π—Ç–µ –≥—Ä–µ–Ω–∫–∏!",
                        "—Ñ—Ä—É–∫—Ç—ã": "–ü—Ä–∏–≥–æ—Ç–æ–≤—å—Ç–µ —Å–∞–ª–∞—Ç!",
                        "–æ–≤–æ—â–∏": "–°–≤–∞—Ä–∏—Ç–µ —Å—É–ø!",
                    }
                    msg += tips.get(cat, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ–≥–æ —Å–µ–≥–æ–¥–Ω—è!")
                    await self.application.bot.send_message(user_id, msg, parse_mode="Markdown")
                    await self.db.mark_as_notified(user_id, product_name)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {user_id}: {e}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")

    def setup_handlers(self):
        conv_handler = ConversationHandler(
            entry_points=[
                CommandHandler("start", self.start),
                CallbackQueryHandler(self.button_handler)
            ],
            states={
                WAITING_PRODUCT: [
                    CallbackQueryHandler(self.button_handler, pattern=r"^(product_.+|cancel)$")
                ],
                WAITING_DATE: [
                    CallbackQueryHandler(self.button_handler, pattern=r"^(today|yesterday|two_days_ago|back_to_product|cancel)$")
                ]
            },
            fallbacks=[
                CallbackQueryHandler(self.button_handler, pattern=r"^cancel$")
            ],
            per_message=False,
            allow_reentry=True
        )
        self.application.add_handler(conv_handler)

    def setup_scheduler(self):
        self.scheduler.add_job(self.check_expiring_products, CronTrigger(hour=10, minute=0), id='daily_check')

    def run(self):
        self.application = Application.builder().token(self.token).build()
        self.setup_handlers()
        self.setup_scheduler()
        self.scheduler.start()
        logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        self.application.run_polling()


def main():
    BOT_TOKEN = os.environ.get('TELEGRAM_BOT_TOKEN')
    if not BOT_TOKEN:
        logger.error("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ TELEGRAM_BOT_TOKEN")
        return
    bot = FreshlyBot(BOT_TOKEN)
    bot.run()


if __name__ == '__main__':
    main()
