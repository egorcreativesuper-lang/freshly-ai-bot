import os
import logging
import sqlite3
import asyncio
import shutil
import re
import signal
import sys
from datetime import datetime, timedelta
from contextlib import contextmanager
from functools import lru_cache
from typing import Dict, List, Optional

import telegram
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler, MessageHandler,
    ContextTypes, ConversationHandler, filters
)
from telegram.error import Forbidden, BadRequest, Conflict
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è
WAITING_PRODUCT, WAITING_DATE, WAITING_CUSTOM_DATE = range(3)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
class Config:
    DATABASE_PATH = os.getenv('DATABASE_PATH', 'products.db')
    BACKUP_ENABLED = os.getenv('BACKUP_ENABLED', 'True').lower() == 'true'
    BACKUP_DIR = os.getenv('BACKUP_DIR', 'backups')
    MAX_PRODUCTS = int(os.getenv('MAX_PRODUCTS', '5'))
    NOTIFICATION_HOUR = int(os.getenv('NOTIFICATION_HOUR', '10'))
    NOTIFICATION_MINUTE = int(os.getenv('NOTIFICATION_MINUTE', '0'))

# –ë–∞–∑–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
PRODUCTS_DATA = {
    "–º–æ–ª–æ–∫–æ": {"shelf_life": 7, "category": "–º–æ–ª–æ—á–Ω—ã–µ"},
    "–∫–µ—Ñ–∏—Ä": {"shelf_life": 5, "category": "–º–æ–ª–æ—á–Ω—ã–µ"},
    "—Å—ã—Ä": {"shelf_life": 14, "category": "–º–æ–ª–æ—á–Ω—ã–µ"},
    "—Ç–≤–æ—Ä–æ–≥": {"shelf_life": 5, "category": "–º–æ–ª–æ—á–Ω—ã–µ"},
    "—Å–º–µ—Ç–∞–Ω–∞": {"shelf_life": 7, "category": "–º–æ–ª–æ—á–Ω—ã–µ"},
    "–π–æ–≥—É—Ä—Ç": {"shelf_life": 10, "category": "–º–æ–ª–æ—á–Ω—ã–µ"},
    "—è–π—Ü–∞": {"shelf_life": 30, "category": "—è–π—Ü–∞"},
    "–∫—É—Ä–∏—Ü–∞": {"shelf_life": 3, "category": "–º—è—Å–æ"},
    "–≥–æ–≤—è–¥–∏–Ω–∞": {"shelf_life": 4, "category": "–º—è—Å–æ"},
    "—Ä—ã–±–∞": {"shelf_life": 2, "category": "—Ä—ã–±–∞"},
    "—Ö–ª–µ–±": {"shelf_life": 5, "category": "—Ö–ª–µ–±"},
    "–ø–∞—Å—Ç–∞": {"shelf_life": 60, "category": "–º–∞–∫–∞—Ä–æ–Ω—ã"},
    "—Ä–∏—Å": {"shelf_life": 90, "category": "–∑–ª–∞–∫–∏"},
    "–∫–æ—Ñ–µ": {"shelf_life": 180, "category": "–Ω–∞–ø–∏—Ç–∫–∏"},
    "—á–∞–π": {"shelf_life": 365, "category": "–Ω–∞–ø–∏—Ç–∫–∏"},
    "–±—É—Ç—ã–ª–∫–∞ –≤–æ–¥—ã": {"shelf_life": 365, "category": "–Ω–∞–ø–∏—Ç–∫–∏"},
    "—à–æ–∫–æ–ª–∞–¥": {"shelf_life": 90, "category": "—Å–ª–∞–¥–æ—Å—Ç–∏"},
    "–ø–µ—á–µ–Ω—å–µ": {"shelf_life": 30, "category": "—Å–ª–∞–¥–æ—Å—Ç–∏"},
    "—Å–∞—Ö–∞—Ä": {"shelf_life": 365, "category": "—Å–ª–∞–¥–æ—Å—Ç–∏"},
    "–º–∞—Å–ª–æ": {"shelf_life": 120, "category": "–∂–∏—Ä—ã"},
    "–º–∞—Å–ª–æ —Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω–æ–µ": {"shelf_life": 180, "category": "–∂–∏—Ä—ã"},
    "–∫–æ–Ω—Å–µ—Ä–≤—ã": {"shelf_life": 365, "category": "–∫–æ–Ω—Å–µ—Ä–≤—ã"},
    "–æ–≤–æ—â–∏": {"shelf_life": 7, "category": "–æ–≤–æ—â–∏"},
    "—Ñ—Ä—É–∫—Ç—ã": {"shelf_life": 5, "category": "—Ñ—Ä—É–∫—Ç—ã"},
}

# –°–æ–≤–µ—Ç—ã –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –ø—Ä–æ–¥—É–∫—Ç–æ–≤
PRODUCT_TIPS = {
    "–º–æ–ª–æ—á–Ω—ã–µ": "ü•õ –°–¥–µ–ª–∞–π—Ç–µ —Å—ã—Ä–Ω–∏–∫–∏, –∫–æ–∫—Ç–µ–π–ª—å –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–ª—è –≤—ã–ø–µ—á–∫–∏!",
    "–º—è—Å–æ": "üçñ –ü—Ä–∏–≥–æ—Ç–æ–≤—å—Ç–µ –∂–∞—Ä–∫–æ–µ, –≥—É–ª—è—à –∏–ª–∏ —Ñ–∞—Ä—à –¥–ª—è –∫–æ—Ç–ª–µ—Ç!",
    "—Ä—ã–±–∞": "üêü –ó–∞–ø–µ–∫–∏—Ç–µ —Å –æ–≤–æ—â–∞–º–∏ –∏–ª–∏ –ø—Ä–∏–≥–æ—Ç–æ–≤—å—Ç–µ —É—Ö—É!",
    "—Ö–ª–µ–±": "üçû –°–¥–µ–ª–∞–π—Ç–µ –≥—Ä–µ–Ω–∫–∏, –ø–∞–Ω–∏—Ä–æ–≤–∫—É –∏–ª–∏ —Ö–ª–µ–±–Ω—ã–π –ø—É–¥–∏–Ω–≥!",
    "—Ñ—Ä—É–∫—Ç—ã": "üçé –ü—Ä–∏–≥–æ—Ç–æ–≤—å—Ç–µ —Ñ—Ä—É–∫—Ç–æ–≤—ã–π —Å–∞–ª–∞—Ç, —Å–º—É–∑–∏ –∏–ª–∏ –∫–æ–º–ø–æ—Ç!",
    "–æ–≤–æ—â–∏": "ü•¶ –°–≤–∞—Ä–∏—Ç–µ —Å—É–ø, —Ä–∞–≥—É –∏–ª–∏ –∑–∞–ø–µ–∫–∏—Ç–µ —Å —Å—ã—Ä–æ–º!",
    "—è–π—Ü–∞": "ü•ö –ü—Ä–∏–≥–æ—Ç–æ–≤—å—Ç–µ –æ–º–ª–µ—Ç, —è–∏—á–Ω–∏—Ü—É –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–ª—è –≤—ã–ø–µ—á–∫–∏!",
    "–º–∞–∫–∞—Ä–æ–Ω—ã": "üçù –°–¥–µ–ª–∞–π—Ç–µ –ø–∞—Å—Ç—É —Å —Å–æ—É—Å–æ–º –∏–ª–∏ –∑–∞–ø–µ–∫–∞–Ω–∫—É!",
    "–∑–ª–∞–∫–∏": "üçö –°–≤–∞—Ä–∏—Ç–µ –∫–∞—à—É –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–∞–∫ –≥–∞—Ä–Ω–∏—Ä!",
    "–Ω–∞–ø–∏—Ç–∫–∏": "‚òï –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–ª—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –Ω–∞–ø–∏—Ç–∫–æ–≤ –∏–ª–∏ –∫–æ–∫—Ç–µ–π–ª–µ–π!",
    "—Å–ª–∞–¥–æ—Å—Ç–∏": "üç´ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–ª—è –¥–µ—Å–µ—Ä—Ç–æ–≤ –∏–ª–∏ –≤—ã–ø–µ—á–∫–∏!",
    "–∂–∏—Ä—ã": "üßà –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–ª—è –≥–æ—Ç–æ–≤–∫–∏ –∏–ª–∏ –∑–∞–ø—Ä–∞–≤–∫–∏ —Å–∞–ª–∞—Ç–æ–≤!",
    "–∫–æ–Ω—Å–µ—Ä–≤—ã": "ü•´ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–∞–∫ –≥–æ—Ç–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç –∏–ª–∏ –¥–ª—è —Å–∞–ª–∞—Ç–æ–≤!"
}

class ProductManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏"""
    
    @staticmethod
    @lru_cache(maxsize=1)
    def get_products_data() -> Dict:
        """–ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö"""
        return PRODUCTS_DATA.copy()
    
    @staticmethod
    @lru_cache(maxsize=1)
    def get_product_tips() -> Dict:
        """–ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∞–º"""
        return PRODUCT_TIPS.copy()
    
    @classmethod
    def get_product_categories(cls) -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
        return list(set(product["category"] for product in cls.get_products_data().values()))
    
    @classmethod
    def get_products_by_category(cls, category: str) -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        return [name for name, data in cls.get_products_data().items() if data["category"] == category]

class Database:
    def __init__(self):
        self.init_db()
        self.create_backup_dir()

    def create_backup_dir(self):
        """–°–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –±—ç–∫–∞–ø–æ–≤"""
        if Config.BACKUP_ENABLED and not os.path.exists(Config.BACKUP_DIR):
            os.makedirs(Config.BACKUP_DIR)

    @contextmanager
    def get_connection(self):
        """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î"""
        conn = sqlite3.connect(Config.DATABASE_PATH, check_same_thread=False)
        conn.row_factory = sqlite3.Row
        try:
            yield conn
        except Exception as e:
            conn.rollback()
            raise e
        finally:
            conn.close()

    def init_db(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        with self.get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS products (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER,
                    product_name TEXT,
                    purchase_date DATE,
                    expiration_date DATE,
                    notified BOOLEAN DEFAULT FALSE,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS users (
                    user_id INTEGER PRIMARY KEY,
                    username TEXT,
                    first_name TEXT,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    last_activity TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            cursor.execute('''
                CREATE INDEX IF NOT EXISTS idx_products_user_id ON products(user_id)
            ''')
            cursor.execute('''
                CREATE INDEX IF NOT EXISTS idx_products_expiration ON products(expiration_date)
            ''')
            conn.commit()

    async def backup_database(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        if not Config.BACKUP_ENABLED:
            return
            
        try:
            backup_name = f"backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}.db"
            backup_path = os.path.join(Config.BACKUP_DIR, backup_name)
            shutil.copy2(Config.DATABASE_PATH, backup_path)
            logger.info(f"–°–æ–∑–¥–∞–Ω –±—ç–∫–∞–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {backup_path}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞: {e}")

    async def add_user(self, user_id: int, username: str, first_name: str):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        with self.get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute('''
                INSERT OR REPLACE INTO users (user_id, username, first_name, last_activity)
                VALUES (?, ?, ?, CURRENT_TIMESTAMP)
            ''', (user_id, username or '', first_name or ''))
            conn.commit()

    async def add_product(self, user_id: int, product_name: str, purchase_date: datetime) -> bool:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞"""
        products_data = ProductManager.get_products_data()
        if product_name not in products_
            return False

        shelf_life = products_data[product_name]['shelf_life']
        expiration_date = purchase_date + timedelta(days=shelf_life)

        with self.get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute('''
                INSERT INTO products (user_id, product_name, purchase_date, expiration_date)
                VALUES (?, ?, ?, ?)
            ''', (user_id, product_name, purchase_date.date(), expiration_date.date()))
            conn.commit()
        return True

    async def get_user_products(self, user_id: int):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        with self.get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute('''
                SELECT product_name, purchase_date, expiration_date
                FROM products
                WHERE user_id = ?
                ORDER BY expiration_date
            ''', (user_id,))
            return cursor.fetchall()

    async def get_products_count(self, user_id: int) -> int:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        with self.get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT COUNT(*) FROM products WHERE user_id = ?', (user_id,))
            result = cursor.fetchone()
            return result[0] if result else 0

    async def clear_user_products(self, user_id: int):
        """–û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        with self.get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute('DELETE FROM products WHERE user_id = ?', (user_id,))
            conn.commit()

    async def get_expiring_products(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å –∏—Å—Ç–µ–∫–∞—é—â–∏–º —Å—Ä–æ–∫–æ–º"""
        tomorrow = (datetime.now() + timedelta(days=1)).date()
        with self.get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute('''
                SELECT p.user_id, u.username, u.first_name, p.product_name, p.expiration_date
                FROM products p
                JOIN users u ON p.user_id = u.user_id
                WHERE p.expiration_date = ? AND p.notified = FALSE
            ''', (tomorrow,))
            return cursor.fetchall()

    async def mark_as_notified(self, user_id: int, product_name: str):
        """–ü–æ–º–µ—Ç–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ –∫–∞–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–Ω–æ–≥–æ"""
        with self.get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute('''
                UPDATE products
                SET notified = TRUE
                WHERE user_id = ? AND product_name = ?
            ''', (user_id, product_name))
            conn.commit()

class FreshlyBot:
    def __init__(self, token: str):
        self.token = token
        self.db = Database()
        self.product_manager = ProductManager()
        self.application: Application = None
        self.scheduler = AsyncIOScheduler()
        self._shutdown = False

    def setup_signal_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown"""
        def signal_handler(signum, frame):
            logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
            self._shutdown = True
            if self.application:
                self.application.stop()
            if self.scheduler.running:
                self.scheduler.shutdown()
            sys.exit(0)

        signal.signal(signal.SIGINT, signal_handler)
        signal.signal(signal.SIGTERM, signal_handler)

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        await self.db.add_user(user.id, user.username, user.first_name)

        welcome_text = (
            f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø *Freshly Bot* ‚Äî —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —Å—Ä–æ–∫–∞–º –≥–æ–¥–Ω–æ—Å—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤.\n\n"
            "üìå **–ß—Ç–æ —è —É–º–µ—é:**\n"
            "‚Ä¢ üìã –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç —Å –¥–∞—Ç–æ–π –ø–æ–∫—É–ø–∫–∏\n"
            "‚Ä¢ ‚è≥ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å—Ä–æ–∫–∏ –≥–æ–¥–Ω–æ—Å—Ç–∏\n"
            "‚Ä¢ üõéÔ∏è –£–≤–µ–¥–æ–º–ª—è—Ç—å –∑–∞ –¥–µ–Ω—å –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å—Ä–æ–∫–∞\n"
            "‚Ä¢ üçΩÔ∏è –ü–æ–¥—Å–∫–∞–∑—ã–≤–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç—ã –¥–ª—è —Å–∫–æ—Ä–æ–ø–æ—Ä—Ç—è—â–∏—Ö—Å—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤\n"
            "‚Ä¢ üóëÔ∏è –û—á–∏—â–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏\n\n"
            f"‚úÖ –ú–∞–∫—Å–∏–º—É–º {Config.MAX_PRODUCTS} –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ\n\n"
            "üéØ –ù–∞—á–Ω–∏ —Å –∫–Ω–æ–ø–∫–∏ *‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç*!"
        )

        keyboard = [
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç", callback_data="add_product")],
            [InlineKeyboardButton("üìã –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫", callback_data="list_products")],
            [InlineKeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å—ë", callback_data="clear_products")],
            [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        if update.message:
            await update.message.reply_text(welcome_text, parse_mode="Markdown", reply_markup=reply_markup)
        else:
            await update.callback_query.edit_message_text(welcome_text, parse_mode="Markdown", reply_markup=reply_markup)

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏"""
        help_text = (
            "üìñ **–ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:**\n\n"
            "‚Ä¢ /start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
            "‚Ä¢ /list - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤\n"
            "‚Ä¢ /add - –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç\n"
            "‚Ä¢ /clear - –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã\n"
            "‚Ä¢ /help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
            "üí° **–°–æ–≤–µ—Ç—ã:**\n"
            "‚Ä¢ –ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É –ø–æ–∫—É–ø–∫–∏ –∏–ª–∏ –≤–≤–µ—Å—Ç–∏ —Å–≤–æ—é\n"
            "‚Ä¢ –ë–æ—Ç —É–≤–µ–¥–æ–º–∏—Ç –∑–∞ –¥–µ–Ω—å –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å—Ä–æ–∫–∞\n"
            "‚Ä¢ –î–ª—è –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç —Ä–µ—Ü–µ–ø—Ç—ã"
        )
        
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if update.message:
            await update.message.reply_text(help_text, parse_mode="Markdown", reply_markup=reply_markup)
        else:
            await update.callback_query.edit_message_text(help_text, parse_mode="Markdown", reply_markup=reply_markup)

    async def show_main_menu_with_photo(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å —Ñ–æ—Ç–æ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–∞"""
        image_url = "https://i.imgur.com/OjC80T8.jpeg"  # –í–∞—à–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∞

        text = "üéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        keyboard = [
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç", callback_data="add_product")],
            [InlineKeyboardButton("üìã –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫", callback_data="list_products")],
            [InlineKeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å—ë", callback_data="clear_products")],
            [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        try:
            if update.callback_query:
                await update.callback_query.message.delete()
                await update.callback_query.message.reply_photo(
                    photo=image_url,
                    caption=text,
                    reply_markup=reply_markup
                )
            else:
                await update.message.reply_photo(
                    photo=image_url,
                    caption=text,
                    reply_markup=reply_markup
                )
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ: {e}")
            await self._edit_or_reply(update, text, reply_markup)

    async def list_products(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å –∫–Ω–æ–ø–∫–æ–π '–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é' ‚Äî –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è"""
        user = update.effective_user
        products = await self.db.get_user_products(user.id)

        if not products:
            text = "üì≠ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤."
        else:
            text = "üìã **–í–∞—à–∏ –ø—Ä–æ–¥—É–∫—Ç—ã:**\n\n"
            today = datetime.now().date()
            
            for product_name, purchase_date, expiration_date in products:
                if isinstance(purchase_date, str):
                    purchase_date = datetime.strptime(purchase_date, "%Y-%m-%d").date()
                if isinstance(expiration_date, str):
                    expiration_date = datetime.strptime(expiration_date, "%Y-%m-%d").date()
                
                days_left = (expiration_date - today).days
                status, status_text = self._get_expiration_status(days_left)
                
                text += f"{status} **{product_name}**\n"
                text += f"   üìÖ –ö—É–ø–ª–µ–Ω: {purchase_date.strftime('%d.%m.%Y')}\n"
                text += f"   ‚è≥ –°—Ä–æ–∫ –¥–æ: {expiration_date.strftime('%d.%m.%Y')} ({status_text})\n\n"
            
            products_count = await self.db.get_products_count(user.id)
            text += f"üìä –í—Å–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {products_count}/{Config.MAX_PRODUCTS}"

        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        try:
            if update.callback_query:
                await update.callback_query.message.delete()
                await update.callback_query.message.reply_text(
                    text=text,
                    reply_markup=reply_markup,
                    parse_mode="Markdown"
                )
            else:
                await update.message.reply_text(
                    text=text,
                    reply_markup=reply_markup,
                    parse_mode="Markdown"
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞: {e}")
            await self._edit_or_reply(update, text, reply_markup)

    def _get_expiration_status(self, days_left: int) -> tuple:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∏ —Ç–µ–∫—Å—Ç –¥–ª—è —Å—Ä–æ–∫–∞ –≥–æ–¥–Ω–æ—Å—Ç–∏"""
        if days_left < 0:
            return "üî¥", "–ü–†–û–°–†–û–ß–ï–ù–û"
        elif days_left == 0:
            return "üî¥", "–ò—Å—Ç–µ–∫–∞–µ—Ç —Å–µ–≥–æ–¥–Ω—è"
        elif days_left == 1:
            return "üü†", "–ò—Å—Ç–µ–∫–∞–µ—Ç –∑–∞–≤—Ç—Ä–∞"
        elif days_left <= 3:
            return "üü°", f"–ò—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ {days_left} –¥–Ω—è"
        else:
            return "üü¢", f"–û—Å—Ç–∞–ª–æ—Å—å {days_left} –¥–Ω–µ–π"

    async def clear_products(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤"""
        user = update.effective_user
        await self.db.clear_user_products(user.id)

        await self._edit_or_reply(update, "‚úÖ –í—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã —É–¥–∞–ª–µ–Ω—ã!")
        await asyncio.sleep(1)
        await self.show_main_menu_with_photo(update, context)

    async def add_product_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞"""
        user = update.effective_user
        
        if await self.db.get_products_count(user.id) >= Config.MAX_PRODUCTS:
            await self._edit_or_reply(update, f"‚ùå –õ–∏–º–∏—Ç {Config.MAX_PRODUCTS} –ø—Ä–æ–¥—É–∫—Ç–æ–≤. –û—á–∏—Å—Ç–∏—Ç–µ —Å–ø–∏—Å–æ–∫.")
            await asyncio.sleep(2)
            await self.show_main_menu_with_photo(update, context)
            return ConversationHandler.END

        keyboard = []
        categories = self.product_manager.get_product_categories()
        
        for category in sorted(categories):
            category_products = self.product_manager.get_products_by_category(category)
            if category_products:
                keyboard.append([InlineKeyboardButton(
                    f"üìÅ {category.capitalize()}", callback_data=f"category_{category}")])
                
                for i in range(0, len(category_products), 2):
                    row = []
                    for j in range(2):
                        if i + j < len(category_products):
                            product = category_products[i + j]
                            row.append(InlineKeyboardButton(
                                product.capitalize(), 
                                callback_data=f"product_{product}"
                            ))
                    if row:
                        keyboard.append(row)
                keyboard.append([])
        
        if keyboard and not keyboard[-1]:
            keyboard.pop()
            
        keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")])

        reply_markup = InlineKeyboardMarkup(keyboard)
        await self._edit_or_reply(update, "üì¶ –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç:", reply_markup)
        return WAITING_PRODUCT

    async def handle_custom_date_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –¥–∞—Ç—ã"""
        try:
            date_str = update.message.text.strip()
            
            if not re.match(r'^\d{1,2}\.\d{1,2}\.\d{4}$', date_str):
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")
                return WAITING_CUSTOM_DATE
            
            purchase_date = datetime.strptime(date_str, "%d.%m.%Y")
            
            if purchase_date.date() > datetime.now().date():
                await update.message.reply_text("‚ùå –î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º!")
                return WAITING_CUSTOM_DATE
            
            product_name = context.user_data.get('current_product')
            if not product_name:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –ø—Ä–æ–¥—É–∫—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω.")
                return ConversationHandler.END
            
            success = await self.db.add_product(update.effective_user.id, product_name, purchase_date)
            if success:
                shelf_life = self.product_manager.get_products_data()[product_name]['shelf_life']
                expiration_date = purchase_date + timedelta(days=shelf_life)
                days_left = (expiration_date.date() - datetime.now().date()).days
                
                msg = (f"‚úÖ **{product_name}** –¥–æ–±–∞–≤–ª–µ–Ω!\n"
                      f"üìÖ –°—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏: {expiration_date.strftime('%d.%m.%Y')}\n"
                      f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {days_left}")
            else:
                msg = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞."
            
            await update.message.reply_text(msg, parse_mode="Markdown")
            await asyncio.sleep(2)
            await self.show_main_menu_with_photo(update, context)
            
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞.")
            return WAITING_CUSTOM_DATE
        
        return ConversationHandler.END

    async def button_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()

        if query.data == "back_to_menu":
            await self.show_main_menu_with_photo(update, context)
            return ConversationHandler.END

        elif query.data == "clear_products":
            await self.clear_products(update, context)
            return ConversationHandler.END

        elif query.data == "list_products":
            await self.list_products(update, context)
            return ConversationHandler.END

        elif query.data == "help":
            await self.help_command(update, context)
            return ConversationHandler.END

        elif query.data == "cancel":
            await query.edit_message_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
            await asyncio.sleep(1)
            await self.show_main_menu_with_photo(update, context)
            return ConversationHandler.END

        elif query.data.startswith("category_"):
            category = query.data[9:]
            products = self.product_manager.get_products_by_category(category)
            
            keyboard = []
            for i in range(0, len(products), 2):
                row = []
                for j in range(2):
                    if i + j < len(products):
                        product = products[i + j]
                        row.append(InlineKeyboardButton(
                            product.capitalize(), 
                            callback_data=f"product_{product}"
                        ))
                if row:
                    keyboard.append(row)
            
            keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="back_to_categories")])
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                f"üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç:",
                reply_markup=reply_markup
            )
            return WAITING_PRODUCT

        elif query.data == "back_to_categories":
            return await self.add_product_start(update, context)

        elif query.data.startswith("product_"):
            product_name = query.data[8:]
            context.user_data['current_product'] = product_name

            keyboard = [
                [InlineKeyboardButton("üìÖ –°–µ–≥–æ–¥–Ω—è", callback_data="today")],
                [InlineKeyboardButton("‚è™ –í—á–µ—Ä–∞", callback_data="yesterday")],
                [InlineKeyboardButton("‚è™ 2 –¥–Ω—è –Ω–∞–∑–∞–¥", callback_data="two_days_ago")],
                [InlineKeyboardButton("üìÖ –í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É", callback_data="custom_date")],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_product"),
                 InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            shelf_life = self.product_manager.get_products_data()[product_name]['shelf_life']
            
            await query.edit_message_text(
                f"üì¶ –ü—Ä–æ–¥—É–∫—Ç: **{product_name}**\n"
                f"‚è≥ –°—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏: {shelf_life} –¥–Ω–µ–π\n"
                f"üìÜ –ö–æ–≥–¥–∞ –≤—ã –µ–≥–æ –∫—É–ø–∏–ª–∏?",
                reply_markup=reply_markup,
                parse_mode="Markdown"
            )
            return WAITING_DATE

        elif query.data == "back_to_product":
            return await self.add_product_start(update, context)

        elif query.data == "custom_date":
            await query.edit_message_text(
                "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø–æ–∫—É–ø–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: 25.12.2024"
            )
            return WAITING_CUSTOM_DATE

        elif query.data in ["today", "yesterday", "two_days_ago"]:
            product_name = context.user_data.get('current_product')
            if not product_name:
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –ø—Ä–æ–¥—É–∫—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω.")
                await asyncio.sleep(1)
                await self.show_main_menu_with_photo(update, context)
                return ConversationHandler.END

            if query.data == "today":
                purchase_date = datetime.now()
            elif query.data == "yesterday":
                purchase_date = datetime.now() - timedelta(days=1)
            elif query.data == "two_days_ago":
                purchase_date = datetime.now() - timedelta(days=2)

            success = await self.db.add_product(query.from_user.id, product_name, purchase_date)
            if success:
                shelf_life = self.product_manager.get_products_data()[product_name]['shelf_life']
                expiration_date = purchase_date + timedelta(days=shelf_life)
                days_left = (expiration_date.date() - datetime.now().date()).days
                
                msg = (f"‚úÖ **{product_name}** –¥–æ–±–∞–≤–ª–µ–Ω!\n"
                      f"üìÖ –°—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏: {expiration_date.strftime('%d.%m.%Y')}\n"
                      f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {days_left}")
            else:
                msg = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞."

            await query.edit_message_text(msg, parse_mode="Markdown")
            await asyncio.sleep(2)
            await self.show_main_menu_with_photo(update, context)
            return ConversationHandler.END

        elif query.data == "add_product":
            return await self.add_product_start(update, context)

        else:
            await query.edit_message_text("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")
            await asyncio.sleep(1)
            await self.show_main_menu_with_photo(update, context)
            return ConversationHandler.END

    async def _edit_or_reply(self, update: Update, text: str, reply_markup=None) -> None:
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            if hasattr(update, 'callback_query') and update.callback_query:
                await update.callback_query.edit_message_text(
                    text, reply_markup=reply_markup, parse_mode="Markdown"
                )
            else:
                await update.message.reply_text(
                    text, reply_markup=reply_markup, parse_mode="Markdown"
                )
        except (BadRequest, Exception) as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å: {e}")
            try:
                if hasattr(update, 'callback_query') and update.callback_query:
                    await update.callback_query.message.reply_text(
                        text, reply_markup=reply_markup, parse_mode="Markdown"
                    )
                else:
                    await update.message.reply_text(
                        text, reply_markup=reply_markup, parse_mode="Markdown"
                    )
            except Exception as e2:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e2}")

    async def check_expiring_products(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–∫–æ—Ä–æ–ø–æ—Ä—Ç—è—â–∏—Ö—Å—è –ø—Ä–æ–¥—É–∫—Ç–∞—Ö"""
        try:
            expiring = await self.db.get_expiring_products()
            for user_id, _, first_name, product_name, _ in expiring:
                try:
                    await self.application.bot.send_chat_action(user_id, "typing")
                    
                    category = self.product_manager.get_products_data()[product_name]['category']
                    tip = self.product_manager.get_product_tips().get(category, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ–≥–æ —Å–µ–≥–æ–¥–Ω—è!")
                    
                    msg = (f"‚ö†Ô∏è **{product_name}** –∏—Å–ø–æ—Ä—Ç–∏—Ç—Å—è –∑–∞–≤—Ç—Ä–∞!\n\n"
                          f"üí° **–°–æ–≤–µ—Ç:** {tip}\n\n"
                          f"üïê –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç —Å–µ–≥–æ–¥–Ω—è!")
                    
                    await self.application.bot.send_message(user_id, msg, parse_mode="Markdown")
                    await self.db.mark_as_notified(user_id, product_name)
                    
                except Forbidden:
                    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {user_id}: {e}")
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {e}")

    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        conv_handler = ConversationHandler(
            entry_points=[
                CallbackQueryHandler(self.button_handler, pattern="^add_product$"),
                CommandHandler("add", self.add_product_start)
            ],
            states={
                WAITING_PRODUCT: [
                    CallbackQueryHandler(self.button_handler, pattern=r"^(product_.+|category_.+|back_to_categories|cancel)$")
                ],
                WAITING_DATE: [
                    CallbackQueryHandler(self.button_handler, pattern=r"^(today|yesterday|two_days_ago|custom_date|back_to_product|cancel)$")
                ],
                WAITING_CUSTOM_DATE: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_custom_date_input)
                ]
            },
            fallbacks=[
                CallbackQueryHandler(self.button_handler, pattern="^cancel$"),
                CommandHandler("start", self.start)
            ],
            per_message=False,
            allow_reentry=True
        )

        self.application.add_handler(CommandHandler("start", self.start))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("list", self.list_products))
        self.application.add_handler(CommandHandler("clear", self.clear_products))
        
        self.application.add_handler(CallbackQueryHandler(
            self.button_handler, 
            pattern=r"^(back_to_menu|list_products|clear_products|help|add_product)$"
        ))
        
        self.application.add_handler(conv_handler)

    def setup_scheduler(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á"""
        self.scheduler.add_job(
            self.check_expiring_products, 
            CronTrigger(hour=Config.NOTIFICATION_HOUR, minute=Config.NOTIFICATION_MINUTE),
            id='daily_check'
        )

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤"""
        self.setup_signal_handlers()
        
        self.application = Application.builder().token(self.token).build()
        self.setup_handlers()
        self.setup_scheduler()
        
        self.scheduler.start()
        logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        
        try:
            self.application.run_polling(
                drop_pending_updates=True,
                allowed_updates=Update.ALL_TYPES,
                close_loop=False
            )
        except Conflict as e:
            logger.error(f"–ö–æ–Ω—Ñ–ª–∏–∫—Ç: {e}")
            logger.info("‚ö†Ô∏è  –í–æ–∑–º–æ–∂–Ω–æ, —É–∂–µ –∑–∞–ø—É—â–µ–Ω –¥—Ä—É–≥–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        finally:
            if self.scheduler.running:
                self.scheduler.shutdown()
            logger.info("‚èπÔ∏è –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if os.name == 'posix':
        os.system('pkill -f "python.*bot.py" 2>/dev/null')
        os.system('pkill -f "python.*freshly" 2>/dev/null')
    
    BOT_TOKEN = os.environ.get('TELEGRAM_BOT_TOKEN')
    if not BOT_TOKEN:
        logger.error("‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN")
        return
    
    try:
        import psutil
        for proc in psutil.process_iter(['pid', 'name', 'cmdline']):
            if proc.info['cmdline'] and any('bot.py' in cmd for cmd in proc.info['cmdline']):
                if proc.info['pid'] != os.getpid():
                    logger.info(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω –∑–∞–ø—É—â–µ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –±–æ—Ç–∞ (PID: {proc.info['pid']}), –∑–∞–≤–µ—Ä—à–∞–µ–º...")
                    proc.terminate()
                    proc.wait(timeout=5)
    except (ImportError, psutil.NoSuchProcess, psutil.TimeoutExpired):
        pass
    
    bot = FreshlyBot(BOT_TOKEN)
    bot.run()

if __name__ == '__main__':
    main()
