import logging
import sqlite3
import json
from datetime import datetime, timedelta
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    Application, CommandHandler, MessageHandler, 
    filters, ContextTypes, ConversationHandler
)
from apscheduler.schedulers.background import BackgroundScheduler
from apscheduler.triggers.cron import CronTrigger

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
WAITING_PHOTO, WAITING_DATE = range(2)

class Database:
    def __init__(self):
        self.init_db()
        self.load_products_data()
        self.load_recipes_data()
    
    def init_db(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        with sqlite3.connect('products.db') as conn:
            cursor = conn.cursor()
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS users (
                    user_id INTEGER PRIMARY KEY,
                    username TEXT,
                    premium INTEGER DEFAULT 0,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS products (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER,
                    product_name TEXT,
                    purchase_date DATE,
                    expiration_date DATE,
                    notified INTEGER DEFAULT 0,
                    FOREIGN KEY (user_id) REFERENCES users (user_id)
                )
            ''')
            conn.commit()
    
    def load_products_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö"""
        products = {
            "–º–æ–ª–æ–∫–æ": {"shelf_life": 7, "category": "–º–æ–ª–æ—á–Ω—ã–µ"},
            "–∫–µ—Ñ–∏—Ä": {"shelf_life": 5, "category": "–º–æ–ª–æ—á–Ω—ã–µ"},
            "—Å—ã—Ä": {"shelf_life": 14, "category": "–º–æ–ª–æ—á–Ω—ã–µ"},
            "—Ç–≤–æ—Ä–æ–≥": {"shelf_life": 5, "category": "–º–æ–ª–æ—á–Ω—ã–µ"},
            "—Å–º–µ—Ç–∞–Ω–∞": {"shelf_life": 7, "category": "–º–æ–ª–æ—á–Ω—ã–µ"},
            "–π–æ–≥—É—Ä—Ç": {"shelf_life": 10, "category": "–º–æ–ª–æ—á–Ω—ã–µ"},
            "—è–π—Ü–∞": {"shelf_life": 30, "category": "—è–π—Ü–∞"},
            "–∫—É—Ä–∏—Ü–∞": {"shelf_life": 3, "category": "–º—è—Å–æ"},
            "–≥–æ–≤—è–¥–∏–Ω–∞": {"shelf_life": 4, "category": "–º—è—Å–æ"},
            "—Å–≤–∏–Ω–∏–Ω–∞": {"shelf_life": 4, "category": "–º—è—Å–æ"},
            "—Ä—ã–±–∞": {"shelf_life": 2, "category": "—Ä—ã–±–∞"},
            "—Ö–ª–µ–±": {"shelf_life": 5, "category": "—Ö–ª–µ–±"}
        }
        self.products_data = products
    
    def load_recipes_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ—Ü–µ–ø—Ç–∞—Ö"""
        recipes = {
            "–º–æ–ª–æ—á–Ω—ã–µ": [
                {
                    "name": "–°—ã—Ä–Ω–∏–∫–∏",
                    "ingredients": ["—Ç–≤–æ—Ä–æ–≥ 500–≥", "—è–π—Ü–æ 2—à—Ç", "–º—É–∫–∞ 4—Å—Ç.–ª", "—Å–∞—Ö–∞—Ä 2—Å—Ç.–ª"],
                    "steps": ["–°–º–µ—à–∞—Ç—å —Ç–≤–æ—Ä–æ–≥ —Å —è–π—Ü–∞–º–∏", "–î–æ–±–∞–≤–∏—Ç—å –º—É–∫—É –∏ —Å–∞—Ö–∞—Ä", "–ñ–∞—Ä–∏—Ç—å –Ω–∞ —Å–∫–æ–≤–æ—Ä–æ–¥–µ"],
                    "time": "30 –º–∏–Ω",
                    "portions": 4
                }
            ],
            "–º—è—Å–æ": [
                {
                    "name": "–ö—É—Ä–∏—Ü–∞ —Å –æ–≤–æ—â–∞–º–∏",
                    "ingredients": ["–∫—É—Ä–∏—Ü–∞ 500–≥", "–æ–≤–æ—â–∏ 300–≥", "—Å–ø–µ—Ü–∏–∏"],
                    "steps": ["–û–±–∂–∞—Ä–∏—Ç—å –∫—É—Ä–∏—Ü—É", "–î–æ–±–∞–≤–∏—Ç—å –æ–≤–æ—â–∏", "–¢—É—à–∏—Ç—å 20 –º–∏–Ω"],
                    "time": "40 –º–∏–Ω",
                    "portions": 3
                }
            ]
        }
        self.recipes_data = recipes
    
    def add_user(self, user_id, username):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        with sqlite3.connect('products.db') as conn:
            cursor = conn.cursor()
            cursor.execute('''
                INSERT OR IGNORE INTO users (user_id, username) 
                VALUES (?, ?)
            ''', (user_id, username))
            conn.commit()
    
    def add_product(self, user_id, product_name, purchase_date):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞"""
        if product_name not in self.products_data:
            return False
        
        shelf_life = self.products_data[product_name]['shelf_life']
        expiration_date = purchase_date + timedelta(days=shelf_life)
        
        with sqlite3.connect('products.db') as conn:
            cursor = conn.cursor()
            cursor.execute('''
                INSERT INTO products (user_id, product_name, purchase_date, expiration_date)
                VALUES (?, ?, ?, ?)
            ''', (user_id, product_name, purchase_date.date(), expiration_date.date()))
            conn.commit()
        
        return True
    
    def get_user_products(self, user_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        with sqlite3.connect('products.db') as conn:
            cursor = conn.cursor()
            cursor.execute('''
                SELECT product_name, purchase_date, expiration_date 
                FROM products 
                WHERE user_id = ? 
                ORDER BY expiration_date
            ''', (user_id,))
            return cursor.fetchall()
    
    def get_products_count(self, user_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        with sqlite3.connect('products.db') as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT COUNT(*) FROM products WHERE user_id = ?', (user_id,))
            return cursor.fetchone()[0]
    
    def clear_user_products(self, user_id):
        """–û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        with sqlite3.connect('products.db') as conn:
            cursor = conn.cursor()
            cursor.execute('DELETE FROM products WHERE user_id = ?', (user_id,))
            conn.commit()
    
    def get_expiring_products(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤, —Å—Ä–æ–∫ –∫–æ—Ç–æ—Ä—ã—Ö –∏—Å—Ç–µ–∫–∞–µ—Ç –∑–∞–≤—Ç—Ä–∞"""
        tomorrow = (datetime.now() + timedelta(days=1)).date()
        with sqlite3.connect('products.db') as conn:
            cursor = conn.cursor()
            cursor.execute('''
                SELECT p.user_id, u.username, p.product_name, p.expiration_date
                FROM products p
                JOIN users u ON p.user_id = u.user_id
                WHERE p.expiration_date = ? AND p.notified = 0
            ''', (tomorrow,))
            return cursor.fetchall()
    
    def mark_as_notified(self, user_id, product_name):
        """–ü–æ–º–µ—Ç–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç –∫–∞–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–Ω—ã–π"""
        with sqlite3.connect('products.db') as conn:
            cursor = conn.cursor()
            cursor.execute('''
                UPDATE products 
                SET notified = 1 
                WHERE user_id = ? AND product_name = ?
            ''', (user_id, product_name))
            conn.commit()
    
    def get_recipes_by_category(self, category):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        return self.recipes_data.get(category, [])
    
    def get_product_category(self, product_name):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞"""
        if product_name in self.products_data:
            return self.products_data[product_name]['category']
        return None

class FreshlyBot:
    def __init__(self):
        self.db = Database()
        self.application = None
        self.setup_scheduler()
    
    def setup_scheduler(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        self.scheduler = BackgroundScheduler()
        self.scheduler.add_job(
            self.check_expiring_products,
            trigger=CronTrigger(hour=10, minute=0),
            id='daily_check'
        )
    
    def check_expiring_products(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å –∏—Å—Ç–µ–∫–∞—é—â–∏–º —Å—Ä–æ–∫–æ–º"""
        try:
            expiring_products = self.db.get_expiring_products()
            
            for user_id, username, product_name, expiration_date in expiring_products:
                try:
                    category = self.db.get_product_category(product_name)
                    recipes = self.db.get_recipes_by_category(category)
                    
                    message = f"‚ö†Ô∏è –¢–≤–æ–π {product_name} –∏—Å–ø–æ—Ä—Ç–∏—Ç—Å—è –∑–∞–≤—Ç—Ä–∞!\n"
                    
                    if recipes:
                        recipe = recipes[0]
                        message += f"üç≥ –ü–æ–ø—Ä–æ–±—É–π {recipe['name']}!\n"
                        message += f"‚è± –í—Ä–µ–º—è: {recipe['time']}\n"
                        message += f"üçΩ –ü–æ—Ä—Ü–∏–∏: {recipe['portions']}"
                    
                    # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ –±–æ—Ç–∞
                    if self.application:
                        self.application.bot.send_message(
                            chat_id=user_id,
                            text=message
                        )
                    
                    self.db.mark_as_notified(user_id, product_name)
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {e}")
    
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        self.db.add_user(user.id, user.username)
        
        welcome_text = f"""
üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø Freshly Bot ‚Äî —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—é —Å—Ä–æ–∫–æ–≤ –≥–æ–¥–Ω–æ—Å—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤.

üì∏ **–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:**
1. –°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π –ø—Ä–æ–¥—É–∫—Ç
2. –£–∫–∞–∂–∏ –¥–∞—Ç—É –ø–æ–∫—É–ø–∫–∏
3. –ü–æ–ª—É—á–∞–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –∏—Å—Ç–µ—á–µ–Ω–∏–µ–º —Å—Ä–æ–∫–∞

üìã **–ö–æ–º–∞–Ω–¥—ã:**
/start - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/list - —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤
/clear - –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã

üéØ –ù–∞—á–Ω–∏ —Å –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –ø—Ä–æ–¥—É–∫—Ç–∞!
        """
        
        keyboard = [
            [KeyboardButton("üì∏ –°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç")],
            [KeyboardButton("üìã –ú–æ–∏ –ø—Ä–æ–¥—É–∫—Ç—ã")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text(welcome_text, reply_markup=reply_markup)
    
    async def handle_photo(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞"""
        user = update.effective_user
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–∏
        if self.db.get_products_count(user.id) >= 5:
            await update.message.reply_text(
                "‚ùå –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–∏ (5 –ø—Ä–æ–¥—É–∫—Ç–æ–≤). "
                "–£–¥–∞–ª–∏—Ç–µ —Å—Ç–∞—Ä—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –∫–æ–º–∞–Ω–¥–æ–π /clear"
            )
            return ConversationHandler.END
        
        # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞
        product_name = "–º–æ–ª–æ–∫–æ"
        context.user_data['current_product'] = product_name
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É –ø–æ–∫—É–ø–∫–∏
        keyboard = [
            [
                KeyboardButton("–°–µ–≥–æ–¥–Ω—è"),
                KeyboardButton("–í—á–µ—Ä–∞"),
                KeyboardButton("–ü–æ–∑–∞–≤—á–µ—Ä–∞")
            ],
            [KeyboardButton("–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é (–î–î.–ú–ú.–ì–ì–ì–ì)")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text(
            f"üì¶ –†–∞—Å–ø–æ–∑–Ω–∞–Ω –ø—Ä–æ–¥—É–∫—Ç: **{product_name}**\n"
            "üìÖ –ö–æ–≥–¥–∞ –≤—ã –∫—É–ø–∏–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ–¥—É–∫—Ç?",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        
        return WAITING_DATE
    
    async def handle_date(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã –ø–æ–∫—É–ø–∫–∏"""
        user = update.effective_user
        user_input = update.message.text
        product_name = context.user_data.get('current_product')
        
        try:
            if user_input == "–°–µ–≥–æ–¥–Ω—è":
                purchase_date = datetime.now()
            elif user_input == "–í—á–µ—Ä–∞":
                purchase_date = datetime.now() - timedelta(days=1)
            elif user_input == "–ü–æ–∑–∞–≤—á–µ—Ä–∞":
                purchase_date = datetime.now() - timedelta(days=2)
            else:
                purchase_date = datetime.strptime(user_input, '%d.%m.%Y')
            
            success = self.db.add_product(user.id, product_name, purchase_date)
            
            if success:
                shelf_life = self.db.products_data[product_name]['shelf_life']
                expiration_date = purchase_date + timedelta(days=shelf_life)
                
                await update.message.reply_text(
                    f"‚úÖ –ü—Ä–æ–¥—É–∫—Ç –¥–æ–±–∞–≤–ª–µ–Ω!\n"
                    f"üì¶ **{product_name}**\n"
                    f"üìÖ –°—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏ –¥–æ: {expiration_date.strftime('%d.%m.%Y')}\n"
                    f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {(expiration_date.date() - datetime.now().date()).days}"
                )
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞")
        
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")
            return WAITING_DATE
        
        return ConversationHandler.END
    
    async def list_products(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤"""
        user = update.effective_user
        products = self.db.get_user_products(user.id)
        
        if not products:
            await update.message.reply_text("üì≠ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤.")
            return
        
        message = "üìã **–í–∞—à–∏ –ø—Ä–æ–¥—É–∫—Ç—ã:**\n\n"
        
        for product_name, purchase_date, expiration_date in products:
            days_left = (expiration_date - datetime.now().date()).days
            
            if days_left < 0:
                status = "üî¥"
                status_text = "–ü–†–û–°–†–û–ß–ï–ù–û"
            elif days_left == 0:
                status = "üî¥"
                status_text = "–ò—Å—Ç–µ–∫–∞–µ—Ç —Å–µ–≥–æ–¥–Ω—è"
            elif days_left == 1:
                status = "üü†"
                status_text = "–ò—Å—Ç–µ–∫–∞–µ—Ç –∑–∞–≤—Ç—Ä–∞"
            elif days_left <= 3:
                status = "üü°"
                status_text = f"–ò—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ {days_left} –¥–Ω—è"
            else:
                status = "üü¢"
                status_text = f"–û—Å—Ç–∞–ª–æ—Å—å {days_left} –¥–Ω–µ–π"
            
            message += f"{status} **{product_name}**\n"
            message += f"   üìÖ –î–æ {expiration_date}\n"
            message += f"   ‚è∞ {status_text}\n\n"
        
        await update.message.reply_text(message, parse_mode='Markdown')
    
    async def clear_products(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤"""
        user = update.effective_user
        self.db.clear_user_products(user.id)
        await update.message.reply_text("‚úÖ –í—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã —É–¥–∞–ª–µ–Ω—ã!")
    
    async def cancel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        await update.message.reply_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        return ConversationHandler.END
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        # ConversationHandler –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞
        conv_handler = ConversationHandler(
            entry_points=[
                MessageHandler(filters.PHOTO, self.handle_photo),
                MessageHandler(filters.Regex("^üì∏ –°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç$"), self.handle_photo)
            ],
            states={
                WAITING_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_date)]
            },
            fallbacks=[CommandHandler("cancel", self.cancel)]
        )
        
        # –ö–æ–º–∞–Ω–¥—ã
        self.application.add_handler(CommandHandler("start", self.start))
        self.application.add_handler(CommandHandler("list", self.list_products))
        self.application.add_handler(CommandHandler("clear", self.clear_products))
        self.application.add_handler(conv_handler)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
        self.application.add_handler(
            MessageHandler(filters.Regex("^üìã –ú–æ–∏ –ø—Ä–æ–¥—É–∫—Ç—ã$"), self.list_products)
        )
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        BOT_TOKEN = os.getenv('BOT_TOKEN')
        if not BOT_TOKEN:
            logger.error("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é BOT_TOKEN")
            return
        
        self.application = Application.builder().token(BOT_TOKEN).build()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        self.setup_handlers()
        
        # –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        self.scheduler.start()
        
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        self.application.run_polling()

if __name__ == '__main__':
    bot = FreshlyBot()
    bot.run()
