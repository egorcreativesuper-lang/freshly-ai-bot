import logging
import sqlite3
import os
import re
import random
from datetime import datetime, timedelta
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove, KeyboardButton
from telegram.ext import (
    Application, CommandHandler, MessageHandler, ContextTypes, filters, ConversationHandler
)
from apscheduler.schedulers.background import BackgroundScheduler
from apscheduler.jobstores.base import JobLookupError
import json

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
CHOOSING_PRODUCT_NAME, CHOOSING_PURCHASE_DATE, CHOOSING_EXPIRATION_DATE, BROWSE_PRODUCTS, BROWSE_PRODUCT_DETAIL = range(5)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞
TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
if not TOKEN:
    logger.error("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω! –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é TELEGRAM_BOT_TOKEN –≤ Render ‚Üí Environment")
    exit(1)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
scheduler = BackgroundScheduler()
scheduler.start()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('products.db')
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS products (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            name TEXT NOT NULL,
            purchase_date TEXT NOT NULL,
            expiration_days INTEGER NOT NULL,
            added_at TEXT NOT NULL,
            expires_at TEXT NOT NULL,
            notified BOOLEAN DEFAULT FALSE
        )
    ''')
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
    cursor.execute('CREATE INDEX IF NOT EXISTS idx_user_id ON products(user_id)')
    cursor.execute('CREATE INDEX IF NOT EXISTS idx_expires_at ON products(expires_at)')
    conn.commit()
    conn.close()

init_db()

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤
def load_recipes():
    try:
        with open('recipes.json', 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        logger.warning("–§–∞–π–ª recipes.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return []

RECIPES = load_recipes()

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def create_safe_callback_data(product_name, product_id):
    """–°–æ–∑–¥–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã–π callback_data –±–µ–∑ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤ (–¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)"""
    safe_name = re.sub(r'[^a-zA-Z0-9–∞-—è–ê-–Ø]', '_', product_name)
    return f"recipe_{safe_name}_{product_id}"

def parse_callback_data(callback_data):
    """–ü–∞—Ä—Å–∏—Ç callback_data –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç product_name –∏ product_id (–¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)"""
    try:
        parts = callback_data.split('_')
        if len(parts) >= 3:
            product_name = parts[1].replace('_', ' ')  # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–±–µ–ª—ã
            product_id = parts[2]
            return product_name, product_id
        return None, None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ callback_ {e}")
        return None, None

async def recognize_product(photo_path: str) -> str:
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞"""
    products = ["–ú–æ–ª–æ–∫–æ", "–•–ª–µ–±", "–Ø–π—Ü–∞", "–°—ã—Ä", "–ô–æ–≥—É—Ä—Ç", "–ú—è—Å–æ", "–†—ã–±–∞", "–û–≤–æ—â–∏", "–§—Ä—É–∫—Ç—ã"]
    return random.choice(products)

def get_main_menu_keyboard():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ã—á–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
    keyboard = [
        ["üì∏ –î–æ–±–∞–≤–∏—Ç—å –ø–æ —Ñ–æ—Ç–æ", "‚úçÔ∏è –î–æ–±–∞–≤–∏—Ç—å –≤—Ä—É—á–Ω—É—é"],
        ["üìã –ú–æ–∏ –ø—Ä–æ–¥—É–∫—Ç—ã", "üö® –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ"],
        ["üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å—ë", "‚ÑπÔ∏è –ü–æ–º–æ—â—å"]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)

def get_cancel_keyboard():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã."""
    keyboard = [["‚ùå –û—Ç–º–µ–Ω–∞"]]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)

def get_back_to_menu_keyboard():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é."""
    keyboard = [["üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)

def schedule_notification(product_id: int, user_id: int, product_name: str, expiration_days: int):
    """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ 1 –¥–µ–Ω—å –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å—Ä–æ–∫–∞"""
    try:
        notify_time = datetime.now() + timedelta(days=expiration_days - 1)
        job_id = f"notify_{user_id}_{product_id}"
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é job –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        try:
            scheduler.remove_job(job_id)
        except JobLookupError:
            pass
            
        scheduler.add_job(
            send_notification,
            'date',
            run_date=notify_time,
            args=[user_id, product_name, product_id],
            id=job_id
        )
        logger.info(f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ {product_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

async def send_notification(user_id: int, product_name: str, product_id: int):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–∫–æ—Ä–æ–º –∏—Å—Ç–µ—á–µ–Ω–∏–∏ —Å—Ä–æ–∫–∞"""
    try:
        from telegram import Bot
        bot = Bot(token=TOKEN)
        
        # –ì–æ—Ç–æ–≤–∏–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (—ç—Ç–æ –∏–Ω–ª–∞–π–Ω, —Ç.–∫. –æ–±—ã—á–Ω—É—é –Ω–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ "—Ç–æ–ª–∫–Ω—É—Ç–æ–º" —Å–æ–æ–±—â–µ–Ω–∏–∏)
        # –ù–æ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –æ–±—ã—á–Ω—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.
        from telegram import InlineKeyboardButton, InlineKeyboardMarkup
        reply_markup = InlineKeyboardMarkup([
            [InlineKeyboardButton("üìñ –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç", callback_data=create_safe_callback_data(product_name, product_id))],
            [InlineKeyboardButton("üîï –ë–æ–ª—å—à–µ –Ω–µ –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å", callback_data=f"disable_notify_{product_id}")],
        ])
        
        await bot.send_message(
            chat_id=user_id,
            text=f"‚ö†Ô∏è *{product_name}* –∏—Å–ø–æ—Ä—Ç–∏—Ç—Å—è –∑–∞–≤—Ç—Ä–∞!\n–ü–æ–ø—Ä–æ–±—É–π –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å —á—Ç–æ-–Ω–∏–±—É–¥—å? üë®‚Äçüç≥",
            parse_mode='Markdown',
            reply_markup=reply_markup
        )
        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ {product_name}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –ø–æ–∫–∞–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî Freshly Bot ü§ñ\n"
        "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞—Ç—å –µ–¥—É ‚Äî –∏ –Ω–∏–∫—Ç–æ –Ω–µ —É–∑–Ω–∞–µ—Ç, —á—Ç–æ —É —Ç–µ–±—è –≤ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–µ.\n\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ üëá",
        reply_markup=get_main_menu_keyboard()
    )
    return ConversationHandler.END

async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_menu_keyboard()
    )
    return ConversationHandler.END

# --- –î–∏–∞–ª–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ –í–†–£–ß–ù–£–Æ ---
async def start_add_manually(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ –≤—Ä—É—á–Ω—É—é. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ."""
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '‚ùå –û—Ç–º–µ–Ω–∞'):",
        reply_markup=get_cancel_keyboard()
    )
    return CHOOSING_PRODUCT_NAME

async def choose_product_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–∞—Ç—É –ø–æ–∫—É–ø–∫–∏."""
    user_input = update.message.text.strip()
    if user_input == "‚ùå –û—Ç–º–µ–Ω–∞":
        await cancel(update, context)
        return ConversationHandler.END

    if not user_input:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞.")
        return CHOOSING_PRODUCT_NAME

    context.user_data['product_name'] = user_input
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø–æ–∫—É–ø–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2025-09-23):",
        reply_markup=get_cancel_keyboard()
    )
    return CHOOSING_PURCHASE_DATE

async def choose_purchase_date(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞—Ç—É –ø–æ–∫—É–ø–∫–∏ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–∞—Ç—É –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å—Ä–æ–∫–∞."""
    user_input = update.message.text.strip()
    if user_input == "‚ùå –û—Ç–º–µ–Ω–∞":
        await cancel(update, context)
        return ConversationHandler.END

    try:
        purchase_date = datetime.strptime(user_input, '%Y-%m-%d').date()
        context.user_data['purchase_date'] = purchase_date.isoformat()
    except ValueError:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î.")
        return CHOOSING_PURCHASE_DATE

    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å—Ä–æ–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î:",
        reply_markup=get_cancel_keyboard()
    )
    return CHOOSING_EXPIRATION_DATE

async def choose_expiration_date(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞—Ç—É –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å—Ä–æ–∫–∞, –≤—ã—á–∏—Å–ª—è–µ—Ç —Å—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏ –≤ –¥–Ω—è—Ö –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–æ–¥—É–∫—Ç –≤ –ë–î."""
    user_input = update.message.text.strip()
    if user_input == "‚ùå –û—Ç–º–µ–Ω–∞":
        await cancel(update, context)
        return ConversationHandler.END

    try:
        expires_at = datetime.strptime(user_input, '%Y-%m-%d').date()
        context.user_data['expires_at'] = expires_at.isoformat()
    except ValueError:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î.")
        return CHOOSING_EXPIRATION_DATE

    # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏ –≤ –¥–Ω—è—Ö
    purchase_date = datetime.strptime(context.user_data['purchase_date'], '%Y-%m-%d').date()
    expiration_days = (expires_at - purchase_date).days

    if expiration_days < 0:
        await update.message.reply_text("–î–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –¥–∞—Ç—ã –ø–æ–∫—É–ø–∫–∏. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.", reply_markup=get_main_menu_keyboard())
        return ConversationHandler.END

    context.user_data['expiration_days'] = expiration_days

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    user_id = update.message.from_user.id
    product_name = context.user_data['product_name']
    purchase_date_str = context.user_data['purchase_date']
    expires_at_str = context.user_data['expires_at']

    conn = sqlite3.connect('products.db')
    cursor = conn.cursor()
    added_at = datetime.now().isoformat()

    cursor.execute('''
        INSERT INTO products (user_id, name, purchase_date, expiration_days, added_at, expires_at)
        VALUES (?, ?, ?, ?, ?, ?)
    ''', (user_id, product_name, purchase_date_str, expiration_days, added_at, expires_at_str))
    product_id = cursor.lastrowid
    conn.commit()
    conn.close()

    # –ü–ª–∞–Ω–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    schedule_notification(product_id, user_id, product_name, expiration_days)

    await update.message.reply_text(
        f"‚úÖ –ü—Ä–æ–¥—É–∫—Ç *{product_name}* —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n"
        f"üìÖ –ö—É–ø–ª–µ–Ω–æ: {purchase_date_str}\n"
        f"‚è≥ –ò—Å—Ç–µ–∫–∞–µ—Ç: {expires_at_str} (—á–µ—Ä–µ–∑ {expiration_days} –¥–Ω–µ–π)\n"
        "üîî –ù–∞–ø–æ–º–Ω—é –∑–∞ 1 –¥–µ–Ω—å –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è!",
        parse_mode='Markdown',
        reply_markup=get_main_menu_keyboard()
    )

    return ConversationHandler.END

# --- –î–∏–∞–ª–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ –ü–û –§–û–¢–û ---
async def start_add_by_photo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ —á–µ—Ä–µ–∑ —Ñ–æ—Ç–æ."""
    await update.message.reply_text(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –ø—Ä–æ–¥—É–∫—Ç–∞ (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '‚ùå –û—Ç–º–µ–Ω–∞'):",
        reply_markup=get_cancel_keyboard()
    )
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ –ø—Ä–æ–¥—É–∫—Ç –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –ø–æ —Ñ–æ—Ç–æ
    context.user_data['adding_by_photo'] = True
    return ConversationHandler.END

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–æ—Ç–æ –∏ –Ω–∞—á–∏–Ω–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –¥–∞—Ç—ã –ø–æ–∫—É–ø–∫–∏."""
    if not context.user_data.get('adding_by_photo'):
        # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –ø—Ä–∏—à–ª–æ –≤–Ω–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∏–ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞.", reply_markup=get_main_menu_keyboard())
        return ConversationHandler.END

    try:
        user_id = update.message.from_user.id
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ñ–æ—Ç–æ –µ—Å–ª–∏ –Ω–µ—Ç
        os.makedirs("photos", exist_ok=True)
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
        photo_file = await update.message.photo[-1].get_file()
        file_id = update.message.photo[-1].file_id
        photo_hash = file_id[-10:]  # –ü—Ä–æ—Å—Ç–æ–π —Ö—ç—à
        photo_path = f"photos/photo_{user_id}_{photo_hash}.jpg"
        await photo_file.download_to_drive(photo_path)

        # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç
        product_name = await recognize_product(photo_path)
        
        if not product_name:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!", reply_markup=get_main_menu_keyboard())
            context.user_data.pop('adding_by_photo', None) # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
            return ConversationHandler.END

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–µ –∏–º—è –≤ user_data
        context.user_data['product_name'] = product_name
        context.user_data.pop('adding_by_photo', None) # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
        await update.message.reply_text(
            f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω –ø—Ä–æ–¥—É–∫—Ç: *{product_name}*\n"
            "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø–æ–∫—É–ø–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î:",
            parse_mode='Markdown',
            reply_markup=get_cancel_keyboard()
        )

        return CHOOSING_PURCHASE_DATE

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ", reply_markup=get_main_menu_keyboard())
        context.user_data.pop('adding_by_photo', None) # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
        return ConversationHandler.END

# --- –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ ---
async def list_products_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –≤—ã–±–æ—Ä–∞."""
    try:
        user_id = update.message.from_user.id
        conn = sqlite3.connect('products.db')
        cursor = conn.cursor()
        cursor.execute('''
            SELECT id, name, purchase_date, expiration_days, expires_at, notified 
            FROM products WHERE user_id = ? ORDER BY expires_at
        ''', (user_id,))
        products = cursor.fetchall()
        conn.close()

        if not products:
            await update.message.reply_text(
                "üì¶ –ü–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π!",
                reply_markup=get_main_menu_keyboard()
            )
            return ConversationHandler.END

        text = "üìã *–í–∞—à–∏ –ø—Ä–æ–¥—É–∫—Ç—ã:*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç, –æ—Ç–ø—Ä–∞–≤–∏–≤ –µ–≥–æ –Ω–æ–º–µ—Ä.\n\n"
        keyboard = []
        today = datetime.now().date()
        
        for i, (prod_id, name, purchase_date, exp_days, expires_at, notified) in enumerate(products, 1):
            expires_date = datetime.strptime(expires_at, '%Y-%m-%d').date()
            days_left = (expires_date - today).days
            
            if days_left < 0:
                status = "üî¥ –ü–†–û–°–†–û–ß–ï–ù–û"
            elif days_left == 0:
                status = "üî¥ –ò—Å—Ç–µ–∫–∞–µ—Ç —Å–µ–≥–æ–¥–Ω—è!"
            elif days_left == 1:
                status = "üü† –ò—Å—Ç–µ–∫–∞–µ—Ç –∑–∞–≤—Ç—Ä–∞"
            elif days_left <= 3:
                status = f"üü° –ò—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ {days_left} –¥–Ω—è"
            else:
                status = f"üü¢ –ï—â—ë {days_left} –¥–Ω–µ–π"
                
            text += f"{i}. *{name}* ‚Äî {status}\n"
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–¥—É–∫—Ç –≤ user_data –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
            context.user_data[f'product_{i}'] = prod_id

        text += "\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π."
        keyboard = [["üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)

        await update.message.reply_text(text, parse_mode='Markdown', reply_markup=reply_markup)
        return BROWSE_PRODUCTS

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ list_products_handler: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤.", reply_markup=get_main_menu_keyboard())
        return ConversationHandler.END

async def browse_product_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞."""
    user_input = update.message.text.strip()
    if user_input == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await show_main_menu(update, context)
        return ConversationHandler.END

    try:
        product_index = int(user_input)
        product_id = context.user_data.get(f'product_{product_index}')
        if not product_id:
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –ø—Ä–æ–¥—É–∫—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return BROWSE_PRODUCTS

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
        context.user_data['selected_product_id'] = product_id
        return await show_product_detail(update, context, product_id)

    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–æ–¥—É–∫—Ç–∞.")
        return BROWSE_PRODUCTS

async def show_product_detail(update: Update, context: ContextTypes.DEFAULT_TYPE, product_id: int) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–µ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è."""
    try:
        conn = sqlite3.connect('products.db')
        cursor = conn.cursor()
        cursor.execute('''
            SELECT name, purchase_date, expiration_days, expires_at, notified 
            FROM products WHERE id = ?
        ''', (product_id,))
        product = cursor.fetchone()
        conn.close()

        if not product:
            await update.message.reply_text("‚ùå –ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_main_menu_keyboard())
            return ConversationHandler.END

        name, purchase_date, exp_days, expires_at, notified = product
        text = (
            f"*{name}*\n"
            f"üìÖ –î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏: {purchase_date}\n"
            f"üìÜ –°—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏: {exp_days} –¥–Ω–µ–π\n"
            f"‚ö†Ô∏è –ò—Å—Ç–µ–∫–∞–µ—Ç: {expires_at}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )

        keyboard = [
            ["üìñ –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç", "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç"],
            ["üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)

        await update.message.reply_text(text, parse_mode='Markdown', reply_markup=reply_markup)
        return BROWSE_PRODUCT_DETAIL

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_product_detail: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–¥—É–∫—Ç–µ.", reply_markup=get_main_menu_keyboard())
        return ConversationHandler.END

async def handle_product_action(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞–¥ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø—Ä–æ–¥—É–∫—Ç–æ–º."""
    user_input = update.message.text.strip()
    product_id = context.user_data.get('selected_product_id')

    if user_input == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await show_main_menu(update, context)
        return ConversationHandler.END
    elif user_input == "üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É":
        return await list_products_handler(update, context)
    elif user_input == "üìñ –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç":
        return await show_recipes_for_product(update, context, product_id)
    elif user_input == "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç":
        return await delete_product(update, context, product_id)
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫.")
        return BROWSE_PRODUCT_DETAIL

async def show_recipes_for_product(update: Update, context: ContextTypes.DEFAULT_TYPE, product_id: int) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ—Ü–µ–ø—Ç—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞."""
    try:
        conn = sqlite3.connect('products.db')
        cursor = conn.cursor()
        cursor.execute('SELECT name FROM products WHERE id = ?', (product_id,))
        product = cursor.fetchone()
        conn.close()

        if not product:
            await update.message.reply_text("‚ùå –ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_main_menu_keyboard())
            return ConversationHandler.END

        product_name = product[0]
        # –ò—â–µ–º —Ä–µ—Ü–µ–ø—Ç (–ø—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏)
        recipe = None
        for r in RECIPES:
            if r.get('name', '').lower() == product_name.lower():
                recipe = r
                break

        if recipe:
            ingredients = ", ".join(recipe.get('ingredients', []))
            steps = "\n".join([f"{i+1}. {step}" for i, step in enumerate(recipe.get('steps', []))])
            
            recipe_text = (
                f"üë©‚Äçüç≥ *{recipe['name']}*\n\n"
                f"‚è±Ô∏è –í—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è: {recipe.get('time_minutes', 'N/A')} –º–∏–Ω\n"
                f"üçΩÔ∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ü–∏–π: {recipe.get('servings', 'N/A')}\n\n"
                f"*–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:*\n{ingredients}\n\n"
                f"*–®–∞–≥–∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è:*\n{steps}"
            )
            
            await update.message.reply_text(
                recipe_text,
                parse_mode='Markdown',
                reply_markup=ReplyKeyboardMarkup([["üîô –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ–¥—É–∫—Ç—É", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]], resize_keyboard=True, one_time_keyboard=True)
            )
        else:
            await update.message.reply_text(
                f"üìö –†–µ—Ü–µ–ø—Ç –¥–ª—è *{product_name}* –Ω–µ –Ω–∞–π–¥–µ–Ω üòî\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∏—Å–∫–∞—Ç—å –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ –∏–ª–∏ –ø—Ä–∏–¥—É–º–∞—Ç—å —Å–≤–æ–π —Ä–µ—Ü–µ–ø—Ç!",
                parse_mode='Markdown',
                reply_markup=ReplyKeyboardMarkup([["üîô –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ–¥—É–∫—Ç—É", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]], resize_keyboard=True, one_time_keyboard=True)
            )
            
        return BROWSE_PRODUCT_DETAIL

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_recipes_for_product: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ—Ü–µ–ø—Ç–∞.", reply_markup=get_main_menu_keyboard())
        return ConversationHandler.END

async def delete_product(update: Update, context: ContextTypes.DEFAULT_TYPE, product_id: int) -> int:
    """–£–¥–∞–ª—è–µ—Ç –ø—Ä–æ–¥—É–∫—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    try:
        user_id = update.message.from_user.id
        conn = sqlite3.connect('products.db')
        cursor = conn.cursor()
        cursor.execute('DELETE FROM products WHERE id = ? AND user_id = ?', (product_id, user_id))
        conn.commit()
        conn.close()

        # –£–¥–∞–ª—è–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        job_id = f"notify_{user_id}_{product_id}"
        try:
            scheduler.remove_job(job_id)
        except JobLookupError:
            pass

        await update.message.reply_text("üóëÔ∏è –ü—Ä–æ–¥—É–∫—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!", reply_markup=get_main_menu_keyboard())
        return ConversationHandler.END

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ delete_product: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞.", reply_markup=get_main_menu_keyboard())
        return ConversationHandler.END

# --- –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ ---
async def show_expired_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã."""
    try:
        user_id = update.message.from_user.id
        conn = sqlite3.connect('products.db')
        cursor = conn.cursor()
        
        today = datetime.now().strftime('%Y-%m-%d')
        cursor.execute('''
            SELECT name, expires_at FROM products 
            WHERE user_id = ? AND expires_at <= ? AND notified = FALSE
            ORDER BY expires_at
        ''', (user_id, today))
        
        expired_products = cursor.fetchall()
        conn.close()

        if not expired_products:
            text = "‚úÖ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –Ω–µ—Ç!"
        else:
            text = "üö® *–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã:*\n\n"
            for name, expires_at in expired_products:
                text += f"‚Ä¢ *{name}* - –∏—Å—Ç–µ–∫ {expires_at}\n"
            text += "\n‚ùå –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –≤—ã–±—Ä–æ—Å–∏—Ç—å —ç—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç—ã!"

        await update.message.reply_text(text, parse_mode='Markdown', reply_markup=get_main_menu_keyboard())
        return ConversationHandler.END

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_expired_handler: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤.", reply_markup=get_main_menu_keyboard())
        return ConversationHandler.END

# --- –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ ---
async def clear_products_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã."""
    try:
        user_id = update.message.from_user.id
        conn = sqlite3.connect('products.db')
        cursor = conn.cursor()
        cursor.execute('DELETE FROM products WHERE user_id = ?', (user_id,))
        conn.commit()
        conn.close()

        # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        for job in scheduler.get_jobs():
            if job.id.startswith(f"notify_{user_id}_"):
                try:
                    scheduler.remove_job(job.id)
                except JobLookupError:
                    pass

        await update.message.reply_text("üóëÔ∏è –í—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã —É–¥–∞–ª–µ–Ω—ã!", reply_markup=get_main_menu_keyboard())
        return ConversationHandler.END

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ clear_products_handler: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤.", reply_markup=get_main_menu_keyboard())
        return ConversationHandler.END

# --- –û—Ç–º–µ–Ω–∞ –ª—é–±–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è ---
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥."""
    await update.message.reply_text(
        '–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.',
        reply_markup=get_main_menu_keyboard()
    )
    # –û—á–∏—â–∞–µ–º user_data
    context.user_data.clear()
    return ConversationHandler.END

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –º–µ–Ω—é) ---
async def handle_menu_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
    text = update.message.text

    if text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return await show_main_menu(update, context)
    elif text == "üì∏ –î–æ–±–∞–≤–∏—Ç—å –ø–æ —Ñ–æ—Ç–æ":
        return await start_add_by_photo(update, context)
    elif text == "‚úçÔ∏è –î–æ–±–∞–≤–∏—Ç—å –≤—Ä—É—á–Ω—É—é":
        return await start_add_manually(update, context)
    elif text == "üìã –ú–æ–∏ –ø—Ä–æ–¥—É–∫—Ç—ã":
        return await list_products_handler(update, context)
    elif text == "üö® –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ":
        return await show_expired_handler(update, context)
    elif text == "üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å—ë":
        return await clear_products_handler(update, context)
    elif text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å":
        await update.message.reply_text(
            "‚ÑπÔ∏è *–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:*\n\n"
            "1. *–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç:* –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤—Ä—É—á–Ω—É—é.\n"
            "2. *–ú–æ–∏ –ø—Ä–æ–¥—É–∫—Ç—ã:* –ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è –¥–µ—Ç–∞–ª–µ–π.\n"
            "3. *–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ:* –£–∑–Ω–∞–π—Ç–µ, —á—Ç–æ –Ω—É–∂–Ω–æ –≤—ã–±—Ä–æ—Å–∏—Ç—å.\n"
            "4. *–û—á–∏—Å—Ç–∏—Ç—å –≤—Å—ë:* –£–¥–∞–ª–∏—Ç–µ –≤—Å–µ –∑–∞–ø–∏—Å–∏.\n\n"
            "–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–ø–æ–º–Ω–∏—Ç –≤–∞–º –∑–∞ –¥–µ–Ω—å –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å—Ä–æ–∫–∞ –≥–æ–¥–Ω–æ—Å—Ç–∏!",
            parse_mode='Markdown',
            reply_markup=get_main_menu_keyboard()
        )
        return ConversationHandler.END
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.", reply_markup=get_main_menu_keyboard())
        return ConversationHandler.END

# --- –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ ---
async def check_expired_products():
    """–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤"""
    try:
        from telegram import Bot
        bot = Bot(token=TOKEN)
        
        conn = sqlite3.connect('products.db')
        cursor = conn.cursor()
        
        today = datetime.now().strftime('%Y-%m-%d')
        cursor.execute('''
            SELECT DISTINCT user_id FROM products 
            WHERE expires_at <= ? AND notified = FALSE
        ''', (today,))
        
        expired_users = cursor.fetchall()
        
        for (user_id,) in expired_users:
            try:
                cursor.execute('''
                    SELECT name, expires_at FROM products 
                    WHERE user_id = ? AND expires_at <= ? AND notified = FALSE
                ''', (user_id, today))
                
                expired_products = cursor.fetchall()
                if expired_products:
                    product_list = "\n".join([f"‚Ä¢ {name} (–∏—Å—Ç–µ–∫ {expires_at})" for name, expires_at in expired_products])
                    
                    # –ì–æ—Ç–æ–≤–∏–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                    from telegram import InlineKeyboardButton, InlineKeyboardMarkup
                    reply_markup = InlineKeyboardMarkup([
                        [InlineKeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å—ë", callback_data="clear_products")],
                        [InlineKeyboardButton("üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å—ë", callback_data="list_products")]
                    ])
                    
                    await bot.send_message(
                        chat_id=user_id,
                        text=f"üö® *–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã:*\n{product_list}\n\n–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –≤—ã–±—Ä–æ—Å–∏—Ç—å!",
                        parse_mode='Markdown',
                        reply_markup=reply_markup
                    )
                    
                    # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–Ω—ã–µ
                    cursor.execute('''
                        UPDATE products SET notified = TRUE 
                        WHERE user_id = ? AND expires_at <= ?
                    ''', (user_id, today))
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        
        conn.commit()
        conn.close()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ check_expired_products: {e}")

# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ---
def main():
    try:
        application = Application.builder().token(TOKEN).build()

        # –°–æ–∑–¥–∞–µ–º ConversationHandler –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏
        conv_handler = ConversationHandler(
            entry_points=[
                CommandHandler("start", start),
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_menu_choice),
            ],
            states={
                CHOOSING_PRODUCT_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, choose_product_name)],
                CHOOSING_PURCHASE_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, choose_purchase_date)],
                CHOOSING_EXPIRATION_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, choose_expiration_date)],
                BROWSE_PRODUCTS: [MessageHandler(filters.TEXT & ~filters.COMMAND, browse_product_selection)],
                BROWSE_PRODUCT_DETAIL: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_product_action)],
            },
            fallbacks=[MessageHandler(filters.Regex("^‚ùå –û—Ç–º–µ–Ω–∞$"), cancel)],
            allow_reentry=True
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        application.add_handler(conv_handler)
        application.add_handler(MessageHandler(filters.PHOTO, handle_photo)) # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ

        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –≤ 9:00
        scheduler.add_job(
            check_expired_products,
            'cron',
            hour=9,
            minute=0,
            id='daily_expired_check'
        )

        logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
        application.run_polling()

    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
    finally:
        scheduler.shutdown()

if __name__ == '__main__':
    main()
