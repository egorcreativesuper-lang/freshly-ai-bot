import logging
import sqlite3
import os
import random
from datetime import datetime, timedelta
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, MessageHandler, ContextTypes, filters, ConversationHandler
)
from apscheduler.schedulers.asyncio import AsyncIOScheduler  # ‚Üê –ò–°–ü–†–ê–í–õ–ï–ù–û: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
import json
from functools import wraps, partial
import threading
from flask import Flask
import asyncio

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
PHOTO_RECOGNITION, CHOOSING_PRODUCT_NAME, CHOOSING_PURCHASE_DATE, CHOOSING_EXPIRATION_DATE = range(4)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª
file_handler = logging.FileHandler('bot.log', encoding='utf-8')
file_handler.setFormatter(logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s'))
logger.addHandler(file_handler)

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∏ URL
TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
if not TOKEN:
    logger.error("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω! –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é TELEGRAM_BOT_TOKEN –≤ Amvera ‚Üí –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    exit(1)

WEBHOOK_URL = os.getenv('WEBHOOK_URL')
if not WEBHOOK_URL:
    logger.error("‚ùå WEBHOOK_URL –Ω–µ –∑–∞–¥–∞–Ω! –£–∫–∞–∂–∏—Ç–µ –ø—É–±–ª–∏—á–Ω—ã–π URL –≤–∞—à–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ Amvera.")
    exit(1)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
scheduler = AsyncIOScheduler()  # ‚Üê –ò–°–ü–†–ê–í–õ–ï–ù–û: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π!
scheduler.start()

# Health Check Server
app = Flask(__name__)

@app.route('/health')
def health_check():
    """–≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    return {'status': 'ok', 'message': 'Freshly Bot is running'}, 200

def run_health_check():
    """–ó–∞–ø—É—Å–∫ health check —Å–µ—Ä–≤–µ—Ä–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    port = int(os.environ.get("HEALTH_CHECK_PORT", 8081))
    app.run(host='0.0.0.0', port=port, debug=False, use_reloader=False)

def start_health_check():
    """–ó–∞–ø—É—Å–∫ health check –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ"""
    try:
        health_thread = threading.Thread(target=run_health_check, daemon=True)
        health_thread.start()
        logger.info("‚úÖ Health check server started")
    except Exception as e:
        logger.error(f"‚ùå Health check server error: {e}")

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î
def get_db_connection():
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î"""
    try:
        conn = sqlite3.connect('products.db')
        conn.row_factory = sqlite3.Row
        return conn
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
        raise

def safe_db_operation(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å –ë–î"""
    @wraps(func)
    async def wrapper(update, context, *args, **kwargs):
        try:
            return await func(update, context, *args, **kwargs)
        except sqlite3.Error as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ë–î –≤ {func.__name__}: {e}")
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", 
                reply_markup=get_main_menu_keyboard()
            )
            return ConversationHandler.END
    return wrapper

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö SQLite
def init_db():
    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS products (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                name TEXT NOT NULL,
                purchase_date TEXT NOT NULL,
                expiration_days INTEGER NOT NULL,
                added_at TEXT NOT NULL,
                expires_at TEXT NOT NULL,
                notified BOOLEAN DEFAULT FALSE
            )
        ''')
        cursor.execute('CREATE INDEX IF NOT EXISTS idx_user_id ON products(user_id)')
        cursor.execute('CREATE INDEX IF NOT EXISTS idx_expires_at ON products(expires_at)')
        conn.commit()
        conn.close()
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö SQLite –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
        exit(1)

init_db()

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤
def load_recipes():
    try:
        with open('recipes.json', 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        logger.warning("–§–∞–π–ª recipes.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return []

RECIPES = load_recipes()

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã
def parse_date(date_str: str):
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç —Å –∞–≤—Ç–æ–∫–æ—Ä—Ä–µ–∫—Ü–∏–µ–π"""
    if not date_str:
        return None
        
    date_str = date_str.strip().replace('/', '.').replace('\\', '.')
    
    # –ü–æ–ø—Ä–æ–±—É–µ–º —É–≥–∞–¥–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç –ø–æ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º
    if '-' in date_str:
        formats = ['%Y-%m-%d', '%d-%m-%Y']
    elif '.' in date_str:
        formats = ['%Y.%m.%d', '%d.%m.%Y', '%m.%d.%Y']
    else:
        formats = ['%Y%m%d', '%d%m%Y']
    
    for fmt in formats:
        try:
            return datetime.strptime(date_str, fmt).date()
        except ValueError:
            continue
    
    # –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–æ—Å—Å–∏–π—Å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç –∫–∞–∫ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–∞—Ä–∏–∞–Ω—Ç
    try:
        parts = date_str.split('.')
        if len(parts) == 3 and len(parts[2]) == 4:
            # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º DD.MM.YYYY
            return datetime.strptime(date_str, '%d.%m.%Y').date()
    except:
        pass
    
    return None

# –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ
def restore_scheduled_notifications():
    """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        
        today = datetime.now().date()
        cursor.execute('''
            SELECT id, user_id, name, expires_at 
            FROM products 
            WHERE expires_at > ? AND notified = FALSE
        ''', (today.isoformat(),))
        
        products = cursor.fetchall()
        
        restored_count = 0
        for product in products:
            product_id, user_id, name, expires_at = product
            expires_date = datetime.strptime(expires_at, '%Y-%m-%d').date()
            days_left = (expires_date - today).days
            
            if days_left > 0:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –ª–∏ —É–∂–µ –∑–∞–¥–∞—á–∞
                job_id = f"notify_{user_id}_{product_id}"
                try:
                    scheduler.get_job(job_id)
                    logger.info(f"‚è≠Ô∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ {product_id} —É–∂–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                    continue
                except:
                    pass
                
                # –ü–ª–∞–Ω–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                asyncio.create_task(schedule_notification_async(product_id, user_id, name, days_left))
                restored_count += 1
        
        conn.close()
        logger.info(f"‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {restored_count} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async def recognize_product(photo_path: str) -> str:
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤"""
    common_products = {
        "–º–æ–ª–æ—á–Ω—ã–µ": ["–ú–æ–ª–æ–∫–æ", "–ô–æ–≥—É—Ä—Ç", "–°–º–µ—Ç–∞–Ω–∞", "–¢–≤–æ—Ä–æ–≥", "–°—ã—Ä", "–ö–µ—Ñ–∏—Ä", "–°–ª–∏–≤–∫–∏", "–ú–∞—Å–ª–æ", "–†—è–∂–µ–Ω–∫–∞"],
        "—Ö–ª–µ–±–Ω—ã–µ": ["–•–ª–µ–±", "–ë—É–ª–æ—á–∫–∏", "–ë–∞—Ç–æ–Ω", "–õ–∞–≤–∞—à", "–ë–∞–≥–µ—Ç", "–°—É—Ö–∞—Ä–∏", "–ü–∏—Ä–æ–∂–∫–∏"],
        "–º—è—Å–Ω—ã–µ": ["–ö—É—Ä–∏—Ü–∞", "–ì–æ–≤—è–¥–∏–Ω–∞", "–°–≤–∏–Ω–∏–Ω–∞", "–§–∞—Ä—à", "–ö–æ–ª–±–∞—Å–∞", "–°–æ—Å–∏—Å–∫–∏", "–ë–µ–∫–æ–Ω", "–í–µ—Ç—á–∏–Ω–∞"],
        "—Ä—ã–±–Ω—ã–µ": ["–†—ã–±–∞", "–§–∏–ª–µ —Ä—ã–±—ã", "–ö—Ä–µ–≤–µ—Ç–∫–∏", "–ö–∞–ª—å–º–∞—Ä—ã", "–ú–∏–¥–∏–∏", "–ò–∫—Ä–∞", "–õ–æ—Å–æ—Å—å", "–¢—É–Ω–µ—Ü"],
        "–æ–≤–æ—â–∏": ["–ü–æ–º–∏–¥–æ—Ä—ã", "–û–≥—É—Ä—Ü—ã", "–ö–∞—Ä—Ç–æ—Ñ–µ–ª—å", "–ú–æ—Ä–∫–æ–≤—å", "–õ—É–∫", "–ö–∞–ø—É—Å—Ç–∞", "–ü–µ—Ä–µ—Ü", "–ß–µ—Å–Ω–æ–∫"],
        "—Ñ—Ä—É–∫—Ç—ã": ["–Ø–±–ª–æ–∫–∏", "–ë–∞–Ω–∞–Ω—ã", "–ê–ø–µ–ª—å—Å–∏–Ω—ã", "–õ–∏–º–æ–Ω—ã", "–ì—Ä—É—à–∏", "–í–∏–Ω–æ–≥—Ä–∞–¥", "–Ø–≥–æ–¥—ã", "–ü–µ—Ä—Å–∏–∫–∏"],
        "–±–∞–∫–∞–ª–µ—è": ["–ö—Ä—É–ø–∞", "–ú–∞–∫–∞—Ä–æ–Ω—ã", "–ú—É–∫–∞", "–°–∞—Ö–∞—Ä", "–°–æ–ª—å", "–ú–∞—Å–ª–æ —Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω–æ–µ", "–†–∏—Å", "–ì—Ä–µ—á–∫–∞"]
    }
    
    category = random.choice(list(common_products.keys()))
    return random.choice(common_products[category])

def get_main_menu_keyboard():
    keyboard = [
        ["üì∏ –î–æ–±–∞–≤–∏—Ç—å –ø–æ —Ñ–æ—Ç–æ", "‚úçÔ∏è –î–æ–±–∞–≤–∏—Ç—å –≤—Ä—É—á–Ω—É—é"],
        ["üìã –ú–æ–∏ –ø—Ä–æ–¥—É–∫—Ç—ã", "üö® –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ"],
        ["üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å—ë", "‚ÑπÔ∏è –ü–æ–º–æ—â—å"]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)

def get_cancel_keyboard():
    keyboard = [["‚ùå –û—Ç–º–µ–Ω–∞"]]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)

# --- –î–∏–∞–ª–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ –í–†–£–ß–ù–£–Æ ---
@safe_db_operation
async def start_add_manually(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text(
        "‚úèÔ∏è *–®–∞–≥ 1/3: –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞*\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ú–æ–ª–æ–∫–æ', '–°—ã—Ä –ú–æ—Ü–∞—Ä–µ–ª–ª–∞'):\n\n"
        "_–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '‚ùå –û—Ç–º–µ–Ω–∞'_",
        parse_mode='Markdown',
        reply_markup=get_cancel_keyboard()
    )
    return CHOOSING_PRODUCT_NAME

@safe_db_operation
async def choose_product_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_input = update.message.text.strip()
    if user_input == "‚ùå –û—Ç–º–µ–Ω–∞":
        await cancel(update, context)
        return ConversationHandler.END

    if not user_input or len(user_input) > 100:
        await update.message.reply_text(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ (–Ω–µ –±–æ–ª–µ–µ 100 —Å–∏–º–≤–æ–ª–æ–≤).",
            reply_markup=get_cancel_keyboard()
        )
        return CHOOSING_PRODUCT_NAME

    context.user_data['product_name'] = user_input
    await update.message.reply_text(
        "üìÖ *–®–∞–≥ 2/3: –î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏*\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø–æ–∫—É–ø–∫–∏ –≤ –æ–¥–Ω–æ–º –∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤:\n"
        "‚Ä¢ –ì–ì–ì–ì-–ú–ú-–î–î (2025-09-23)\n"
        "‚Ä¢ –ì–ì–ì–ì.–ú–ú.–î–î (2025.09.23)\n"
        "‚Ä¢ –î–î.–ú–ú.–ì–ì–ì–ì (23.09.2025)\n\n"
        "_–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '‚ùå –û—Ç–º–µ–Ω–∞'_",
        parse_mode='Markdown',
        reply_markup=get_cancel_keyboard()
    )
    return CHOOSING_PURCHASE_DATE

@safe_db_operation
async def choose_purchase_date(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_input = update.message.text.strip()
    if user_input == "‚ùå –û—Ç–º–µ–Ω–∞":
        await cancel(update, context)
        return ConversationHandler.END

    parsed_date = parse_date(user_input)
    today = datetime.now().date()
    
    if parsed_date is None:
        await update.message.reply_text(
            "‚ùå *–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã.*\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ –æ–¥–Ω–æ–º –∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤:\n"
            "‚Ä¢ –ì–ì–ì–ì-–ú–ú-–î–î (2025-09-23)\n"
            "‚Ä¢ –ì–ì–ì–ì.–ú–ú.–î–î (2025.09.23)\n"
            "‚Ä¢ –î–î.–ú–ú.–ì–ì–ì–ì (23.09.2025)",
            parse_mode='Markdown',
            reply_markup=get_cancel_keyboard()
        )
        return CHOOSING_PURCHASE_DATE

    if parsed_date > today:
        await update.message.reply_text(
            "‚ùå *–û—à–∏–±–∫–∞:* –î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É.",
            parse_mode='Markdown',
            reply_markup=get_cancel_keyboard()
        )
        return CHOOSING_PURCHASE_DATE

    context.user_data['purchase_date'] = parsed_date.isoformat()
    await update.message.reply_text(
        "üìÜ *–®–∞–≥ 3/3: –î–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å—Ä–æ–∫–∞*\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å—Ä–æ–∫–∞ –≤ —Ç–æ–º –∂–µ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "‚Ä¢ –ì–ì–ì–ì-–ú–ú-–î–î (2025-10-07)\n"
        "‚Ä¢ –ì–ì–ì–ì.–ú–ú.–î–î (2025.10.07)\n"
        "‚Ä¢ –î–î.–ú–ú.–ì–ì–ì–ì (07.10.2025)\n\n"
        "_–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '‚ùå –û—Ç–º–µ–Ω–∞'_",
        parse_mode='Markdown',
        reply_markup=get_cancel_keyboard()
    )
    return CHOOSING_EXPIRATION_DATE

@safe_db_operation
async def choose_expiration_date(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_input = update.message.text.strip()
    if user_input == "‚ùå –û—Ç–º–µ–Ω–∞":
        await cancel(update, context)
        return ConversationHandler.END

    parsed_date = parse_date(user_input)
    today = datetime.now().date()
    
    if parsed_date is None:
        await update.message.reply_text(
            "‚ùå *–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã.*\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ –æ–¥–Ω–æ–º –∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤:\n"
            "‚Ä¢ –ì–ì–ì–ì-–ú–ú-–î–î (2025-10-07)\n"
            "‚Ä¢ –ì–ì–ì–ì.–ú–ú.–î–î (2025.10.07)\n"
            "‚Ä¢ –î–î.–ú–ú.–ì–ì–ì–ì (07.10.2025)",
            parse_mode='Markdown',
            reply_markup=get_cancel_keyboard()
        )
        return CHOOSING_EXPIRATION_DATE

    if parsed_date <= today:
        await update.message.reply_text(
            "‚ùå *–û—à–∏–±–∫–∞:* –î–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É.",
            parse_mode='Markdown',
            reply_markup=get_cancel_keyboard()
        )
        return CHOOSING_EXPIRATION_DATE

    purchase_date = datetime.strptime(context.user_data['purchase_date'], '%Y-%m-%d').date()
    if parsed_date <= purchase_date:
        await update.message.reply_text(
            "‚ùå *–û—à–∏–±–∫–∞:* –î–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–∞ –¥–∞—Ç–µ –ø–æ–∫—É–ø–∫–∏.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.",
            parse_mode='Markdown',
            reply_markup=get_main_menu_keyboard()
        )
        return ConversationHandler.END

    context.user_data['expires_at'] = parsed_date.isoformat()
    expiration_days = (parsed_date - purchase_date).days
    context.user_data['expiration_days'] = expiration_days

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ SQLite
    user_id = update.message.from_user.id
    product_name = context.user_data['product_name']
    purchase_date_str = context.user_data['purchase_date']
    expires_at_str = context.user_data['expires_at']

    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute('''
            INSERT INTO products (user_id, name, purchase_date, expiration_days, added_at, expires_at)
            VALUES (?, ?, ?, ?, ?, ?)
        ''', (user_id, product_name, purchase_date_str, expiration_days, datetime.now().isoformat(), expires_at_str))
        product_id = cursor.lastrowid
        conn.commit()
        conn.close()

        # –ü–ª–∞–Ω–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        await schedule_notification_async(product_id, user_id, product_name, expiration_days)

        success_text = (
            f"üéâ *–£—Ä–∞! –ü—Ä–æ–¥—É–∫—Ç –¥–æ–±–∞–≤–ª–µ–Ω!*\n\n"
            f"üîπ *–ù–∞–∑–≤–∞–Ω–∏–µ:* {product_name}\n"
            f"üìÖ *–ö—É–ø–ª–µ–Ω–æ:* {purchase_date_str}\n"
            f"üìÜ *–ò—Å—Ç–µ–∫–∞–µ—Ç:* {expires_at_str}\n"
            f"‚è≥ *–°—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏:* {expiration_days} –¥–Ω–µ–π\n\n"
            "üîî –Ø –Ω–∞–ø–æ–º–Ω—é –≤–∞–º –∑–∞ –¥–µ–Ω—å –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å—Ä–æ–∫–∞!"
        )

        await update.message.reply_text(
            success_text,
            parse_mode='Markdown',
            reply_markup=get_main_menu_keyboard()
        )

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞.", 
            reply_markup=get_main_menu_keyboard()
        )

    return ConversationHandler.END

# --- –î–∏–∞–ª–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ –ü–û –§–û–¢–û ---
@safe_db_operation
async def start_add_by_photo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text(
        "üì∏ *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ —Ñ–æ—Ç–æ*\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –ø—Ä–æ–¥—É–∫—Ç–∞, –∏ —è –ø–æ–ø—Ä–æ–±—É—é –µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å!\n\n"
        "_–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '‚ùå –û—Ç–º–µ–Ω–∞'_",
        parse_mode='Markdown',
        reply_markup=get_cancel_keyboard()
    )
    return PHOTO_RECOGNITION

@safe_db_operation
async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        user_id = update.message.from_user.id
        os.makedirs("photos", exist_ok=True)
        
        photo_file = await update.message.photo[-1].get_file()
        file_id = update.message.photo[-1].file_id
        photo_hash = file_id[-10:]
        photo_path = f"photos/photo_{user_id}_{photo_hash}.jpg"
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
        await photo_file.download_to_drive(photo_path)
        await update.message.reply_text("üîç *–†–∞—Å–ø–æ–∑–Ω–∞—é –ø—Ä–æ–¥—É–∫—Ç...*", parse_mode='Markdown')
        
        product_name = await recognize_product(photo_path)
        
        # –£–¥–∞–ª—è–µ–º —Ñ–æ—Ç–æ ‚Äî –¥–∞–∂–µ –µ—Å–ª–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —É–ø–∞–ª–æ
        if os.path.exists(photo_path):
            os.remove(photo_path)

        if not product_name:
            await update.message.reply_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!", 
                reply_markup=get_main_menu_keyboard()
            )
            return ConversationHandler.END

        context.user_data['product_name'] = product_name
        await update.message.reply_text(
            f"ü§ñ *–†–∞—Å–ø–æ–∑–Ω–∞–Ω –ø—Ä–æ–¥—É–∫—Ç:* {product_name}\n\n"
            "üìÖ *–®–∞–≥ 2/3: –î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏*\n"
            "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø–æ–∫—É–ø–∫–∏ –≤ –æ–¥–Ω–æ–º –∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤:\n"
            "‚Ä¢ –ì–ì–ì–ì-–ú–ú-–î–î (2025-09-23)\n"
            "‚Ä¢ –ì–ì–ì–ì.–ú–ú.–î–î (2025.09.23)\n"
            "‚Ä¢ –î–î.–ú–ú.–ì–ì–ì–ì (23.09.2025)",
            parse_mode='Markdown',
            reply_markup=get_cancel_keyboard()
        )

        return CHOOSING_PURCHASE_DATE

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ: {e}")
        # –£–¥–∞–ª—è–µ–º —Ñ–æ—Ç–æ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        if 'photo_path' in locals() and os.path.exists(photo_path):
            os.remove(photo_path)
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ", 
            reply_markup=get_main_menu_keyboard()
        )
        return ConversationHandler.END

@safe_db_operation
async def handle_text_in_photo_recognition(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_input = update.message.text.strip()
    
    if user_input == "‚ùå –û—Ç–º–µ–Ω–∞":
        await cancel(update, context)
        return ConversationHandler.END
        
    await update.message.reply_text(
        "üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è.\n"
        "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '‚ùå –û—Ç–º–µ–Ω–∞' –¥–ª—è –≤—ã—Ö–æ–¥–∞.",
        reply_markup=get_cancel_keyboard()
    )
    return PHOTO_RECOGNITION

# --- –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã ---
@safe_db_operation
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–µ—Å—Å–∏–π
    context.user_data.clear()
    
    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    user_id = update.message.from_user.id
    product_count = 0
    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute('SELECT COUNT(*) FROM products WHERE user_id = ?', (user_id,))
        product_count = cursor.fetchone()[0]
        conn.close()
    except:
        pass
    
    stats_text = f"\nüìä –£ –≤–∞—Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è {product_count} –ø—Ä–æ–¥—É–∫—Ç–æ–≤" if product_count > 0 else "\nüìä –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤"
    
    welcome_text = (
        "üåü *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Freshly Bot!*\n\n"
        "–Ø ‚Äî –≤–∞—à –ª–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –±–æ—Ä—å–±–µ —Å –ø–∏—â–µ–≤—ã–º–∏ –æ—Ç—Ö–æ–¥–∞–º–∏ üçéü•¶\n\n"
        "‚ú® *–ß—Ç–æ —è —É–º–µ—é:*\n"
        "üì∏ *–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã* –ø–æ —Ñ–æ—Ç–æ\n"
        "üìÖ *–û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å—Ä–æ–∫–∏ –≥–æ–¥–Ω–æ—Å—Ç–∏*\n"
        "üîî *–ù–∞–ø–æ–º–∏–Ω–∞—Ç—å* –æ —Å–∫–æ—Ä–æ–º –∏—Å—Ç–µ—á–µ–Ω–∏–∏ —Å—Ä–æ–∫–∞\n"
        "üë©‚Äçüç≥ *–ü—Ä–µ–¥–ª–∞–≥–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç—ã* –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤\n\n"
        f"{stats_text}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ –∏ –Ω–∞—á–Ω–∏—Ç–µ —Å–ø–∞—Å–∞—Ç—å –µ–¥—É –∏ –¥–µ–Ω—å–≥–∏! üí∞"
    )
    
    await update.message.reply_text(
        welcome_text,
        parse_mode='Markdown',
        reply_markup=get_main_menu_keyboard()
    )
    return ConversationHandler.END

@safe_db_operation
async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    return await start(update, context)

@safe_db_operation
async def list_products_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        user_id = update.message.from_user.id
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute('''
            SELECT id, name, purchase_date, expiration_days, expires_at, notified 
            FROM products WHERE user_id = ? ORDER BY expires_at
        ''', (user_id,))
        products = cursor.fetchall()
        conn.close()

        if not products:
            await update.message.reply_text(
                "üì¶ *–ü–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤.*\n\n"
                "–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ 'üì∏ –î–æ–±–∞–≤–∏—Ç—å –ø–æ —Ñ–æ—Ç–æ' –∏–ª–∏ '‚úçÔ∏è –î–æ–±–∞–≤–∏—Ç—å –≤—Ä—É—á–Ω—É—é'!",
                parse_mode='Markdown',
                reply_markup=get_main_menu_keyboard()
            )
            return ConversationHandler.END

        text = "üìã *–í–∞—à–∏ –ø—Ä–æ–¥—É–∫—Ç—ã:*\n\n"
        today = datetime.now().date()
        
        for i, product in enumerate(products, 1):
            prod_id, name, purchase_date, exp_days, expires_at, notified = product
            expires_date = datetime.strptime(expires_at, '%Y-%m-%d').date()
            days_left = (expires_date - today).days
            
            if days_left < 0:
                status = "üî¥ –ü–†–û–°–†–û–ß–ï–ù–û"
            elif days_left == 0:
                status = "üî¥ –ò—Å—Ç–µ–∫–∞–µ—Ç —Å–µ–≥–æ–¥–Ω—è!"
            elif days_left == 1:
                status = "üü† –ò—Å—Ç–µ–∫–∞–µ—Ç –∑–∞–≤—Ç—Ä–∞"
            elif days_left <= 3:
                status = f"üü° –ò—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ {days_left} –¥–Ω—è"
            else:
                status = f"üü¢ –ï—â—ë {days_left} –¥–Ω–µ–π"
                
            text += f"{i}. *{name}* ‚Äî {status}\n"

        text += "\nüè† –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë –ø—Ä–æ–¥—É–∫—Ç–æ–≤."
        await update.message.reply_text(text, parse_mode='Markdown', reply_markup=get_main_menu_keyboard())
        return ConversationHandler.END

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ list_products_handler: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤.", 
            reply_markup=get_main_menu_keyboard()
        )
        return ConversationHandler.END

@safe_db_operation
async def show_expired_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        user_id = update.message.from_user.id
        conn = get_db_connection()
        cursor = conn.cursor()
        
        today = datetime.now().strftime('%Y-%m-%d')
        cursor.execute('''
            SELECT name, expires_at FROM products 
            WHERE user_id = ? AND expires_at <= ? AND notified = FALSE
            ORDER BY expires_at
        ''', (user_id, today))
        
        expired_products = cursor.fetchall()
        conn.close()

        if not expired_products:
            text = "‚úÖ *–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –Ω–µ—Ç!* –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! üéâ"
        else:
            text = "üö® *–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã:*\n\n"
            for product in expired_products:
                name, expires_at = product
                text += f"‚Ä¢ *{name}* - –∏—Å—Ç–µ–∫ {expires_at}\n"
            text += "\n‚ùå –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –≤—ã–±—Ä–æ—Å–∏—Ç—å —ç—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç—ã!"

        await update.message.reply_text(text, parse_mode='Markdown', reply_markup=get_main_menu_keyboard())
        return ConversationHandler.END

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ show_expired_handler: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤.", 
            reply_markup=get_main_menu_keyboard()
        )
        return ConversationHandler.END

@safe_db_operation
async def clear_products_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        user_id = update.message.from_user.id
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute('DELETE FROM products WHERE user_id = ?', (user_id,))
        conn.commit()
        conn.close()

        # –£–¥–∞–ª—è–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        for job in scheduler.get_jobs():
            if job.id.startswith(f"notify_{user_id}_"):
                try:
                    scheduler.remove_job(job.id)
                except JobLookupError:
                    pass

        await update.message.reply_text(
            "üóëÔ∏è *–í—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã —É–¥–∞–ª–µ–Ω—ã!*", 
            parse_mode='Markdown', 
            reply_markup=get_main_menu_keyboard()
        )
        return ConversationHandler.END

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ clear_products_handler: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤.", 
            reply_markup=get_main_menu_keyboard()
        )
        return ConversationHandler.END

@safe_db_operation
async def help_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    help_text = (
        "‚ÑπÔ∏è *–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:*\n\n"
        "1Ô∏è‚É£ *–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç:*\n"
        "   ‚Ä¢ –ù–∞–∂–º–∏—Ç–µ 'üì∏ –î–æ–±–∞–≤–∏—Ç—å –ø–æ —Ñ–æ—Ç–æ' –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–Ω–∏–º–æ–∫.\n"
        "   ‚Ä¢ –ò–ª–∏ '‚úçÔ∏è –î–æ–±–∞–≤–∏—Ç—å –≤—Ä—É—á–Ω—É—é' –∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –¥–∞—Ç—ã.\n\n"
        "2Ô∏è‚É£ *–ú–æ–∏ –ø—Ä–æ–¥—É–∫—Ç—ã:*\n"
        "   ‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –∏ –æ—Ç—Å–ª–µ–¥–∏—Ç–µ —Å—Ä–æ–∫–∏ –≥–æ–¥–Ω–æ—Å—Ç–∏.\n\n"
        "3Ô∏è‚É£ *–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ:*\n"
        "   ‚Ä¢ –£–∑–Ω–∞–π—Ç–µ, —á—Ç–æ –Ω—É–∂–Ω–æ –≤—ã–±—Ä–æ—Å–∏—Ç—å.\n\n"
        "4Ô∏è‚É£ *–û—á–∏—Å—Ç–∏—Ç—å –≤—Å—ë:*\n"
        "   ‚Ä¢ –£–¥–∞–ª–∏—Ç–µ –≤—Å–µ –∑–∞–ø–∏—Å–∏.\n\n"
        "üîî *–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–ø–æ–º–Ω–∏—Ç –≤–∞–º –∑–∞ –¥–µ–Ω—å –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å—Ä–æ–∫–∞ –≥–æ–¥–Ω–æ—Å—Ç–∏!*"
    )
    await update.message.reply_text(
        help_text,
        parse_mode='Markdown',
        reply_markup=get_main_menu_keyboard()
    )
    return ConversationHandler.END

@safe_db_operation
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text(
        '‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.',
        reply_markup=get_main_menu_keyboard()
    )
    context.user_data.clear()
    return ConversationHandler.END

# --- –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ---
async def send_notification(bot, user_id: int, product_name: str, product_id: int):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram Bot API"""
    try:
        await bot.send_message(
            chat_id=user_id,
            text=f"‚ö†Ô∏è *{product_name}* –∏—Å–ø–æ—Ä—Ç–∏—Ç—Å—è –∑–∞–≤—Ç—Ä–∞!\n\n–ü–æ–ø—Ä–æ–±—É–π –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å —á—Ç–æ-–Ω–∏–±—É–¥—å –≤–∫—É—Å–Ω–æ–µ! üë®‚Äçüç≥",
            parse_mode='Markdown'
        )
        
        # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–Ω–æ–µ –≤ –ë–î
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute('UPDATE products SET notified = TRUE WHERE id = ?', (product_id,))
        conn.commit()
        conn.close()
        
        logger.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ {product_name}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

async def schedule_notification_async(product_id: int, user_id: int, product_name: str, expiration_days: int):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ AsyncIOScheduler"""
    try:
        if expiration_days <= 1:
            notify_time = datetime.now() + timedelta(hours=1)
        else:
            notify_time = datetime.now() + timedelta(days=expiration_days - 1)
        
        job_id = f"notify_{user_id}_{product_id}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –ª–∏ —É–∂–µ –∑–∞–¥–∞—á–∞
        try:
            scheduler.get_job(job_id)
            logger.info(f"‚è≠Ô∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ {product_id} —É–∂–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            return
        except JobLookupError:
            pass
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É
        scheduler.add_job(
            send_notification,
            'date',
            run_date=notify_time,
            args=[bot, user_id, product_name, product_id],  # ‚Üê –ü–µ—Ä–µ–¥–∞—ë–º bot
            id=job_id
        )
        logger.info(f"‚úÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ {product_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

async def check_expired_products(bot):
    """–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤"""
    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        
        today = datetime.now().strftime('%Y-%m-%d')
        cursor.execute('''
            SELECT DISTINCT user_id FROM products 
            WHERE expires_at <= ? AND notified = FALSE
        ''', (today,))
        
        expired_users = cursor.fetchall()
        
        for user_tuple in expired_users:
            user_id = user_tuple[0]
            try:
                cursor.execute('''
                    SELECT name, expires_at FROM products 
                    WHERE user_id = ? AND expires_at <= ? AND notified = FALSE
                ''', (user_id, today))
                
                expired_products = cursor.fetchall()
                if expired_products:
                    product_list = "\n".join([f"‚Ä¢ {name} (–∏—Å—Ç–µ–∫ {expires_at})" for name, expires_at in expired_products])
                    
                    cursor.execute('''
                        UPDATE products SET notified = TRUE 
                        WHERE user_id = ? AND expires_at <= ?
                    ''', (user_id, today))
                    conn.commit()

                    try:
                        await bot.send_message(
                            chat_id=user_id,
                            text=f"üö® *–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã:*\n{product_list}\n\n‚ùå –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –≤—ã–±—Ä–æ—Å–∏—Ç—å!",
                            parse_mode='Markdown'
                        )
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                    
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        
        conn.close()
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ check_expired_products: {e}")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é ---
@safe_db_operation
async def handle_menu_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    text = update.message.text

    if text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        context.user_data.clear()
        return await show_main_menu(update, context)
    elif text == "‚ùå –û—Ç–º–µ–Ω–∞":
        return await cancel(update, context)
    elif text == "üì∏ –î–æ–±–∞–≤–∏—Ç—å –ø–æ —Ñ–æ—Ç–æ":
        return await start_add_by_photo(update, context)
    elif text == "‚úçÔ∏è –î–æ–±–∞–≤–∏—Ç—å –≤—Ä—É—á–Ω—É—é":
        return await start_add_manually(update, context)
    elif text == "üìã –ú–æ–∏ –ø—Ä–æ–¥—É–∫—Ç—ã":
        return await list_products_handler(update, context)
    elif text == "üö® –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ":
        return await show_expired_handler(update, context)
    elif text == "üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å—ë":
        return await clear_products_handler(update, context)
    elif text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å":
        return await help_handler(update, context)
    else:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.", 
            reply_markup=get_main_menu_keyboard()
        )
        return ConversationHandler.END

# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ---
async def main():
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º health check —Å–µ—Ä–≤–µ—Ä
        start_health_check()
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        restore_scheduled_notifications()

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
        application = Application.builder().token(TOKEN).build()
        bot = application.bot  # ‚Üê –ì–ª–æ–±–∞–ª—å–Ω—ã–π –±–æ—Ç –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        manual_conv_handler = ConversationHandler(
            entry_points=[MessageHandler(filters.Regex("^‚úçÔ∏è –î–æ–±–∞–≤–∏—Ç—å –≤—Ä—É—á–Ω—É—é$"), start_add_manually)],
            states={
                CHOOSING_PRODUCT_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, choose_product_name)],
                CHOOSING_PURCHASE_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, choose_purchase_date)],
                CHOOSING_EXPIRATION_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, choose_expiration_date)],
            },
            fallbacks=[
                MessageHandler(filters.Regex("^(‚ùå –û—Ç–º–µ–Ω–∞)$"), cancel),
                CommandHandler("start", show_main_menu),
                CommandHandler("cancel", cancel)
            ],
            allow_reentry=True
        )

        photo_conv_handler = ConversationHandler(
            entry_points=[MessageHandler(filters.Regex("^üì∏ –î–æ–±–∞–≤–∏—Ç—å –ø–æ —Ñ–æ—Ç–æ$"), start_add_by_photo)],
            states={
                PHOTO_RECOGNITION: [
                    MessageHandler(filters.PHOTO, handle_photo),
                    MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_in_photo_recognition)
                ],
                CHOOSING_PURCHASE_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, choose_purchase_date)],
                CHOOSING_EXPIRATION_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, choose_expiration_date)],
            },
            fallbacks=[
                MessageHandler(filters.Regex("^(‚ùå –û—Ç–º–µ–Ω–∞)$"), cancel),
                CommandHandler("start", show_main_menu),
                CommandHandler("cancel", cancel)
            ],
            allow_reentry=True
        )

        application.add_handler(manual_conv_handler)
        application.add_handler(photo_conv_handler)
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_menu_choice))
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("cancel", cancel))
        application.add_handler(CommandHandler("help", help_handler))

        # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        scheduler.add_job(
            partial(check_expired_products, bot=bot),
            'cron',
            hour=9,
            minute=0,
            id='daily_expired_check'
        )

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫ ‚Äî run_webhook —Å–¥–µ–ª–∞–µ—Ç —ç—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        PORT = int(os.environ.get('PORT', 8080))
        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ —á–µ—Ä–µ–∑ Webhook –Ω–∞ –ø–æ—Ä—Ç—É {PORT}...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ —á–µ—Ä–µ–∑ –≤–µ–±—Ö—É–∫
        await application.run_webhook(
            listen="0.0.0.0",
            port=PORT,
            url_path=TOKEN,
            webhook_url=WEBHOOK_URL + f"/{TOKEN}",
            secret_token=TOKEN
        )

    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
    finally:
        scheduler.shutdown()

if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ü–∏–∫–ª
    asyncio.run(main())
