import os
import logging
import sqlite3
import asyncio
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, MessageHandler,
    filters, ContextTypes, ConversationHandler, CallbackQueryHandler
)
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
WAITING_PRODUCT, WAITING_DATE = range(2)

# –ë–∞–∑–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
PRODUCTS_DATA = {
    "–º–æ–ª–æ–∫–æ": {"shelf_life": 7, "category": "–º–æ–ª–æ—á–Ω—ã–µ"},
    "–∫–µ—Ñ–∏—Ä": {"shelf_life": 5, "category": "–º–æ–ª–æ—á–Ω—ã–µ"},
    "—Å—ã—Ä": {"shelf_life": 14, "category": "–º–æ–ª–æ—á–Ω—ã–µ"},
    "—Ç–≤–æ—Ä–æ–≥": {"shelf_life": 5, "category": "–º–æ–ª–æ—á–Ω—ã–µ"},
    "—Å–º–µ—Ç–∞–Ω–∞": {"shelf_life": 7, "category": "–º–æ–ª–æ—á–Ω—ã–µ"},
    "–π–æ–≥—É—Ä—Ç": {"shelf_life": 10, "category": "–º–æ–ª–æ—á–Ω—ã–µ"},
    "—è–π—Ü–∞": {"shelf_life": 30, "category": "—è–π—Ü–∞"},
    "–∫—É—Ä–∏—Ü–∞": {"shelf_life": 3, "category": "–º—è—Å–æ"},
    "–≥–æ–≤—è–¥–∏–Ω–∞": {"shelf_life": 4, "category": "–º—è—Å–æ"},
    "—Ä—ã–±–∞": {"shelf_life": 2, "category": "—Ä—ã–±–∞"},
    "—Ö–ª–µ–±": {"shelf_life": 5, "category": "—Ö–ª–µ–±"},
}

class Database:
    def __init__(self):
        self.init_db()

    def init_db(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö SQLite"""
        with sqlite3.connect('products.db', check_same_thread=False) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS products (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER,
                    product_name TEXT,
                    purchase_date DATE,
                    expiration_date DATE,
                    notified BOOLEAN DEFAULT FALSE
                )
            ''')
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS users (
                    user_id INTEGER PRIMARY KEY,
                    username TEXT,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            conn.commit()

    async def add_user(self, user_id: int, username: str):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        with sqlite3.connect('products.db', check_same_thread=False) as conn:
            cursor = conn.cursor()
            cursor.execute(
                'INSERT OR IGNORE INTO users (user_id, username) VALUES (?, ?)',
                (user_id, username or '')
            )
            conn.commit()

    async def add_product(self, user_id: int, product_name: str, purchase_date: datetime) -> bool:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞"""
        if product_name not in PRODUCTS_DATA:
            return False

        shelf_life = PRODUCTS_DATA[product_name]['shelf_life']
        expiration_date = purchase_date + timedelta(days=shelf_life)

        with sqlite3.connect('products.db', check_same_thread=False) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                INSERT INTO products (user_id, product_name, purchase_date, expiration_date)
                VALUES (?, ?, ?, ?)
            ''', (user_id, product_name, purchase_date.date(), expiration_date.date()))
            conn.commit()

        return True

    async def get_user_products(self, user_id: int):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        with sqlite3.connect('products.db', check_same_thread=False) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                SELECT product_name, purchase_date, expiration_date
                FROM products
                WHERE user_id = ?
                ORDER BY expiration_date
            ''', (user_id,))
            return cursor.fetchall()

    async def get_products_count(self, user_id: int) -> int:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        with sqlite3.connect('products.db', check_same_thread=False) as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT COUNT(*) FROM products WHERE user_id = ?', (user_id,))
            result = cursor.fetchone()
            return result[0] if result else 0

    async def clear_user_products(self, user_id: int):
        """–û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        with sqlite3.connect('products.db', check_same_thread=False) as conn:
            cursor = conn.cursor()
            cursor.execute('DELETE FROM products WHERE user_id = ?', (user_id,))
            conn.commit()

    async def get_expiring_products(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤, —Å—Ä–æ–∫ –∫–æ—Ç–æ—Ä—ã—Ö –∏—Å—Ç–µ–∫–∞–µ—Ç –∑–∞–≤—Ç—Ä–∞"""
        tomorrow = (datetime.now() + timedelta(days=1)).date()
        with sqlite3.connect('products.db', check_same_thread=False) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                SELECT p.user_id, u.username, p.product_name, p.expiration_date
                FROM products p
                JOIN users u ON p.user_id = u.user_id
                WHERE p.expiration_date = ? AND p.notified = FALSE
            ''', (tomorrow,))
            return cursor.fetchall()

    async def mark_as_notified(self, user_id: int, product_name: str):
        """–ü–æ–º–µ—Ç–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç –∫–∞–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–Ω—ã–π"""
        with sqlite3.connect('products.db', check_same_thread=False) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                UPDATE products
                SET notified = TRUE
                WHERE user_id = ? AND product_name = ?
            ''', (user_id, product_name))
            conn.commit()


class FreshlyBot:
    def __init__(self, token: str):
        self.token = token
        self.db = Database()
        self.application: Application = None
        self.scheduler = AsyncIOScheduler()

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        await self.db.add_user(user.id, user.username)

        welcome_text = f"""
üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø Freshly Bot ‚Äî —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—é —Å—Ä–æ–∫–æ–≤ –≥–æ–¥–Ω–æ—Å—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤.

üìã **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/start - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ  
/list - —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤
/add - –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç
/clear - –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã

üéØ –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!
        """

        # –ò–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
        keyboard = [
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data="add_product")],
            [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫", callback_data="list_products")],
            [InlineKeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å", callback_data="clear_products")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(welcome_text, reply_markup=reply_markup)

    async def handle_menu_button(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        query = update.callback_query
        await query.answer()

        if query.data == "add_product":
            user = query.from_user
            products_count = await self.db.get_products_count(user.id)
            if products_count >= 5:
                await query.edit_message_text(
                    "‚ùå –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ (5 –ø—Ä–æ–¥—É–∫—Ç–æ–≤). –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —á—Ç–æ–±—ã –æ—Å–≤–æ–±–æ–¥–∏—Ç—å –º–µ—Å—Ç–æ."
                )
                return

            products_list = "\n".join([f"‚Ä¢ {product}" for product in PRODUCTS_DATA.keys()])
            await query.edit_message_text(
                f"üì¶ **–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã:**\n{products_list}\n\n"
                "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞:"
            )
            return WAITING_PRODUCT

        elif query.data == "list_products":
            products = await self.db.get_user_products(query.from_user.id)
            if not products:
                await query.edit_message_text("üì≠ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤.")
                return

            message = "üìã **–í–∞—à–∏ –ø—Ä–æ–¥—É–∫—Ç—ã:**\n\n"
            today = datetime.now().date()
            for product_name, purchase_date, expiration_date in products:
                days_left = (expiration_date - today).days
                if days_left < 0:
                    status = "üî¥"
                    status_text = "–ü–†–û–°–†–û–ß–ï–ù–û"
                elif days_left == 0:
                    status = "üî¥"
                    status_text = "–ò—Å—Ç–µ–∫–∞–µ—Ç —Å–µ–≥–æ–¥–Ω—è"
                elif days_left == 1:
                    status = "üü†"
                    status_text = "–ò—Å—Ç–µ–∫–∞–µ—Ç –∑–∞–≤—Ç—Ä–∞"
                elif days_left <= 3:
                    status = "üü°"
                    status_text = f"–ò—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ {days_left} –¥–Ω—è"
                else:
                    status = "üü¢"
                    status_text = f"–û—Å—Ç–∞–ª–æ—Å—å {days_left} –¥–Ω–µ–π"
                message += f"{status} **{product_name}**\nüìÖ –î–æ {expiration_date}\n‚è∞ {status_text}\n\n"
            products_count = await self.db.get_products_count(query.from_user.id)
            message += f"üìä –í—Å–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {products_count}/5"
            await query.edit_message_text(message)

        elif query.data == "clear_products":
            await self.db.clear_user_products(query.from_user.id)
            await query.edit_message_text("‚úÖ –í—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã —É–¥–∞–ª–µ–Ω—ã!")

    async def list_products(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ (—á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /list)"""
        user = update.effective_user
        products = await self.db.get_user_products(user.id)

        if not products:
            await update.message.reply_text("üì≠ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤.")
            return

        message = "üìã **–í–∞—à–∏ –ø—Ä–æ–¥—É–∫—Ç—ã:**\n\n"
        today = datetime.now().date()

        for product_name, purchase_date, expiration_date in products:
            days_left = (expiration_date - today).days

            if days_left < 0:
                status = "üî¥"
                status_text = "–ü–†–û–°–†–û–ß–ï–ù–û"
            elif days_left == 0:
                status = "üî¥"
                status_text = "–ò—Å—Ç–µ–∫–∞–µ—Ç —Å–µ–≥–æ–¥–Ω—è"
            elif days_left == 1:
                status = "üü†"
                status_text = "–ò—Å—Ç–µ–∫–∞–µ—Ç –∑–∞–≤—Ç—Ä–∞"
            elif days_left <= 3:
                status = "üü°"
                status_text = f"–ò—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ {days_left} –¥–Ω—è"
            else:
                status = "üü¢"
                status_text = f"–û—Å—Ç–∞–ª–æ—Å—å {days_left} –¥–Ω–µ–π"

            message += f"{status} **{product_name}**\n"
            message += f"   üìÖ –î–æ {expiration_date}\n"
            message += f"   ‚è∞ {status_text}\n\n"

        products_count = await self.db.get_products_count(user.id)
        message += f"üìä –í—Å–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {products_count}/5"
        await update.message.reply_text(message)

    async def clear_products(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ (—á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /clear)"""
        user = update.effective_user
        await self.db.clear_user_products(user.id)
        await update.message.reply_text("‚úÖ –í—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã —É–¥–∞–ª–µ–Ω—ã!")

    async def add_product_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ (—á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /add)"""
        user = update.effective_user
        products_count = await self.db.get_products_count(user.id)
        if products_count >= 5:
            await update.message.reply_text(
                "‚ùå –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ (5 –ø—Ä–æ–¥—É–∫—Ç–æ–≤). –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —á—Ç–æ–±—ã –æ—Å–≤–æ–±–æ–¥–∏—Ç—å –º–µ—Å—Ç–æ."
            )
            return ConversationHandler.END

        products_list = "\n".join([f"‚Ä¢ {product}" for product in PRODUCTS_DATA.keys()])
        await update.message.reply_text(
            f"üì¶ **–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã:**\n{products_list}\n\n"
            "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞:"
        )
        return WAITING_PRODUCT

    async def handle_product_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø—Ä–æ–¥—É–∫—Ç–∞"""
        product_name = update.message.text.lower().strip()

        if product_name not in PRODUCTS_DATA:
            await update.message.reply_text("‚ùå –ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return WAITING_PRODUCT

        context.user_data['current_product'] = product_name

        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã ‚Äî –∏–Ω–ª–∞–π–Ω
        keyboard = [
            [InlineKeyboardButton("üìÖ –°–µ–≥–æ–¥–Ω—è", callback_data="today")],
            [InlineKeyboardButton("‚è™ –í—á–µ—Ä–∞", callback_data="yesterday")],
            [InlineKeyboardButton("‚è™ 2 –¥–Ω—è –Ω–∞–∑–∞–¥", callback_data="two_days_ago")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_product"),
             InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(
            f"üì¶ –ü—Ä–æ–¥—É–∫—Ç: **{product_name}**\n"
            "üìÜ –ö–æ–≥–¥–∞ –≤—ã –∫—É–ø–∏–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ–¥—É–∫—Ç?",
            reply_markup=reply_markup
        )

        return WAITING_DATE

    async def handle_date(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã –ø–æ–∫—É–ø–∫–∏"""
        query = update.callback_query
        await query.answer()

        callback_data = query.data

        if
