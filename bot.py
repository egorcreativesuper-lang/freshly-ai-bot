import logging
import sqlite3
import os
import random
from datetime import datetime, timedelta, time
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, MessageHandler, ContextTypes, filters, ConversationHandler
)
import json

# üîë –í–°–¢–†–û–ï–ù–ù–´–ô –¢–û–ö–ï–ù (–¢–û–õ–¨–ö–û –î–õ–Ø –¢–ï–°–¢–ê!)
TOKEN = "8123646923:AAERiVrcFss2IubX3SMUJI12c9qHbX2KRgA"

# –°–æ—Å—Ç–æ—è–Ω–∏—è
(
    PHOTO_RECOGNITION,
    CHOOSING_PRODUCT_NAME,
    CHOOSING_PURCHASE_DATE,
    CHOOSING_EXPIRATION_DATE,
    ENTERING_PROMO_CODE
) = range(5)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# ======================
# –ë–ê–ó–ê –î–ê–ù–ù–´–•
# ======================

def init_db():
    try:
        with sqlite3.connect('products.db') as conn:
            cursor = conn.cursor()
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS products (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER NOT NULL,
                    name TEXT NOT NULL,
                    purchase_date TEXT NOT NULL,
                    expiration_days INTEGER NOT NULL,
                    added_at TEXT NOT NULL,
                    expires_at TEXT NOT NULL,
                    notified BOOLEAN DEFAULT FALSE
                )
            ''')
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS users (
                    user_id INTEGER PRIMARY KEY,
                    is_premium BOOLEAN DEFAULT FALSE,
                    premium_until TEXT
                )
            ''')
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS promo_codes (
                    code TEXT PRIMARY KEY,
                    days INTEGER NOT NULL,
                    max_uses INTEGER,
                    uses_count INTEGER DEFAULT 0
                )
            ''')
            conn.commit()
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ë–î: {e}")
        exit(1)

def ensure_promo_codes_exist():
    """–°–æ–∑–¥–∞—ë—Ç –ø—Ä–æ–º–æ–∫–æ–¥—ã –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ"""
    promo_list = []
    for i in range(1, 6):
        promo_list.append((f"FRESHW{i}", 7, 1))   # –ù–µ–¥–µ–ª—è
        promo_list.append((f"FRESHM{i}", 30, 1))  # –ú–µ—Å—è—Ü
        promo_list.append((f"FRESHY{i}", 365, 1)) # –ì–æ–¥

    with sqlite3.connect('products.db') as conn:
        cursor = conn.cursor()
        for code, days, max_uses in promo_list:
            cursor.execute('''
                INSERT OR IGNORE INTO promo_codes (code, days, max_uses)
                VALUES (?, ?, ?)
            ''', (code, days, max_uses))
        conn.commit()
    logger.info("‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥—ã —Å–æ–∑–¥–∞–Ω—ã")

# ======================
# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
# ======================

def parse_date(date_str: str):
    formats = ['%Y-%m-%d', '%Y.%m.%d', '%d.%m.%Y', '%d-%m-%Y']
    for fmt in formats:
        try:
            return datetime.strptime(date_str, fmt).date()
        except ValueError:
            continue
    return None

def get_user_premium_status(user_id: int) -> bool:
    with sqlite3.connect('products.db') as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT is_premium, premium_until FROM users WHERE user_id = ?", (user_id,))
        row = cursor.fetchone()
        if not row:
            return False
        is_premium, premium_until_str = row
        if not is_premium:
            return False
        if premium_until_str:
            premium_until = datetime.fromisoformat(premium_until_str)
            if datetime.now() < premium_until:
                return True
            else:
                cursor.execute("UPDATE users SET is_premium = FALSE, premium_until = NULL WHERE user_id = ?", (user_id,))
                conn.commit()
                return False
        return False

def activate_premium(user_id: int, days: int):
    with sqlite3.connect('products.db') as conn:
        cursor = conn.cursor()
        premium_until = datetime.now() + timedelta(days=days)
        cursor.execute("""
            INSERT INTO users (user_id, is_premium, premium_until)
            VALUES (?, ?, ?)
            ON CONFLICT(user_id) DO UPDATE SET
                is_premium = TRUE,
                premium_until = ?
        """, (user_id, True, premium_until.isoformat(), premium_until.isoformat()))
        conn.commit()

def get_main_menu_keyboard(is_premium: bool = False):
    keyboard = [
        ["üì∏ –î–æ–±–∞–≤–∏—Ç—å –ø–æ —Ñ–æ—Ç–æ", "‚úçÔ∏è –î–æ–±–∞–≤–∏—Ç—å –≤—Ä—É—á–Ω—É—é"],
        ["üìã –ú–æ–∏ –ø—Ä–æ–¥—É–∫—Ç—ã", "üö® –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ"],
        ["üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å—ë", "‚ÑπÔ∏è –ü–æ–º–æ—â—å"]
    ]
    if is_premium:
        keyboard.append(["üë®‚Äçüç≥ –†–µ—Ü–µ–ø—Ç—ã", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"])
        keyboard.append(["üì§ –≠–∫—Å–ø–æ—Ä—Ç", "üíé –ü—Ä–µ–º–∏—É–º"])
    else:
        keyboard.append(["üíé –ü—Ä–µ–º–∏—É–º", "üéüÔ∏è –ü—Ä–æ–º–æ–∫–æ–¥"])
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)

def get_cancel_keyboard():
    return ReplyKeyboardMarkup([["‚ùå –û—Ç–º–µ–Ω–∞", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]], resize_keyboard=True, one_time_keyboard=True)

# ======================
# –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø (–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï!)
# ======================

async def send_notification_job(context: ContextTypes.DEFAULT_TYPE):
    job = context.job
    user_id = job.data["user_id"]
    product_name = job.data["product_name"]
    days_left = job.data.get("days_left", 1)

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø—Ä–æ–¥—É–∫—Ç
        with sqlite3.connect('products.db') as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT id FROM products WHERE user_id = ? AND name = ? AND notified = FALSE", (user_id, product_name))
            if not cursor.fetchone():
                return

        # –ë–∞–∑–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if days_left == 1:
            text = f"‚ö†Ô∏è *{product_name}* –∏—Å–ø–æ—Ä—Ç–∏—Ç—Å—è –∑–∞–≤—Ç—Ä–∞!\n"
        else:
            text = f"‚è≥ *{product_name}* –∏—Å–ø–æ—Ä—Ç–∏—Ç—Å—è —á–µ—Ä–µ–∑ {days_left} –¥–Ω–µ–π!\n"

        # –î–ª—è –ø—Ä–µ–º–∏—É–º-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º —Ä–µ—Ü–µ–ø—Ç
        if get_user_premium_status(user_id):
            suitable_recipes = [
                r for r in RECIPES 
                if any(ing.lower() in product_name.lower() for ing in r.get("ingredients", []))
            ]
            if suitable_recipes:
                recipe = suitable_recipes[0]
                text += f"\nüë®‚Äçüç≥ *–†–µ—Ü–µ–ø—Ç:* {recipe['name']}\n{recipe.get('steps', '')}"
            else:
                text += "\n–ú–æ–∂–µ—Ç, –ø–æ—Ä–∞ –≥–æ—Ç–æ–≤–∏—Ç—å?"

        await context.bot.send_message(chat_id=user_id, text=text, parse_mode='Markdown')
        logger.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

async def check_expired_daily(context: ContextTypes.DEFAULT_TYPE):
    try:
        today = datetime.now().date().isoformat()
        with sqlite3.connect('products.db') as conn:
            cursor = conn.cursor()
            cursor.execute('''
                SELECT user_id, name, expires_at FROM products 
                WHERE expires_at <= ? AND notified = FALSE
            ''', (today,))
            expired = cursor.fetchall()

            for user_id, name, expires_at in expired:
                try:
                    await context.bot.send_message(
                        chat_id=user_id,
                        text=f"üö® *–ü–†–û–°–†–û–ß–ï–ù–û:* {name} (—Å—Ä–æ–∫ –∏—Å—Ç—ë–∫ {expires_at})\n–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –≤—ã–±—Ä–æ—Å–∏—Ç—å!",
                        parse_mode='Markdown'
                    )
                    cursor.execute("UPDATE products SET notified = TRUE WHERE user_id = ? AND name = ?", (user_id, name))
                    conn.commit()
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ—Å—Ä–æ—á–∫–∏ {user_id}: {e}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ check_expired_daily: {e}")

def schedule_notifications(context: ContextTypes.DEFAULT_TYPE, user_id: int, product_name: str, expiration_days: int):
    is_premium = get_user_premium_status(user_id)

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ 1 –¥–µ–Ω—å (–≤—Å–µ–º)
    if expiration_days >= 1:
        notify_time = datetime.now() + timedelta(days=expiration_days - 1)
        if notify_time > datetime.now():
            context.job_queue.run_once(
                send_notification_job,
                when=notify_time,
                data={"user_id": user_id, "product_name": product_name, "days_left": 1},
                name=f"notify_{user_id}_{product_name}_1d"
            )

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ 3 –¥–Ω—è (—Ç–æ–ª—å–∫–æ –ø—Ä–µ–º–∏—É–º)
    if is_premium and expiration_days > 3:
        notify_time = datetime.now() + timedelta(days=expiration_days - 3)
        if notify_time > datetime.now():
            context.job_queue.run_once(
                send_notification_job,
                when=notify_time,
                data={"user_id": user_id, "product_name": product_name, "days_left": 3},
                name=f"notify_{user_id}_{product_name}_3d"
            )

# ======================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ü–†–ï–ú–ò–£–ú-–§–£–ù–ö–¶–ò–ô
# ======================

async def stats_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not get_user_premium_status(user_id):
        await update.message.reply_text("üìä –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ü—Ä–µ–º–∏—É–º–µ!", reply_markup=get_main_menu_keyboard())
        return

    with sqlite3.connect('products.db') as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT COUNT(*) FROM products WHERE user_id = ?", (user_id,))
        total = cursor.fetchone()[0]
        cursor.execute("SELECT COUNT(*) FROM products WHERE user_id = ? AND notified = TRUE AND expires_at > ?", (user_id, datetime.now().date().isoformat()))
        saved = cursor.fetchone()[0]
        cursor.execute("SELECT COUNT(*) FROM products WHERE user_id = ? AND expires_at >= ?", (user_id, datetime.now().date().isoformat()))
        active = cursor.fetchone()[0]

    text = (
        "üìä *–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n\n"
        f"üì¶ –í—Å–µ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {total}\n"
        f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {active}\n"
        f"üõ°Ô∏è –°–ø–∞—Å–µ–Ω–æ –æ—Ç –ø—Ä–æ—Å—Ä–æ—á–∫–∏: {saved}\n\n"
        "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! üå±"
    )
    await update.message.reply_text(text, parse_mode='Markdown', reply_markup=get_main_menu_keyboard(True))

async def export_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not get_user_premium_status(user_id):
        await update.message.reply_text("üì§ –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ü—Ä–µ–º–∏—É–º–µ!", reply_markup=get_main_menu_keyboard())
        return

    with sqlite3.connect('products.db') as conn:
        cursor = conn.cursor()
        cursor.execute('''
            SELECT name, purchase_date, expires_at FROM products 
            WHERE user_id = ? ORDER BY expires_at
        ''', (user_id,))
        products = cursor.fetchall()

    if not products:
        await update.message.reply_text("–ù–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.", reply_markup=get_main_menu_keyboard(True))
        return

    text = "üìã *–í–∞—à–∏ –ø—Ä–æ–¥—É–∫—Ç—ã (—ç–∫—Å–ø–æ—Ä—Ç):*\n\n"
    for name, purchase, expires in products:
        text += f"‚Ä¢ {name} | –ö—É–ø–ª–µ–Ω–æ: {purchase} | –ò—Å—Ç–µ–∫–∞–µ—Ç: {expires}\n"

    await update.message.reply_text(text, parse_mode='Markdown', reply_markup=get_main_menu_keyboard(True))

# ======================
# –û–°–¢–ê–õ–¨–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò
# ======================

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    is_premium = get_user_premium_status(user_id)
    welcome_text = (
        "üåü *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Freshly Bot!*\n\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –Ω–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞—Ç—å –µ–¥—É –∏ —ç–∫–æ–Ω–æ–º–∏—Ç—å –¥–µ–Ω—å–≥–∏!\n\n"
        "‚ú® *–ü—Ä–µ–º–∏—É–º-—Ñ—É–Ω–∫—Ü–∏–∏:* —Ä–µ—Ü–µ–ø—Ç—ã, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞, —ç–∫—Å–ø–æ—Ä—Ç –∏ —Ä–∞–Ω–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."
    )
    await update.message.reply_text(
        welcome_text,
        parse_mode='Markdown',
        reply_markup=get_main_menu_keyboard(is_premium)
    )

async def premium_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    is_premium = get_user_premium_status(user_id)
    if is_premium:
        await update.message.reply_text(
            "üíé *–í—ã —É–∂–µ –≤ –ü—Ä–µ–º–∏—É–º–µ!*\n\n"
            "‚ú® –î–æ—Å—Ç—É–ø–Ω—ã:\n"
            "‚Ä¢ üë®‚Äçüç≥ –†–µ—Ü–µ–ø—Ç—ã –ø–æ –≤–∞—à–∏–º –ø—Ä–æ–¥—É–∫—Ç–∞–º\n"
            "‚Ä¢ ‚è≥ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞ 3 –¥–Ω—è\n"
            "‚Ä¢ üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è\n"
            "‚Ä¢ üì§ –≠–∫—Å–ø–æ—Ä—Ç —Å–ø–∏—Å–∫–∞\n\n"
            "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç–µ –±–æ—Ç–∞!",
            parse_mode='Markdown',
            reply_markup=get_main_menu_keyboard(True)
        )
    else:
        await update.message.reply_text(
            "üíé *–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ü—Ä–µ–º–∏—É–º –±–µ—Å–ø–ª–∞—Ç–Ω–æ –Ω–∞ 1 –¥–µ–Ω—å!*\n\n"
            "–ò–ª–∏ –∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –ø–æ–ª–Ω—É—é –≤–µ—Ä—Å–∏—é —Å –ø–æ–º–æ—â—å—é –ø—Ä–æ–º–æ–∫–æ–¥–∞!",
            parse_mode='Markdown',
            reply_markup=get_main_menu_keyboard(False)
        )

async def recipes_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not get_user_premium_status(user_id):
        await update.message.reply_text("üë®‚Äçüç≥ –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ü—Ä–µ–º–∏—É–º–µ!", reply_markup=get_main_menu_keyboard())
        return

    with sqlite3.connect('products.db') as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT name FROM products WHERE user_id = ? AND notified = FALSE", (user_id,))
        products = [row[0] for row in cursor.fetchall()]

    if not products:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è —Ä–µ—Ü–µ–ø—Ç–æ–≤.", reply_markup=get_main_menu_keyboard(True))
        return

    suitable_recipes = []
    for recipe in RECIPES:
        if any(ing.lower() in p.lower() for p in products for ing in recipe.get("ingredients", [])):
            suitable_recipes.append(recipe)

    if not suitable_recipes:
        suitable_recipes = RECIPES[:2]

    text = "üë®‚Äçüç≥ *–†–µ—Ü–µ–ø—Ç—ã –¥–ª—è –≤–∞—Å:*\n\n"
    for r in suitable_recipes[:2]:
        text += f"üîπ *{r['name']}*\n–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã: {', '.join(r.get('ingredients', []))}\n{r.get('steps', '')}\n\n"

    await update.message.reply_text(text, parse_mode='Markdown', reply_markup=get_main_menu_keyboard(True))

# --- –ü—Ä–æ–º–æ–∫–æ–¥—ã ---
async def promo_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üéüÔ∏è *–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥:*\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã:\n"
        "‚Ä¢ –ù–µ–¥–µ–ª—è: `FRESHW1`‚Äì`FRESHW5`\n"
        "‚Ä¢ –ú–µ—Å—è—Ü: `FRESHM1`‚Äì`FRESHM5`\n"
        "‚Ä¢ –ì–æ–¥: `FRESHY1`‚Äì`FRESHY5`",
        parse_mode='Markdown',
        reply_markup=ReplyKeyboardMarkup([["üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]], resize_keyboard=True, one_time_keyboard=True)
    )
    return ENTERING_PROMO_CODE

async def handle_promo_code(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    code = update.message.text.strip()

    if code == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        is_premium = get_user_premium_status(user_id)
        await start(update, context)
        return ConversationHandler.END

    with sqlite3.connect('products.db') as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT days, max_uses, uses_count FROM promo_codes WHERE code = ?", (code,))
        row = cursor.fetchone()

        if not row:
            await update.message.reply_text("‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_main_menu_keyboard(get_user_premium_status(user_id)))
            return ConversationHandler.END

        days, max_uses, uses_count = row

        if max_uses is not None and uses_count >= max_uses:
            await update.message.reply_text("‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω.", reply_markup=get_main_menu_keyboard(get_user_premium_status(user_id)))
            return ConversationHandler.END

        activate_premium(user_id, days)
        cursor.execute("UPDATE promo_codes SET uses_count = uses_count + 1 WHERE code = ?", (code,))
        conn.commit()

        await update.message.reply_text(
            f"üéâ *–ü—Ä–µ–º–∏—É–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –Ω–∞ {days} –¥–Ω–µ–π!*\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã: —Ä–µ—Ü–µ–ø—Ç—ã, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞, —ç–∫—Å–ø–æ—Ä—Ç –∏ —Ä–∞–Ω–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!",
            parse_mode='Markdown',
            reply_markup=get_main_menu_keyboard(True)
        )
        return ConversationHandler.END

# --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ ---
async def start_add_manually(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞:", reply_markup=get_cancel_keyboard())
    return CHOOSING_PRODUCT_NAME

async def choose_product_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_input = update.message.text.strip()
    if user_input in ["‚ùå –û—Ç–º–µ–Ω–∞", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]:
        return await cancel(update, context)
    if not user_input:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.")
        return CHOOSING_PRODUCT_NAME
    context.user_data['product_name'] = user_input
    await update.message.reply_text("üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø–æ–∫—É–ø–∫–∏ (–î–î.–ú–ú.–ì–ì–ì–ì):", reply_markup=get_cancel_keyboard())
    return CHOOSING_PURCHASE_DATE

async def choose_purchase_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_input = update.message.text.strip()
    if user_input in ["‚ùå –û—Ç–º–µ–Ω–∞", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]:
        return await cancel(update, context)
    parsed_date = parse_date(user_input)
    if parsed_date is None:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã.", reply_markup=get_cancel_keyboard())
        return CHOOSING_PURCHASE_DATE
    context.user_data['purchase_date'] = parsed_date.isoformat()
    await update.message.reply_text("üìÜ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å—Ä–æ–∫–∞:", reply_markup=get_cancel_keyboard())
    return CHOOSING_EXPIRATION_DATE

async def choose_expiration_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_input = update.message.text.strip()
    if user_input in ["‚ùå –û—Ç–º–µ–Ω–∞", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]:
        return await cancel(update, context)
    parsed_date = parse_date(user_input)
    if parsed_date is None:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã.", reply_markup=get_cancel_keyboard())
        return CHOOSING_EXPIRATION_DATE

    today = datetime.now().date()
    if parsed_date < today:
        await update.message.reply_text("–î–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º.", reply_markup=get_cancel_keyboard())
        return CHOOSING_EXPIRATION_DATE

    purchase_date = datetime.strptime(context.user_data['purchase_date'], '%Y-%m-%d').date()
    expiration_days = (parsed_date - purchase_date).days
    if expiration_days < 0:
        await update.message.reply_text("–î–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Ä–∞–Ω—å—à–µ –ø–æ–∫—É–ø–∫–∏.", reply_markup=get_main_menu_keyboard(get_user_premium_status(update.effective_user.id)))
        return ConversationHandler.END

    user_id = update.effective_user.id
    product_name = context.user_data['product_name']
    purchase_date_str = context.user_data['purchase_date']
    expires_at_str = parsed_date.isoformat()

    try:
        with sqlite3.connect('products.db') as conn:
            cursor = conn.cursor()
            cursor.execute('''
                INSERT INTO products (user_id, name, purchase_date, expiration_days, added_at, expires_at)
                VALUES (?, ?, ?, ?, ?, ?)
            ''', (user_id, product_name, purchase_date_str, expiration_days, datetime.now().isoformat(), expires_at_str))
            conn.commit()

        schedule_notifications(context, user_id, product_name, expiration_days)

        await update.message.reply_text(
            f"üéâ –ü—Ä–æ–¥—É–∫—Ç –¥–æ–±–∞–≤–ª–µ–Ω!\n\nüîπ {product_name}\nüìÜ –ò—Å—Ç–µ–∫–∞–µ—Ç: {expires_at_str}\n‚è≥ –°—Ä–æ–∫: {expiration_days} –¥–Ω–µ–π",
            parse_mode='Markdown',
            reply_markup=get_main_menu_keyboard(get_user_premium_status(user_id))
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.", reply_markup=get_main_menu_keyboard(get_user_premium_status(user_id)))

    return ConversationHandler.END

# --- –§–æ—Ç–æ ---
async def recognize_product(photo_path: str) -> str:
    products = ["–ú–æ–ª–æ–∫–æ", "–•–ª–µ–±", "–Ø–π—Ü–∞", "–°—ã—Ä", "–ô–æ–≥—É—Ä—Ç", "–ú—è—Å–æ", "–†—ã–±–∞", "–û–≤–æ—â–∏", "–§—Ä—É–∫—Ç—ã"]
    return random.choice(products)

async def start_add_by_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –ø—Ä–æ–¥—É–∫—Ç–∞!", reply_markup=get_cancel_keyboard())
    return PHOTO_RECOGNITION

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    photo_file = await update.message.photo[-1].get_file()
    file_id = update.message.photo[-1].file_id
    photo_path = f"photos/photo_{user_id}_{file_id[-10:]}.jpg"
    os.makedirs("photos", exist_ok=True)
    await photo_file.download_to_drive(photo_path)
    product_name = await recognize_product(photo_path)
    os.remove(photo_path)

    context.user_data['product_name'] = product_name
    await update.message.reply_text(f"ü§ñ –†–∞—Å–ø–æ–∑–Ω–∞–Ω: {product_name}\nüìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø–æ–∫—É–ø–∫–∏:", reply_markup=get_cancel_keyboard())
    return CHOOSING_PURCHASE_DATE

# --- –ü—Ä–æ—á–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
async def list_products_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    with sqlite3.connect('products.db') as conn:
        cursor = conn.cursor()
        cursor.execute('''
            SELECT name, expires_at FROM products WHERE user_id = ? ORDER BY expires_at
        ''', (user_id,))
        products = cursor.fetchall()

    if not products:
        await update.message.reply_text("üì¶ –ü–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤.", reply_markup=get_main_menu_keyboard(get_user_premium_status(user_id)))
        return

    text = "üìã *–í–∞—à–∏ –ø—Ä–æ–¥—É–∫—Ç—ã:*\n\n"
    today = datetime.now().date()
    for name, expires_at in products:
        exp_date = datetime.strptime(expires_at, '%Y-%m-%d').date()
        days_left = (exp_date - today).days
        if days_left < 0:
            status = "üî¥ –ü–†–û–°–†–û–ß–ï–ù–û"
        elif days_left == 0:
            status = "üî¥ –°–µ–≥–æ–¥–Ω—è!"
        elif days_left == 1:
            status = "üü† –ó–∞–≤—Ç—Ä–∞"
        elif days_left <= 3:
            status = f"üü° –ß–µ—Ä–µ–∑ {days_left} –¥–Ω—è"
        else:
            status = f"üü¢ –ï—â—ë {days_left} –¥–Ω–µ–π"
        text += f"‚Ä¢ *{name}* ‚Äî {status}\n"

    await update.message.reply_text(text, parse_mode='Markdown', reply_markup=get_main_menu_keyboard(get_user_premium_status(user_id)))

async def show_expired_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    today = datetime.now().date().isoformat()
    with sqlite3.connect('products.db') as conn:
        cursor = conn.cursor()
        cursor.execute('''
            SELECT name, expires_at FROM products 
            WHERE user_id = ? AND expires_at <= ? AND notified = FALSE
        ''', (user_id, today))
        expired = cursor.fetchall()

    if not expired:
        text = "‚úÖ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –Ω–µ—Ç!"
    else:
        text = "üö® *–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã:*\n\n"
        for name, expires_at in expired:
            text += f"‚Ä¢ *{name}* ‚Äî –∏—Å—Ç–µ–∫ {expires_at}\n"
        text += "\n‚ùå –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –≤—ã–±—Ä–æ—Å–∏—Ç—å!"

    await update.message.reply_text(text, parse_mode='Markdown', reply_markup=get_main_menu_keyboard(get_user_premium_status(user_id)))

async def clear_products_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    with sqlite3.connect('products.db') as conn:
        cursor = conn.cursor()
        cursor.execute('DELETE FROM products WHERE user_id = ?', (user_id,))
        conn.commit()
    await update.message.reply_text("üóëÔ∏è –í—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã —É–¥–∞–ª–µ–Ω—ã!", reply_markup=get_main_menu_keyboard(get_user_premium_status(user_id)))

async def help_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "‚ÑπÔ∏è *–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:*\n\n"
        "1. –î–æ–±–∞–≤—å—Ç–µ –ø—Ä–æ–¥—É–∫—Ç –ø–æ —Ñ–æ—Ç–æ –∏–ª–∏ –≤—Ä—É—á–Ω—É—é\n"
        "2. –ë–æ—Ç –Ω–∞–ø–æ–º–Ω–∏—Ç –∑–∞ –¥–µ–Ω—å –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è\n"
        "3. –í –ü—Ä–µ–º–∏—É–º–µ ‚Äî —Ä–µ—Ü–µ–ø—Ç—ã, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞, —ç–∫—Å–ø–æ—Ä—Ç –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ 3 –¥–Ω—è\n"
        "4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ü—Ä–µ–º–∏—É–º–∞!",
        parse_mode='Markdown',
        reply_markup=get_main_menu_keyboard(get_user_premium_status(update.effective_user.id))
    )

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    is_premium = get_user_premium_status(update.effective_user.id)
    await update.message.reply_text('‚úÖ –û—Ç–º–µ–Ω–µ–Ω–æ.', reply_markup=get_main_menu_keyboard(is_premium))
    context.user_data.clear()
    return ConversationHandler.END

async def handle_menu_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    user_id = update.effective_user.id
    is_premium = get_user_premium_status(user_id)

    handlers = {
        "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é": start,
        "‚ùå –û—Ç–º–µ–Ω–∞": cancel,
        "üì∏ –î–æ–±–∞–≤–∏—Ç—å –ø–æ —Ñ–æ—Ç–æ": start_add_by_photo,
        "‚úçÔ∏è –î–æ–±–∞–≤–∏—Ç—å –≤—Ä—É—á–Ω—É—é": start_add_manually,
        "üìã –ú–æ–∏ –ø—Ä–æ–¥—É–∫—Ç—ã": list_products_handler,
        "üö® –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ": show_expired_handler,
        "üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å—ë": clear_products_handler,
        "‚ÑπÔ∏è –ü–æ–º–æ—â—å": help_handler,
        "üíé –ü—Ä–µ–º–∏—É–º": premium_handler,
        "üéüÔ∏è –ü—Ä–æ–º–æ–∫–æ–¥": promo_handler,
        "üë®‚Äçüç≥ –†–µ—Ü–µ–ø—Ç—ã": recipes_handler,
        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞": stats_handler,
        "üì§ –≠–∫—Å–ø–æ—Ä—Ç": export_handler,
    }

    if text in handlers:
        if text in ["üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "‚ùå –û—Ç–º–µ–Ω–∞"]:
            return await handlers[text](update, context)
        else:
            return await handlers[text](update, context)
    else:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.", reply_markup=get_main_menu_keyboard(is_premium))
        return ConversationHandler.END

# --- –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤ ---
def load_recipes():
    try:
        with open('recipes.json', 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        return [{"name": "–û–º–ª–µ—Ç", "ingredients": ["–Ø–π—Ü–∞"], "steps": "–í–∑–±–µ–π—Ç–µ —è–π—Ü–∞ –∏ –ø–æ–∂–∞—Ä—å—Ç–µ."}]

RECIPES = load_recipes()

# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ---
def main():
    init_db()
    ensure_promo_codes_exist()

    application = Application.builder().token(TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–∏–∞–ª–æ–≥–æ–≤
    manual_conv = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^‚úçÔ∏è –î–æ–±–∞–≤–∏—Ç—å –≤—Ä—É—á–Ω—É—é$"), start_add_manually)],
        states={
            CHOOSING_PRODUCT_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, choose_product_name)],
            CHOOSING_PURCHASE_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, choose_purchase_date)],
            CHOOSING_EXPIRATION_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, choose_expiration_date)],
        },
        fallbacks=[MessageHandler(filters.Regex("^(‚ùå –û—Ç–º–µ–Ω–∞|üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é)$"), cancel)],
        allow_reentry=True
    )

    photo_conv = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^üì∏ –î–æ–±–∞–≤–∏—Ç—å –ø–æ —Ñ–æ—Ç–æ$"), start_add_by_photo)],
        states={
            PHOTO_RECOGNITION: [MessageHandler(filters.PHOTO, handle_photo)],
            CHOOSING_PURCHASE_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, choose_purchase_date)],
            CHOOSING_EXPIRATION_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, choose_expiration_date)],
        },
        fallbacks=[MessageHandler(filters.Regex("^(‚ùå –û—Ç–º–µ–Ω–∞|üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é)$"), cancel)],
        allow_reentry=True
    )

    promo_conv = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^üéüÔ∏è –ü—Ä–æ–º–æ–∫–æ–¥$"), promo_handler)],
        states={
            ENTERING_PROMO_CODE: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_promo_code)],
        },
        fallbacks=[MessageHandler(filters.Regex("^üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é$"), start)],
        allow_reentry=True
    )

    application.add_handler(CommandHandler("start", start))
    application.add_handler(manual_conv)
    application.add_handler(photo_conv)
    application.add_handler(promo_conv)
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_menu_choice))

    # –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–∫–∏
    application.job_queue.run_daily(check_expired_daily, time(hour=9, minute=0))

    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    application.run_polling()

if __name__ == '__main__':
    main()
