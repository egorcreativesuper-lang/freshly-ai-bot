import logging
import sqlite3
import os
import re
import random
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
from apscheduler.schedulers.background import BackgroundScheduler
from apscheduler.jobstores.base import JobLookupError
import json

# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
# –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–û–ï –î–û–ë–ê–í–õ–ï–ù–ò–ï: –ü–†–û–í–ï–†–ö–ê –í–ï–†–°–ò–ò –ë–ò–ë–õ–ò–û–¢–ï–ö–ò
import telegram
# <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞
TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
if not TOKEN:
    logger.error("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω! –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é TELEGRAM_BOT_TOKEN –≤ Render ‚Üí Environment")
    exit(1)

# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
# –í–´–í–û–î –í–ï–†–°–ò–ò –ë–ò–ë–õ–ò–û–¢–ï–ö–ò –î–õ–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò
logger.info(f"‚úÖ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞. –í–µ—Ä—Å–∏—è python-telegram-bot: {telegram.__version__}")
# <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
scheduler = BackgroundScheduler()
scheduler.start()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('products.db')
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS products (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            name TEXT NOT NULL,
            purchase_date TEXT NOT NULL,
            expiration_days INTEGER NOT NULL,
            added_at TEXT NOT NULL,
            expires_at TEXT NOT NULL,
            notified BOOLEAN DEFAULT FALSE
        )
    ''')
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
    cursor.execute('CREATE INDEX IF NOT EXISTS idx_user_id ON products(user_id)')
    cursor.execute('CREATE INDEX IF NOT EXISTS idx_expires_at ON products(expires_at)')
    conn.commit()
    conn.close()

init_db()

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤
def load_recipes():
    try:
        with open('recipes.json', 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        logger.warning("–§–∞–π–ª recipes.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return []

RECIPES = load_recipes()

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def create_safe_callback_data(product_name, product_id):
    """–°–æ–∑–¥–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã–π callback_data –±–µ–∑ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤"""
    safe_name = re.sub(r'[^a-zA-Z0-9–∞-—è–ê-–Ø]', '_', product_name)
    return f"recipe_{safe_name}_{product_id}"

def parse_callback_data(callback_data):
    """–ü–∞—Ä—Å–∏—Ç callback_data –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç product_name –∏ product_id"""
    try:
        parts = callback_data.split('_')
        if len(parts) >= 3:
            product_name = parts[1].replace('_', ' ')  # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–±–µ–ª—ã
            product_id = parts[2]
            return product_name, product_id
        return None, None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ callback_data: {e}")
        return None, None

async def recognize_product(photo_path: str) -> str:
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞"""
    products = ["–ú–æ–ª–æ–∫–æ", "–•–ª–µ–±", "–Ø–π—Ü–∞", "–°—ã—Ä", "–ô–æ–≥—É—Ä—Ç", "–ú—è—Å–æ", "–†—ã–±–∞", "–û–≤–æ—â–∏", "–§—Ä—É–∫—Ç—ã"]
    return random.choice(products)

def create_recipe_keyboard(product_name, product_id):
    """–°–æ–∑–¥–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–µ—Ü–µ–ø—Ç–æ–≤"""
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üìñ –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç", callback_data=create_safe_callback_data(product_name, product_id))],
        [InlineKeyboardButton("üîî –ù–∞–ø–æ–º–Ω–∏—Ç—å –ø–æ–∑–∂–µ", callback_data=f"remind_{product_id}")],
        [InlineKeyboardButton("‚ùå –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="ignore")]
    ])

def schedule_notification(product_id: int, user_id: int, product_name: str, expiration_days: int):
    """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ 1 –¥–µ–Ω—å –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å—Ä–æ–∫–∞"""
    try:
        notify_time = datetime.now() + timedelta(days=expiration_days - 1)
        job_id = f"notify_{user_id}_{product_id}"
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é job –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        try:
            scheduler.remove_job(job_id)
        except JobLookupError:
            pass
            
        scheduler.add_job(
            send_notification,
            'date',
            run_date=notify_time,
            args=[user_id, product_name, product_id],
            id=job_id
        )
        logger.info(f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ {product_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

async def send_notification(user_id: int, product_name: str, product_id: int):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–∫–æ—Ä–æ–º –∏—Å—Ç–µ—á–µ–Ω–∏–∏ —Å—Ä–æ–∫–∞"""
    try:
        from telegram import Bot
        bot = Bot(token=TOKEN)
        
        await bot.send_message(
            chat_id=user_id,
            text=f"‚ö†Ô∏è *{product_name}* –∏—Å–ø–æ—Ä—Ç–∏—Ç—Å—è –∑–∞–≤—Ç—Ä–∞!\n–ü–æ–ø—Ä–æ–±—É–π –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å —á—Ç–æ-–Ω–∏–±—É–¥—å? üë®‚Äçüç≥",
            parse_mode='Markdown',
            reply_markup=create_recipe_keyboard(product_name, product_id)
        )
        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ {product_name}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî Freshly Bot ü§ñ\n"
        "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞—Ç—å –µ–¥—É ‚Äî –∏ –Ω–∏–∫—Ç–æ –Ω–µ —É–∑–Ω–∞–µ—Ç, —á—Ç–æ —É —Ç–µ–±—è –≤ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–µ.\n\n"
        "üì∏ –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ –ø—Ä–æ–¥—É–∫—Ç–∞ ‚Äî –∏ —è —Å–∫–∞–∂—É, –∫–æ–≥–¥–∞ –æ–Ω –∏—Å–ø–æ—Ä—Ç–∏—Ç—Å—è.\n"
        "üìã –ö–æ–º–∞–Ω–¥—ã:\n"
        "/list ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã\n"
        "/expired ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã\n"
        "/clear ‚Äî —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã"
    )

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id = update.message.from_user.id
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ñ–æ—Ç–æ –µ—Å–ª–∏ –Ω–µ—Ç
        os.makedirs("photos", exist_ok=True)
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
        photo_file = await update.message.photo[-1].get_file()
        file_id = update.message.photo[-1].file_id
        photo_hash = file_id[-10:]  # –ü—Ä–æ—Å—Ç–æ–π —Ö—ç—à
        photo_path = f"photos/photo_{user_id}_{photo_hash}.jpg"
        await photo_file.download_to_drive(photo_path)

        # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç
        product_name = await recognize_product(photo_path)
        
        if not product_name:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–¥—É–∫—Ç –≤ –ë–î
        conn = sqlite3.connect('products.db')
        cursor = conn.cursor()
        purchase_date = datetime.now().strftime('%Y-%m-%d')
        expiration_days = random.randint(3, 14)  # –°–ª—É—á–∞–π–Ω—ã–π —Å—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏
        added_at = datetime.now().isoformat()
        expires_at = (datetime.now() + timedelta(days=expiration_days)).strftime('%Y-%m-%d')

        cursor.execute('''
            INSERT INTO products (user_id, name, purchase_date, expiration_days, added_at, expires_at)
            VALUES (?, ?, ?, ?, ?, ?)
        ''', (user_id, product_name, purchase_date, expiration_days, added_at, expires_at))
        product_id = cursor.lastrowid
        conn.commit()
        conn.close()

        # –ü–ª–∞–Ω–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        schedule_notification(product_id, user_id, product_name, expiration_days)

        await update.message.reply_text(
            f"‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–ª: *{product_name}*\n"
            f"üìÖ –ö—É–ø–ª–µ–Ω–æ: {purchase_date}\n"
            f"‚è≥ –ò—Å—Ç–µ–∫–∞–µ—Ç: {expires_at} (—á–µ—Ä–µ–∑ {expiration_days} –¥–Ω–µ–π)\n"
            "üîî –ù–∞–ø–æ–º–Ω—é –∑–∞ 1 –¥–µ–Ω—å –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è!",
            parse_mode='Markdown'
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ")

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    try:
        if query.data == "ignore":
            await query.edit_message_text("–•–æ—Ä–æ—à–æ, –Ω–∞–ø–æ–º–Ω—é –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ üòâ")
            
        elif query.data.startswith("remind_"):
            # –ü–µ—Ä–µ–Ω–æ—Å–∏–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞
            product_id = query.data.split('_')[1]
            await query.edit_message_text("üîî –ù–∞–ø–æ–º–Ω—é —á–µ—Ä–µ–∑ –¥–µ–Ω—å! ‚è∞")
            
        elif query.data.startswith("recipe_"):
            product_name, product_id = parse_callback_data(query.data)
            
            if not product_name:
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞")
                return

            # –ò—â–µ–º —Ä–µ—Ü–µ–ø—Ç (–ø—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏)
            recipe = None
            for r in RECIPES:
                if r.get('name', '').lower() == product_name.lower():
                    recipe = r
                    break

            if recipe:
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ—Ü–µ–ø—Ç
                ingredients = ", ".join(recipe.get('ingredients', []))
                steps = "\n".join([f"{i+1}. {step}" for i, step in enumerate(recipe.get('steps', []))])
                
                recipe_text = (
                    f"üë©‚Äçüç≥ *{recipe['name']}*\n\n"
                    f"‚è±Ô∏è –í—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è: {recipe.get('time_minutes', 'N/A')} –º–∏–Ω\n"
                    f"üçΩÔ∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ü–∏–π: {recipe.get('servings', 'N/A')}\n\n"
                    f"*–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:*\n{ingredients}\n\n"
                    f"*–®–∞–≥–∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è:*\n{steps}"
                )
                
                await query.edit_message_text(
                    recipe_text,
                    parse_mode='Markdown',
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
                    ]])
                )
            else:
                await query.edit_message_text(
                    f"üìö –†–µ—Ü–µ–ø—Ç –¥–ª—è *{product_name}* –Ω–µ –Ω–∞–π–¥–µ–Ω üòî\n\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∏—Å–∫–∞—Ç—å –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ –∏–ª–∏ –ø—Ä–∏–¥—É–º–∞—Ç—å —Å–≤–æ–π —Ä–µ—Ü–µ–ø—Ç!",
                    parse_mode='Markdown'
                )
                
        elif query.data == "back_to_main":
            await query.edit_message_text(
                "üîî –Ø –Ω–∞–ø–æ–º–Ω—é –æ –¥—Ä—É–≥–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–∞—Ö –≤–æ–≤—Ä–µ–º—è! üòä",
                reply_markup=None
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ button_handler: {e}")
        try:
            await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")
        except:
            pass

async def list_products(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id = update.message.from_user.id
        conn = sqlite3.connect('products.db')
        cursor = conn.cursor()
        cursor.execute('''
            SELECT name, purchase_date, expiration_days, expires_at, notified 
            FROM products WHERE user_id = ? ORDER BY expires_at
        ''', (user_id,))
        products = cursor.fetchall()
        conn.close()

        if not products:
            await update.message.reply_text("üì¶ –ü–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤. –û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ ‚Äî –∏ —è –¥–æ–±–∞–≤–ª—é!")
            return

        text = "üìã *–¢–≤–æ–∏ –ø—Ä–æ–¥—É–∫—Ç—ã:*\n\n"
        today = datetime.now().date()
        
        for name, purchase_date, exp_days, expires_at, notified in products:
            expires_date = datetime.strptime(expires_at, '%Y-%m-%d').date()
            days_left = (expires_date - today).days
            
            if days_left < 0:
                status = "üî¥ –ü–†–û–°–†–û–ß–ï–ù–û"
            elif days_left == 0:
                status = "üî¥ –ò—Å—Ç–µ–∫–∞–µ—Ç —Å–µ–≥–æ–¥–Ω—è!"
            elif days_left == 1:
                status = "üü† –ò—Å—Ç–µ–∫–∞–µ—Ç –∑–∞–≤—Ç—Ä–∞"
            elif days_left <= 3:
                status = f"üü° –ò—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ {days_left} –¥–Ω—è"
            else:
                status = f"üü¢ –ï—â—ë {days_left} –¥–Ω–µ–π"
                
            text += f"‚Ä¢ *{name}* ‚Äî {status}\n"

        await update.message.reply_text(text, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ list_products: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤")

async def show_expired(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã"""
    try:
        user_id = update.message.from_user.id
        conn = sqlite3.connect('products.db')
        cursor = conn.cursor()
        
        today = datetime.now().strftime('%Y-%m-%d')
        cursor.execute('''
            SELECT name, expires_at FROM products 
            WHERE user_id = ? AND expires_at <= ? AND notified = FALSE
            ORDER BY expires_at
        ''', (user_id, today))
        
        expired_products = cursor.fetchall()
        conn.close()

        if not expired_products:
            await update.message.reply_text("‚úÖ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –Ω–µ—Ç!")
            return
        
        text = "üö® *–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã:*\n\n"
        for name, expires_at in expired_products:
            text += f"‚Ä¢ *{name}* - –∏—Å—Ç–µ–∫ {expires_at}\n"
        
        text += "\n‚ùå –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –≤—ã–±—Ä–æ—Å–∏—Ç—å —ç—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç—ã!"
        await update.message.reply_text(text, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_expired: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤")

async def clear_products(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id = update.message.from_user.id
        conn = sqlite3.connect('products.db')
        cursor = conn.cursor()
        cursor.execute('DELETE FROM products WHERE user_id = ?', (user_id,))
        conn.commit()
        conn.close()

        # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        for job in scheduler.get_jobs():
            if job.id.startswith(f"notify_{user_id}_"):
                try:
                    scheduler.remove_job(job.id)
                except JobLookupError:
                    pass

        await update.message.reply_text("üóëÔ∏è –í—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã —É–¥–∞–ª–µ–Ω—ã!")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ clear_products: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤")

async def check_expired_products():
    """–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤"""
    try:
        from telegram import Bot
        bot = Bot(token=TOKEN)
        
        conn = sqlite3.connect('products.db')
        cursor = conn.cursor()
        
        today = datetime.now().strftime('%Y-%m-%d')
        cursor.execute('''
            SELECT DISTINCT user_id FROM products 
            WHERE expires_at <= ? AND notified = FALSE
        ''', (today,))
        
        expired_users = cursor.fetchall()
        
        for (user_id,) in expired_users:
            try:
                cursor.execute('''
                    SELECT name, expires_at FROM products 
                    WHERE user_id = ? AND expires_at <= ? AND notified = FALSE
                ''', (user_id, today))
                
                expired_products = cursor.fetchall()
                if expired_products:
                    product_list = "\n".join([f"‚Ä¢ {name} (–∏—Å—Ç–µ–∫ {expires_at})" for name, expires_at in expired_products])
                    
                    await bot.send_message(
                        chat_id=user_id,
                        text=f"üö® *–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã:*\n{product_list}\n\n–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –≤—ã–±—Ä–æ—Å–∏—Ç—å!",
                        parse_mode='Markdown'
                    )
                    
                    # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–Ω—ã–µ
                    cursor.execute('''
                        UPDATE products SET notified = TRUE 
                        WHERE user_id = ? AND expires_at <= ?
                    ''', (user_id, today))
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        
        conn.commit()
        conn.close()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ check_expired_products: {e}")

def main():
    try:
        application = Application.builder().token(TOKEN).build()

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("list", list_products))
        application.add_handler(CommandHandler("clear", clear_products))
        application.add_handler(CommandHandler("expired", show_expired))
        application.add_handler(MessageHandler(filters.PHOTO, handle_photo))
        application.add_handler(CallbackQueryHandler(button_handler))

        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –≤ 9:00
        scheduler.add_job(
            check_expired_products,
            'cron',
            hour=9,
            minute=0,
            id='daily_expired_check'
        )

        logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
        application.run_polling()

    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        scheduler.shutdown()

if __name__ == '__main__':
    main()
