import os
import logging
import sqlite3
from datetime import datetime, timedelta
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (Updater, CommandHandler, MessageHandler, 
                         Filters, CallbackContext, ConversationHandler)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
WAITING_PRODUCT, WAITING_DATE = range(2)

# –ë–∞–∑–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
PRODUCTS_DATA = {
    "–º–æ–ª–æ–∫–æ": {"shelf_life": 7, "category": "–º–æ–ª–æ—á–Ω—ã–µ"},
    "–∫–µ—Ñ–∏—Ä": {"shelf_life": 5, "category": "–º–æ–ª–æ—á–Ω—ã–µ"},
    "—Å—ã—Ä": {"shelf_life": 14, "category": "–º–æ–ª–æ—á–Ω—ã–µ"},
    "—Ç–≤–æ—Ä–æ–≥": {"shelf_life": 5, "category": "–º–æ–ª–æ—á–Ω—ã–µ"},
    "—Å–º–µ—Ç–∞–Ω–∞": {"shelf_life": 7, "category": "–º–æ–ª–æ—á–Ω—ã–µ"},
    "–π–æ–≥—É—Ä—Ç": {"shelf_life": 10, "category": "–º–æ–ª–æ—á–Ω—ã–µ"},
    "—è–π—Ü–∞": {"shelf_life": 30, "category": "—è–π—Ü–∞"},
    "–∫—É—Ä–∏—Ü–∞": {"shelf_life": 3, "category": "–º—è—Å–æ"},
    "–≥–æ–≤—è–¥–∏–Ω–∞": {"shelf_life": 4, "category": "–º—è—Å–æ"},
    "—Ä—ã–±–∞": {"shelf_life": 2, "category": "—Ä—ã–±–∞"},
    "—Ö–ª–µ–±": {"shelf_life": 5, "category": "—Ö–ª–µ–±"},
}

class Database:
    def __init__(self):
        self.init_db()
    
    def init_db(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö SQLite"""
        with sqlite3.connect('products.db', check_same_thread=False) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS products (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER,
                    product_name TEXT,
                    purchase_date DATE,
                    expiration_date DATE
                )
            ''')
            conn.commit()
    
    def add_product(self, user_id, product_name, purchase_date):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞"""
        if product_name not in PRODUCTS_DATA:
            return False
        
        shelf_life = PRODUCTS_DATA[product_name]['shelf_life']
        expiration_date = purchase_date + timedelta(days=shelf_life)
        
        with sqlite3.connect('products.db', check_same_thread=False) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                INSERT INTO products (user_id, product_name, purchase_date, expiration_date)
                VALUES (?, ?, ?, ?)
            ''', (user_id, product_name, purchase_date.date(), expiration_date.date()))
            conn.commit()
        
        return True
    
    def get_user_products(self, user_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        with sqlite3.connect('products.db', check_same_thread=False) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                SELECT product_name, purchase_date, expiration_date 
                FROM products 
                WHERE user_id = ? 
                ORDER BY expiration_date
            ''', (user_id,))
            return cursor.fetchall()
    
    def get_products_count(self, user_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        with sqlite3.connect('products.db', check_same_thread=False) as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT COUNT(*) FROM products WHERE user_id = ?', (user_id,))
            result = cursor.fetchone()
            return result[0] if result else 0
    
    def clear_user_products(self, user_id):
        """–û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        with sqlite3.connect('products.db', check_same_thread=False) as conn:
            cursor = conn.cursor()
            cursor.execute('DELETE FROM products WHERE user_id = ?', (user_id,))
            conn.commit()

def start(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    
    welcome_text = f"""
üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø Freshly Bot ‚Äî —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—é —Å—Ä–æ–∫–æ–≤ –≥–æ–¥–Ω–æ—Å—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤.

üìã **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/start - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ  
/list - —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤
/add - –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç
/clear - –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã

üéØ –ù–∞—á–Ω–∏ —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /add!
    """
    
    update.message.reply_text(welcome_text)

def list_products(update: Update, context: CallbackContext) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤"""
    db = Database()
    user = update.effective_user
    products = db.get_user_products(user.id)
    
    if not products:
        update.message.reply_text("üì≠ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤.")
        return
    
    message = "üìã **–í–∞—à–∏ –ø—Ä–æ–¥—É–∫—Ç—ã:**\n\n"
    today = datetime.now().date()
    
    for product_name, purchase_date, expiration_date in products:
        days_left = (expiration_date - today).days
        
        if days_left < 0:
            status = "üî¥"
            status_text = "–ü–†–û–°–†–û–ß–ï–ù–û"
        elif days_left == 0:
            status = "üî¥" 
            status_text = "–ò—Å—Ç–µ–∫–∞–µ—Ç —Å–µ–≥–æ–¥–Ω—è"
        elif days_left == 1:
            status = "üü†"
            status_text = "–ò—Å—Ç–µ–∫–∞–µ—Ç –∑–∞–≤—Ç—Ä–∞"
        elif days_left <= 3:
            status = "üü°"
            status_text = f"–ò—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ {days_left} –¥–Ω—è"
        else:
            status = "üü¢"
            status_text = f"–û—Å—Ç–∞–ª–æ—Å—å {days_left} –¥–Ω–µ–π"
        
        message += f"{status} **{product_name}**\n"
        message += f"   üìÖ –î–æ {expiration_date}\n"
        message += f"   ‚è∞ {status_text}\n\n"
    
    message += f"üìä –í—Å–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {len(products)}/5"
    update.message.reply_text(message)

def clear_products(update: Update, context: CallbackContext) -> None:
    """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤"""
    db = Database()
    user = update.effective_user
    db.clear_user_products(user.id)
    update.message.reply_text("‚úÖ –í—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã —É–¥–∞–ª–µ–Ω—ã!")

def add_product_start(update: Update, context: CallbackContext) -> int:
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞"""
    db = Database()
    user = update.effective_user
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞
    if db.get_products_count(user.id) >= 5:
        update.message.reply_text(
            "‚ùå –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ (5 –ø—Ä–æ–¥—É–∫—Ç–æ–≤). –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /clear —á—Ç–æ–±—ã –æ—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫."
        )
        return ConversationHandler.END
    
    # –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    products_list = "\n".join([f"‚Ä¢ {product}" for product in PRODUCTS_DATA.keys()])
    
    update.message.reply_text(
        f"üì¶ **–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã:**\n{products_list}\n\n"
        "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞:"
    )
    
    return WAITING_PRODUCT

def handle_product_input(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø—Ä–æ–¥—É–∫—Ç–∞"""
    product_name = update.message.text.lower().strip()
    
    if product_name not in PRODUCTS_DATA:
        update.message.reply_text("‚ùå –ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return WAITING_PRODUCT
    
    context.user_data['current_product'] = product_name
    
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
    keyboard = [
        [KeyboardButton("–°–µ–≥–æ–¥–Ω—è"), KeyboardButton("–í—á–µ—Ä–∞")],
        [KeyboardButton("2 –¥–Ω—è –Ω–∞–∑–∞–¥"), KeyboardButton("–û—Ç–º–µ–Ω–∞")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    update.message.reply_text(
        f"üì¶ –ü—Ä–æ–¥—É–∫—Ç: **{product_name}**\n"
        "üìÖ –ö–æ–≥–¥–∞ –≤—ã –∫—É–ø–∏–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ–¥—É–∫—Ç?",
        reply_markup=reply_markup
    )
    
    return WAITING_DATE

def handle_date(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã –ø–æ–∫—É–ø–∫–∏"""
    db = Database()
    user_input = update.message.text
    product_name = context.user_data.get('current_product')
    user = update.effective_user
    
    if user_input == "–û—Ç–º–µ–Ω–∞":
        update.message.reply_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        return ConversationHandler.END
    
    try:
        if user_input == "–°–µ–≥–æ–¥–Ω—è":
            purchase_date = datetime.now()
        elif user_input == "–í—á–µ—Ä–∞":
            purchase_date = datetime.now() - timedelta(days=1)
        elif user_input == "2 –¥–Ω—è –Ω–∞–∑–∞–¥":
            purchase_date = datetime.now() - timedelta(days=2)
        else:
            update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∏–∑ –∫–Ω–æ–ø–æ–∫")
            return WAITING_DATE
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–¥—É–∫—Ç
        success = db.add_product(user.id, product_name, purchase_date)
        
        if success:
            shelf_life = PRODUCTS_DATA[product_name]['shelf_life']
            expiration_date = purchase_date + timedelta(days=shelf_life)
            days_left = (expiration_date.date() - datetime.now().date()).days
            
            update.message.reply_text(
                f"‚úÖ **{product_name}** –¥–æ–±–∞–≤–ª–µ–Ω!\n"
                f"üìÖ –°—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏: {expiration_date.strftime('%d.%m.%Y')}\n"
                f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {days_left}"
            )
        else:
            update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞")
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")
        update.message.reply_text("‚ùå –û—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
        return ConversationHandler.END
    
    return ConversationHandler.END

def cancel(update: Update, context: CallbackContext) -> int:
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    update.message.reply_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    return ConversationHandler.END

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    BOT_TOKEN = os.environ.get('TELEGRAM_BOT_TOKEN')
    
    if not BOT_TOKEN:
        logger.error("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é BOT_TOKEN")
        return
    
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    
    # –°–æ–∑–¥–∞–µ–º Updater –∏ –ø–µ—Ä–µ–¥–∞–µ–º –µ–º—É —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
    updater = Updater(BOT_TOKEN)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    dispatcher = updater.dispatcher
    
    # ConversationHandler –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('add', add_product_start)],
        states={
            WAITING_PRODUCT: [MessageHandler(Filters.text & ~Filters.command, handle_product_input)],
            WAITING_DATE: [MessageHandler(Filters.text & ~Filters.command, handle_date)]
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    dispatcher.add_handler(CommandHandler("start", start))
    dispatcher.add_handler(CommandHandler("list", list_products))
    dispatcher.add_handler(CommandHandler("clear", clear_products))
    dispatcher.add_handler(conv_handler)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    updater.start_polling()
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    
    # –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–æ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è Ctrl-C
    updater.idle()

if __name__ == '__main__':
    main()
