from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
import gspread
from oauth2client.service_account import ServiceAccountCredentials
import datetime
import os

# üîë –¢–æ–∫–µ–Ω –±–æ—Ç–∞ (–±—É–¥–µ–º –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é —Å—Ä–µ–¥—ã –≤ Render)
BOT_TOKEN = os.getenv("BOT_TOKEN")

# üìä Google –¢–∞–±–ª–∏—Ü–∞
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds_dict = {
    "type": "service_account",
    "project_id": os.getenv("GSPREAD_PROJECT_ID"),
    "private_id": os.getenv("GSPREAD_PRIVATE_ID"),
    "private_key": os.getenv("GSPREAD_PRIVATE_KEY").replace('\\n', '\n') if os.getenv("GSPREAD_PRIVATE_KEY") else None,
    "client_email": os.getenv("GSPREAD_CLIENT_EMAIL"),
    "client_id": os.getenv("GSPREAD_CLIENT_ID"),
    "auth_uri": "https://accounts.google.com/o/oauth2/auth",
    "token_uri": "https://oauth2.googleapis.com/token",
    "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
    "client_x509_cert_url": os.getenv("GSPREAD_CLIENT_CERT_URL")
}
creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, scope)
client = gspread.authorize(creds)
sheet = client.open_by_url(os.getenv("SHEET_URL")).sheet1

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üçè –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî Freshly AI.\n"
        "‚úçÔ∏è –î–æ–±–∞–≤—å –ø—Ä–æ–¥—É–∫—Ç: /add [–Ω–∞–∑–≤–∞–Ω–∏–µ] [—Å—Ä–æ–∫ –≤ –¥–Ω—è—Ö]\n"
        "üìã /list ‚Äî –ø–æ–∫–∞–∂—É –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã\n"
        "‚úÖ /eaten [–Ω–æ–º–µ—Ä] ‚Äî –æ—Ç–º–µ—á—É –∫–∞–∫ —Å—ä–µ–¥–µ–Ω–Ω–æ–µ"
    )

async def add_product(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        name = context.args[0]
        days = int(context.args[1])
        today = datetime.date.today().isoformat()
        sheet.append_row([name, days, today, "–ê–∫—Ç–∏–≤–Ω–æ"])
        await update.message.reply_text(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {name} ‚Äî –Ω–∞–ø–æ–º–Ω—é —á–µ—Ä–µ–∑ {days} –¥–Ω–µ–π!")
    except:
        await update.message.reply_text("‚ùó –ò—Å–ø–æ–ª—å–∑—É–π: /add –ù–∞–∑–≤–∞–Ω–∏–µ –°—Ä–æ–∫")

async def list_products(update: Update, context: ContextTypes.DEFAULT_TYPE):
    records = sheet.get_all_records()
    active = [r for r in records if r.get("–°—Ç–∞—Ç—É—Å") == "–ê–∫—Ç–∏–≤–Ω–æ"]
    if not active:
        await update.message.reply_text("üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤.")
        return
    msg = "üìã –¢–≤–æ–∏ –ø—Ä–æ–¥—É–∫—Ç—ã:\n"
    for i, r in enumerate(active, 1):
        added = datetime.date.fromisoformat(r["–î–æ–±–∞–≤–ª–µ–Ω–æ"])
        days_left = r["–°—Ä–æ–∫ (–¥–Ω–µ–π)"] - (datetime.date.today() - added).days
        msg += f"{i}. {r['–ù–∞–∑–≤–∞–Ω–∏–µ']} ‚Äî –æ—Å—Ç–∞–ª–æ—Å—å {days_left} –¥–Ω–µ–π\n"
    await update.message.reply_text(msg)

async def mark_eaten(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        index = int(context.args[0]) - 1
        records = sheet.get_all_records()
        active = [r for r in records if r.get("–°—Ç–∞—Ç—É—Å") == "–ê–∫—Ç–∏–≤–Ω–æ"]
        if 0 <= index < len(active):
            for i, r in enumerate(records):
                if r == active[index]:
                    sheet.update_cell(i + 2, 4, "–°—ä–µ–¥–µ–Ω–æ")
                    await update.message.reply_text(f"üòã {active[index]['–ù–∞–∑–≤–∞–Ω–∏–µ']} ‚Äî –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ —Å—ä–µ–¥–µ–Ω–Ω–æ–µ!")
                    return
        await update.message.reply_text("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä.")
    except:
        await update.message.reply_text("‚ùó –ò—Å–ø–æ–ª—å–∑—É–π: /eaten [–Ω–æ–º–µ—Ä]")

def main():
    app = Application.builder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("add", add_product))
    app.add_handler(CommandHandler("list", list_products))
    app.add_handler(CommandHandler("eaten", mark_eaten))
    app.run_polling()

if __name__ == "__main__":
    main()
