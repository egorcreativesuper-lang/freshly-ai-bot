import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
import gspread
from oauth2client.service_account import ServiceAccountCredentials
import datetime
import os

# üîß –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# üîë –¢–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    logger.error("‚ùå BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω!")
    exit(1)

# üìä Google –¢–∞–±–ª–∏—Ü–∞
try:
    scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
    creds_dict = {
        "type": "service_account",
        "project_id": os.getenv("GSPREAD_PROJECT_ID"),
        "private_id": os.getenv("GSPREAD_PRIVATE_ID"),
        "private_key": os.getenv("GSPREAD_PRIVATE_KEY").replace('\\n', '\n') if os.getenv("GSPREAD_PRIVATE_KEY") else None,
        "client_email": os.getenv("GSPREAD_CLIENT_EMAIL"),
        "client_id": os.getenv("GSPREAD_CLIENT_ID"),
        "auth_uri": "https://accounts.google.com/o/oauth2/auth",
        "token_uri": "https://oauth2.googleapis.com/token",
        "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
        "client_x509_cert_url": os.getenv("GSPREAD_CLIENT_CERT_URL")
    }

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    if not all([creds_dict["project_id"], creds_dict["private_key"], creds_dict["client_email"]]):
        logger.error("‚ùå –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Google Credentials!")
        exit(1)

    creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, scope)
    client = gspread.authorize(creds)
    SHEET_URL = os.getenv("SHEET_URL")
    sheet = client.open_by_url(SHEET_URL).sheet1
    logger.info("‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ Google –¢–∞–±–ª–∏—Ü–µ")

except Exception as e:
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ Google –¢–∞–±–ª–∏—Ü–µ: {e}")
    exit(1)

# ü§ñ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üçè –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî Freshly AI.\n"
        "‚úçÔ∏è –î–æ–±–∞–≤—å –ø—Ä–æ–¥—É–∫—Ç: /add [–Ω–∞–∑–≤–∞–Ω–∏–µ] [—Å—Ä–æ–∫ –≤ –¥–Ω–µ–π]\n"
        "üìã /list ‚Äî –ø–æ–∫–∞–∂—É –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã\n"
        "‚úÖ /eaten [–Ω–æ–º–µ—Ä] ‚Äî –æ—Ç–º–µ—á—É –∫–∞–∫ —Å—ä–µ–¥–µ–Ω–Ω–æ–µ"
    )

async def add_product(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        name = context.args[0]
        days = int(context.args[1])
        today = datetime.date.today().isoformat()
        sheet.append_row([name, days, today, "–ê–∫—Ç–∏–≤–Ω–æ"])
        await update.message.reply_text(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {name} ‚Äî –Ω–∞–ø–æ–º–Ω—é —á–µ—Ä–µ–∑ {days} –¥–Ω–µ–π!")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ /add: {e}")
        await update.message.reply_text("‚ùó –ò—Å–ø–æ–ª—å–∑—É–π: /add –ù–∞–∑–≤–∞–Ω–∏–µ –°—Ä–æ–∫")

async def list_products(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        records = sheet.get_all_records()
        active = [r for r in records if r.get("–°—Ç–∞—Ç—É—Å") == "–ê–∫—Ç–∏–≤–Ω–æ"]
        if not active:
            await update.message.reply_text("üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤.")
            return
        msg = "üìã –¢–≤–æ–∏ –ø—Ä–æ–¥—É–∫—Ç—ã:\n"
        for i, r in enumerate(active, 1):
            added = datetime.date.fromisoformat(r["–î–æ–±–∞–≤–ª–µ–Ω–æ"])
            days_left = r["–°—Ä–æ–∫ (–¥–Ω–µ–π)"] - (datetime.date.today() - added).days
            msg += f"{i}. {r['–ù–∞–∑–≤–∞–Ω–∏–µ']} ‚Äî –æ—Å—Ç–∞–ª–æ—Å—å {days_left} –¥–Ω–µ–π\n"
        await update.message.reply_text(msg
